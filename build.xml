<?xml version="1.0" encoding="UTF-8"?>
<project name="WindowsSpyBlocker" basedir=".">

  <dirname property="project.basedir" file="${ant.file.WindowsSpyBlocker}"/>
  <property name="build.properties" value="${project.basedir}/build.properties"/>
  <property file="${build.properties}"/>

  <!-- Properties -->
  <property environment="env"/>
  <property name="bin.path" value="${project.basedir}\bin"/>
  <property name="app.path" value="${project.basedir}\app"/>
  <property name="build.path" value="${bin.path}\build"/>
  <property name="release.path" value="${bin.path}\release"/>
  <property name="lib.path" value="${bin.path}\lib"/>
  <property name="tmp.path" value="${bin.path}\tmp"/>
  <property name="upx" value="${lib.path}\upx\upx.exe"/>
  <property name="ldflags" value="-s -w"/>

  <!-- Macros -->
  <macrodef name="assertdir">
    <attribute name="dir"/>
    <sequential>
      <fail message="Directory '@{dir}' does not exist">
        <condition><not><available file="@{dir}" type="dir"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="assertfile">
    <attribute name="file"/>
    <sequential>
      <fail message="File '@{file}' does not exist">
        <condition><not><available file="@{file}" type="file"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="ldflags">
    <attribute name="add"/>
    <sequential>
      <var name="ldflags" value="${ldflags} @{add}" />
    </sequential>
  </macrodef>

  <!-- Version -->
  <condition property="app.version" value="${env.TAG_NAME}">
    <and>
      <isset property="env.TAG_NAME"/>
      <not><equals arg1="${env.TAG_NAME}" arg2=""/></not>
    </and>
  </condition>
  <condition property="app.version" value="1.0.0"><not><isset property="app.version"/></not></condition>

  <!-- Build number -->
  <condition property="app.release" value="${env.BUILD_NUMBER}"><isset property="env.BUILD_NUMBER"/></condition>
  <condition property="app.release" value="0"><not><isset property="app.release"/></not></condition>

  <target name="release" depends="init, load.lib, infos, downmod, generate, build" description="Release">
    <echo message="Creating release..."/>
    <copy file="${tmp.path}\${app.id}.exe" todir="${release.path}" overwrite="true"/>
  </target>

  <target name="setup" depends="init, load.lib, downmod, generate" description="Setup workspace"/>

  <target name="init" unless="is.lib.loaded">
    <mkdir dir="${bin.path}"/>
    <mkdir dir="${lib.path}"/>
    <mkdir dir="${tmp.path}"/>
    <delete dir="${build.path}"/>
    <mkdir dir="${build.path}"/>
    <delete dir="${release.path}"/>
    <mkdir dir="${release.path}"/>
  </target>

  <target name="load.lib" unless="is.lib.loaded" depends="load.lib.antcontrib, load.lib.upx">
    <var name="is.lib.loaded" value="true"/>
  </target>

  <target name="load.lib.antcontrib" unless="is.lib.loaded">
    <echo message="Load ANT Contrib"/>
    <mkdir dir="${lib.path}/ant-contrib"/>
    <get dest="${lib.path}/ant-contrib/ant-contrib.jar" src="${antcontrib.url}" skipexisting="true"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${lib.path}/ant-contrib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>

  <target name="load.lib.upx" unless="is.lib.loaded">
    <echo message="Load UPX"/>
    <get dest="${lib.path}/upx.zip" src="${upx.url}" skipexisting="true"/>
    <if>
      <not><available file="${lib.path}/upx" type="dir"/></not>
      <then>
        <unzip src="${lib.path}/upx.zip" dest="${lib.path}/upx">
          <patternset>
            <include name="**/*.exe"/>
          </patternset>
          <mapper type="flatten"/>
        </unzip>
      </then>
    </if>
    <assertfile file="${upx}"/>
  </target>

  <target name="infos">
    <filterset id="filterset.app">
      <filter token="APP_ID" value="${app.id}"/>
      <filter token="APP_NAME" value="${app.name}"/>
      <filter token="APP_DESC" value="${app.desc}"/>
      <filter token="APP_VERSION" value="${app.version}"/>
      <filter token="APP_RELEASE" value="${app.release}"/>
      <filter token="APP_COPYRIGHT" value="${app.url}"/>
    </filterset>
    <echo message="APP_ID        : ${app.id}"/>
    <echo message="APP_NAME      : ${app.name}"/>
    <echo message="APP_DESC      : ${app.desc}"/>
    <echo message="APP_VERSION   : ${app.version}"/>
    <echo message="APP_RELEASE   : ${app.release}"/>
    <echo message="APP_COPYRIGHT : ${app.url}"/>
  </target>

  <target name="downmod" description="Download modules">
    <exec executable="go" failonerror="true" dir="${project.basedir}">
      <arg value="mod"/>
      <arg value="download"/>
    </exec>
  </target>

  <target name="generate" description="Go generate">
    <copy file="${app.path}\versioninfo.json" todir="${project.basedir}" overwrite="true">
      <filterset refid="filterset.app"/>
    </copy>
    <exec executable="go" failonerror="true" dir="${project.basedir}">
      <env key="GOARCH" value="386"/>
      <arg value="generate"/>
      <arg value="-v"/>
    </exec>
  </target>

  <target name="build">
    <delete dir="${tmp.path}\${app.id}.exe"/>
    <var name="ldflags" value="-s -w"/>
    <ldflags add="-X '${app.package}/app/utils/config.AppName=${app.name}'"/>
    <ldflags add="-X '${app.package}/app/utils/config.AppVersion=${app.version}'"/>
    <ldflags add="-X '${app.package}/app/utils/config.AppPackage=${app.package}'"/>
    <ldflags add="-X '${app.package}/app/utils/config.AppUrl=${app.url}'"/>
    <exec executable="go" failonerror="true" dir="${project.basedir}">
      <env key="GOARCH" value="386"/>
      <arg value="build"/>
      <arg value="-o"/>
      <arg value="${tmp.path}\${app.id}.exe"/>
      <arg value="-v"/>
      <arg value="-ldflags"/>
      <arg value="${ldflags}"/>
    </exec>
    <assertfile file="${tmp.path}\${app.id}.exe"/>
  </target>

  <target name="upx">
    <exec executable="${upx}" failonerror="true" dir="${tmp.path}">
      <arg value="-fq"/>
      <arg value="${app.id}.exe"/>
    </exec>
    <assertfile file="${tmp.path}\${app.id}.exe"/>
  </target>

</project>
