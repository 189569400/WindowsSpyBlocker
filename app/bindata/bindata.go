// Code generated by go-bindata.
// sources:
// data/dnscrypt/win10/extra.txt
// data/dnscrypt/win10/spy.txt
// data/dnscrypt/win10/update.txt
// data/dnscrypt/win7/extra.txt
// data/dnscrypt/win7/spy.txt
// data/dnscrypt/win7/update.txt
// data/dnscrypt/win81/extra.txt
// data/dnscrypt/win81/spy.txt
// data/dnscrypt/win81/update.txt
// data/firewall/win10/extra.txt
// data/firewall/win10/spy.txt
// data/firewall/win10/update.txt
// data/firewall/win7/extra.txt
// data/firewall/win7/spy.txt
// data/firewall/win7/update.txt
// data/firewall/win81/extra.txt
// data/firewall/win81/spy.txt
// data/firewall/win81/update.txt
// data/hosts/win10/extra.txt
// data/hosts/win10/spy.txt
// data/hosts/win10/update.txt
// data/hosts/win7/extra.txt
// data/hosts/win7/spy.txt
// data/hosts/win7/update.txt
// data/hosts/win81/extra.txt
// data/hosts/win81/spy.txt
// data/hosts/win81/update.txt
// data/ncsi/ncsi.txt
// data/openwrt/win10/extra/dnsmasq.conf
// data/openwrt/win10/extra/firewall.user
// data/openwrt/win10/spy/dnsmasq.conf
// data/openwrt/win10/spy/firewall.user
// data/openwrt/win10/update/dnsmasq.conf
// data/openwrt/win10/update/firewall.user
// data/openwrt/win7/extra/dnsmasq.conf
// data/openwrt/win7/extra/firewall.user
// data/openwrt/win7/spy/dnsmasq.conf
// data/openwrt/win7/spy/firewall.user
// data/openwrt/win7/update/dnsmasq.conf
// data/openwrt/win7/update/firewall.user
// data/openwrt/win81/extra/dnsmasq.conf
// data/openwrt/win81/extra/firewall.user
// data/openwrt/win81/spy/dnsmasq.conf
// data/openwrt/win81/spy/firewall.user
// data/openwrt/win81/update/dnsmasq.conf
// data/openwrt/win81/update/firewall.user
// data/proxifier/win10/extra/domains.txt
// data/proxifier/win10/extra/ips.txt
// data/proxifier/win10/spy/domains.txt
// data/proxifier/win10/spy/ips.txt
// data/proxifier/win10/update/domains.txt
// data/proxifier/win10/update/ips.txt
// data/proxifier/win7/extra/domains.txt
// data/proxifier/win7/extra/ips.txt
// data/proxifier/win7/spy/domains.txt
// data/proxifier/win7/spy/ips.txt
// data/proxifier/win7/update/domains.txt
// data/proxifier/win7/update/ips.txt
// data/proxifier/win81/extra/domains.txt
// data/proxifier/win81/extra/ips.txt
// data/proxifier/win81/spy/domains.txt
// data/proxifier/win81/spy/ips.txt
// data/proxifier/win81/update/domains.txt
// data/proxifier/win81/update/ips.txt
// data/simplewall/win10/extra/blocklist.xml
// data/simplewall/win10/spy/blocklist.xml
// data/simplewall/win10/update/blocklist.xml
// data/simplewall/win7/extra/blocklist.xml
// data/simplewall/win7/spy/blocklist.xml
// data/simplewall/win7/update/blocklist.xml
// data/simplewall/win81/extra/blocklist.xml
// data/simplewall/win81/spy/blocklist.xml
// data/simplewall/win81/update/blocklist.xml
// app.conf
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDnscryptWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4b\x72\xe4\x4a\x08\xdc\xfb\x28\x8e\x10\x0b\xdf\x08\x53\x48\x22\x24\xa0\x5e\x41\xb7\xba\xdf\xe9\x27\xf4\x71\x7f\xe4\x99\x65\x25\x64\x02\x09\xf5\x09\x5f\x5a\x0c\x8c\xf3\xe3\x13\x94\x23\xd8\x06\x6e\x30\xcb\x95\x81\x5c\x57\x30\xfa\x34\x0a\x39\x9e\xa1\xd8\x32\xa8\x31\x1b\xa8\x50\xf3\xf0\x3e\x8f\xd8\xd5\x41\x83\xc9\xca\xa1\xb7\x30\xe6\xc8\xed\x57\xde\xed\xdb\x6f\x8f\x0a\x68\xb1\x70\x8b\x53\x12\xd6\x1a\x10\xd3\xbd\xee\x49\x84\x56\xee\xd4\x2e\x31\x86\x17\x84\x49\x6c\xd8\xf1\x62\x40\x6e\xc9\x96\x50\x9b\x17\x20\x0d\xd0\xb0\x47\xd0\x8d\xcd\x93\xb7\x86\x68\x74\x21\x3e\x15\xfa\x1b\x08\x16\x98\xb4\x73\x66\x59\xb5\x17\x0b\x58\xc4\x8a\x2f\xb1\xb3\x36\x98\xdc\x7a\x19\xa0\x62\x44\xf5\x96\x1b\xa1\x70\x9d\xfd\x0e\x91\x98\x42\x80\x13\x2a\x4a\x32\x8d\xe6\xb3\x0f\xc2\x3b\xbd\x68\x01\xe5\xc4\xe0\x76\x15\xe2\xf3\xf0\x3d\x73\xf9\x46\x9a\x9e\x70\x37\xfa\xa8\xef\xb1\x60\x6c\x34\xfe\x8b\xf9\xda\xec\xf0\x5c\xa7\xe8\xd0\x45\xa7\x61\xdd\x3a\xe6\xde\xdd\xff\xbc\xef\x4b\x2c\xa4\x70\xab\xab\xe5\xb3\x5f\x0a\xd6\xba\xe1\xb3\x10\x5b\xac\x8e\x6b\x3d\x95\x5b\x47\xb2\xa7\xba\xc2\xe8\xa9\x28\xf3\xfe\x7a\x3d\x1c\xef\x7b\x21\x3e\xdc\x7c\x17\x71\xfb\xc1\xa3\xbf\x81\xc6\x47\x6d\x42\x3c\x4b\xe4\xcb\x01\xfc\x77\xe1\x76\x7f\xae\xb8\x9d\x45\x7e\xdc\x38\x56\x1f\xe9\x8d\x3b\x51\x1c\x38\x20\xba\x53\xee\x1a\xe4\x32\x70\x5f\xa0\xc4\xed\xf7\x58\x29\xca\x6f\x0e\xe6\xf4\x05\x75\xce\x87\xfc\x45\x5e\x5a\x5b\x0a\x9d\x05\x96\x58\x8f\x12\xb6\x23\x3e\x45\x96\x65\xfb\x51\xe4\x66\x4c\x99\x1c\x1b\xfe\x27\x00\x00\xff\xff\x0d\xb5\x77\xb4\x87\x03\x00\x00")

func dataDnscryptWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10ExtraTxt,
		"data/dnscrypt/win10/extra.txt",
	)
}

func dataDnscryptWin10ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/extra.txt", size: 903, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x98\xeb\x92\xbb\x2a\x0c\xc0\xbf\xff\x1f\x65\x67\x64\xb8\x58\xdb\x3e\x0e\x02\x55\x66\x15\x38\x40\x75\xfb\xf6\x67\xa8\x6d\xbd\xb1\x71\x77\x66\x67\x6c\x7e\x84\x84\x24\xa0\xe1\x0b\xf1\xa2\x0f\x4a\x36\x0a\x19\x15\xff\x7d\x21\x2e\xcd\x4f\x40\xc2\xf6\xcf\xe7\xf0\x85\xfa\xc0\x65\xf8\xc0\xa7\xc0\xbc\x79\xff\xfc\xa9\x84\x79\xf3\x28\xfb\xf8\x82\x52\xac\x27\x6e\xba\x5a\x9a\x40\x51\xaf\x85\xb7\xc1\xde\xde\xe3\x3a\x2b\x78\xd4\xd6\xa0\x4e\x0f\xef\xb1\x2b\x45\xcf\xe5\xc2\xa6\x4f\xde\xcc\x3f\x83\xf2\x83\x16\x2a\xa0\x60\x85\xe6\xdd\x6e\xf6\xa8\x3a\xd5\xab\xe8\x1f\x7b\xe2\xf9\xed\xa6\x45\xcf\x0d\x6f\x94\x7f\xd9\x1a\xb4\x8f\x77\xde\x29\xee\x63\xfb\x16\x59\x1f\xd5\xcf\x17\x92\x3c\x72\x94\xa6\x7a\xbb\x2a\x6c\x8f\x4c\xe0\x51\x64\x07\x6e\xac\x4d\x30\xc7\x56\xf1\xe7\x82\x7d\x16\xc7\x45\xd4\x83\x8e\x0f\x34\x6a\x23\xed\x38\x25\x85\x4b\xa3\x7e\xee\x53\x3e\xe6\x54\x2d\x63\xc2\x65\x20\x8b\xa4\xbd\x7e\xbe\xd8\x37\x2f\x84\x34\x85\x09\x88\xcb\xa8\x44\x8b\xa4\xfa\xc7\xbd\xe7\x8f\xaf\xc2\x79\x2b\x91\xb4\x48\x06\x87\x7a\xb7\x71\xb2\xd6\xa6\x79\x1a\x59\x4b\x3b\xc6\x30\x29\x38\x22\xd2\x0f\x4b\x89\xd8\x49\x9a\x85\xc4\x10\x86\xcb\x42\x6d\x24\xd5\x6a\x9e\x49\xb2\x1f\xb3\x9a\x87\xd6\x85\xb0\x1e\x63\x82\xb8\xd3\xc8\xa5\x87\x0c\x65\x20\x2d\xf3\x74\x34\x81\xa0\xd1\x84\x55\xf0\x6b\xc3\x1c\x64\x91\x05\xd1\x62\x8a\x31\xa5\x8c\x5e\xf6\xda\x61\xaa\x56\xd3\x14\xe1\xf1\x12\x3d\x76\x01\x7c\xec\x02\x38\x49\x16\xa1\x10\x9f\x7c\x0a\x2e\x5a\xf5\x2c\xaa\x9e\xfb\xb8\xb2\x26\x64\x28\x4f\x57\xd4\x89\x07\xea\x3a\x33\x3e\x6b\x41\xc8\x70\xad\x4e\xa8\x4b\x15\xfc\x91\xb5\xe4\xf7\x25\x7d\x20\xcd\xc2\xad\xab\x2f\x89\xda\x49\x9a\x8d\x84\xee\xb4\xe8\x4a\xcb\xf6\x8e\x47\xf5\x23\x5a\x6e\x1a\x85\x44\x67\xef\x92\x3b\x37\xf9\x6b\xbd\x43\x21\x6e\x4b\x51\x38\x82\x09\x5c\xc3\x22\x65\xd4\x09\x34\x60\x21\xa7\x03\x4b\xd6\x6c\x34\x81\x62\x92\xfe\x76\xf9\x92\xf5\x29\x27\x0b\xa2\x25\x98\x10\x8c\x09\xa5\x20\xbf\x30\x58\xff\x4a\xce\x30\xcf\xd4\xd0\x82\x27\x0f\x60\x4e\x4b\x98\x97\xa0\xff\x04\x97\xb0\x3e\xa5\xb0\x7d\xca\x60\xce\x18\x3c\x7f\x49\xae\x30\x67\x18\xe4\xa7\x7c\x4e\x67\x0e\xe7\x87\x9c\x4a\x58\xbf\x2a\x61\xfb\x67\x06\xfb\x7f\x21\x0c\xe6\x07\xfe\x5d\x09\x1c\xbf\x2b\x6c\x9f\x62\x02\xce\x4f\x31\x3d\xe0\x0c\xac\x1f\x8a\x19\xb4\xbe\x54\x60\x50\x7d\x27\x0e\xf9\x9f\xfe\xa1\xf5\x27\x07\x8e\x78\x05\x73\x70\xfd\x69\x7b\xc1\x9c\x81\xf1\x25\x98\x51\x38\x3e\xec\xc0\x7e\xee\x1d\xb3\xe2\x25\x3c\x7f\x89\x0f\x38\x83\xe7\x3f\x51\xe8\xfc\x22\xf8\x74\x90\xff\x8a\xc2\xf1\xaf\xc0\xf3\x81\xe0\x33\x78\xbe\x11\x7c\x06\xf7\x27\xc1\x17\x72\xc4\x61\xff\x2e\xe0\xf9\x97\x38\xb4\x3f\x12\x87\xe3\x7b\x05\xea\x83\xe1\x0b\xb9\x00\xf5\xcf\x92\x77\xc0\xf9\x97\x38\x03\xf6\x5f\xe2\x25\xb0\x3f\x12\x3f\x03\xfb\xf3\xc9\xc9\xef\xeb\x67\xf8\x4a\x2a\xe0\xfd\x97\xf8\x19\xd8\x3f\x89\x5f\x41\xff\xaf\x14\x3a\x5f\x12\xa7\x90\xff\xe9\xed\x0a\xf9\x47\x30\x86\xde\x2f\xec\xf9\xfe\x82\xf9\x09\x38\xff\x13\xaf\x0e\xf4\xcf\x18\x88\x0f\xc1\x94\x40\xf1\x27\x98\x56\xf9\xf5\xa7\x2f\x5f\x99\x01\xd5\x53\x91\xe2\x2b\x66\x59\xc3\x0b\x9e\x75\x7c\xe6\x65\xd6\xb1\x99\x9f\xb2\x1b\x73\xc9\x73\x81\x9b\x79\x95\xfd\x70\x98\xf9\xe5\xc0\xbf\x2b\x6c\x3f\x7d\xda\x81\x9c\xc0\xf1\x21\x2c\x1b\xf8\x99\x1f\xc4\x87\x54\xb9\x83\x5b\xf3\xc6\xd8\x10\xb5\x08\x28\xdc\x9d\xb3\x3e\x6e\x3e\x7f\xa5\x0e\xe2\xf0\x1b\xf9\xd6\xa9\x9f\x4f\x77\xd1\xcc\x4f\xca\xc2\x7a\x8d\xb2\x83\xf2\xf0\x98\x76\xee\x43\x5b\xfa\x79\xd4\x45\xfd\x80\xba\x2a\x5d\x80\x1d\x8a\x2e\x82\xa1\x7f\xc2\xb9\x16\xe6\x7b\x38\x8c\x48\x57\x13\x34\x8e\x23\xea\x03\xe2\xdf\x5c\x9a\xa9\xab\xee\x02\x1d\x55\x8d\xbc\x92\xbd\x35\x12\x3d\x9b\x92\xb5\x5e\x6f\x6b\xdd\x29\xe4\xb4\x53\x88\x7b\xbd\xed\xfa\x17\x3d\x7f\x1f\x4c\x54\x21\xee\x9a\xc3\xa9\xd1\xb7\xb7\x9b\x16\x8a\x3b\x17\x3e\xb7\x0e\x13\xf1\xf7\x4e\xe5\xb1\x35\x2a\xa8\x18\xb5\x69\x42\x51\x1b\x0a\x5c\x5a\x2c\x47\x8a\xc7\x5f\x47\xa6\xc6\xe8\x6f\x23\xdb\x6f\x68\x4e\xe7\x15\xba\x59\x1b\x9d\xd7\x26\x3a\xaf\xa4\x16\x53\x70\x9c\x57\x83\x56\xe3\xa7\x46\x3c\x97\xf3\xea\x96\xd7\x41\x49\xc7\x27\x0b\xfc\x73\x0f\xb4\x0e\x73\x10\xad\xea\xf9\x52\xba\x48\x62\x50\xe2\x9e\x5c\xe8\x78\x68\x23\xef\xbe\xb5\x69\x26\xa5\xb7\xfb\x81\x1b\x59\xdb\xec\xad\xcd\x67\xcc\xa8\x0d\xc4\xb3\xcc\x6c\x1b\xe7\x97\x44\xed\x24\x8b\xc6\x39\xb8\x87\x51\x71\x7b\x7f\x36\x49\x79\xb7\xdd\xed\x93\x5c\xdd\xbd\x75\xea\x97\xd5\x87\x71\x0e\x6a\x88\xd6\x2b\xc1\x23\xef\x6c\xe3\xd5\xf0\xbe\x92\x7b\x8a\xff\xbb\xf3\x4e\xc7\xed\x05\x5a\xb8\xfb\x41\x3d\xd0\xc8\x63\xb0\x66\xc3\xe6\x4b\x37\xee\x9c\xfa\x41\x75\x8a\x6c\xb2\xf9\xdb\x6d\xdc\x2c\xbf\xfb\x6d\x0a\x63\xb8\xa9\xf7\x65\x5d\x68\xb9\x4b\x73\x65\x77\xea\xa0\x7c\x48\x4e\xb7\x8f\xda\x6b\xf9\xdc\xed\xad\xf2\xd3\xfa\xa6\xeb\xb7\xe2\x0b\xa8\xc6\xd7\x10\x20\xe7\xaf\x11\xbf\x64\x7c\x75\xc3\x77\x60\x25\xa7\xff\x8a\xe4\x27\x25\xd9\xc8\x8e\xda\x10\x8c\xb4\x1b\xaa\x35\xf8\x3f\x00\x00\xff\xff\x9b\xf7\x0f\x32\xc7\x15\x00\x00")

func dataDnscryptWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10SpyTxt,
		"data/dnscrypt/win10/spy.txt",
	)
}

func dataDnscryptWin10SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/spy.txt", size: 5575, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x41\x0a\x03\x21\x0c\x05\xd0\xfd\x1c\x65\x16\xb9\x53\x30\x76\x10\xd4\x1f\x4c\x5a\xf1\xf6\xa5\x54\x4a\x47\x97\x79\xf9\xe4\xe7\x24\x89\x39\xbd\x62\x1b\x24\xa6\x54\x94\x4a\x0a\x0d\x86\x87\x53\x40\xa1\x6a\xec\x81\x6a\xf4\xe3\x2f\xb9\xa6\x8e\x93\x9e\x2a\xec\x71\xe3\x9e\xaa\xa0\xdb\xdc\x4e\xb3\x25\x26\xc9\x34\xf3\x08\xec\x9c\x71\xed\xd7\x05\xbd\x66\xb0\x2c\xfc\x9b\xee\x25\x9f\x5f\xf7\xda\xaf\x4c\x40\xbb\xde\x01\x00\x00\xff\xff\x39\xfa\x05\xb4\xf8\x00\x00\x00")

func dataDnscryptWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10UpdateTxt,
		"data/dnscrypt/win10/update.txt",
	)
}

func dataDnscryptWin10UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/update.txt", size: 248, mode: os.FileMode(438), modTime: time.Unix(1498767414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x41\x0a\x02\x31\x0c\x45\xf7\x1e\xc5\x45\x16\xde\xa8\xa6\x99\xf2\xa1\x49\x86\x49\x6c\xaf\x2f\x14\x41\x1c\x14\xdc\xfd\xbc\x47\xe0\x5d\x49\x63\x4b\xe3\x00\xb1\xeb\xa5\x70\x62\x94\x84\x1b\x45\x0f\x52\xf0\xe1\xe1\x5b\x2e\xc9\x7e\xfb\x46\x8f\x7e\x22\x55\x2b\xa9\x64\x09\x39\x06\x58\xce\x0f\x8d\xee\xb0\xf6\x9a\x1d\x43\xd6\xec\xde\x60\xef\xf3\xa3\x2a\xa1\x42\x13\x56\x7d\xc6\x02\xa3\x74\xd4\x5f\x99\x33\xd8\x2d\xa9\xec\xfb\xdf\x86\xa4\x36\x89\x07\x52\xc8\x24\x9f\x01\x00\x00\xff\xff\x6f\x6c\x78\x57\x14\x01\x00\x00")

func dataDnscryptWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7ExtraTxt,
		"data/dnscrypt/win7/extra.txt",
	)
}

func dataDnscryptWin7ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/extra.txt", size: 276, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xe1\x6a\x84\x30\x0c\x07\xf0\xef\xf7\x28\xc2\xc2\x59\x7b\x8e\x7b\x9c\xac\x8d\x52\x56\x13\x49\xb3\x73\xbe\xfd\xd8\x8d\x81\xd3\x0e\xfc\xfa\xeb\xff\x9f\xd2\xa6\x01\xa3\x4c\x13\x99\xae\x30\xa5\xa0\x52\x64\x30\x08\x32\x5d\x1a\x30\xc5\x61\x48\x61\x42\xc6\x91\x14\x98\xec\xd2\xc0\x43\xd4\xe8\x13\x22\x1a\xee\x0a\x21\x96\xb6\xf5\x1d\x64\x61\xc8\x99\x97\x67\xe1\x1b\x5d\x7f\x3f\xa0\xbb\x7a\xe7\x21\x87\x75\xaf\xdd\xad\xa6\x7d\x7b\xd0\xae\xbb\x1f\xcd\x1f\x67\xfa\xeb\x2b\x0c\x8a\x1b\x5b\x1d\x14\x32\x4b\x3c\x96\xca\x3b\x00\xdf\x31\x72\x79\x46\xe3\xdb\xed\x6c\x74\x24\x39\x1b\xfd\x8d\xbd\x2c\x89\x6b\x1f\x59\xe6\x95\xc9\x5c\x55\xe9\x43\x65\xa6\xcd\xd1\x66\xae\x91\x52\x14\x48\xf3\xa3\xdf\x75\x7f\x96\xf6\xdf\x7d\x0b\x5a\x11\xfe\x8b\x5f\x01\x00\x00\xff\xff\xb0\x35\x63\x6b\x18\x02\x00\x00")

func dataDnscryptWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7SpyTxt,
		"data/dnscrypt/win7/spy.txt",
	)
}

func dataDnscryptWin7SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/spy.txt", size: 536, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\x2b\x2d\x48\x49\x2c\x49\xd5\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\xd1\x4b\xce\xcf\xe5\xd2\xd2\x2b\xcf\xcc\x4b\xc9\x2f\x2f\x86\xca\x82\xc4\x52\xf2\xcb\xf3\x72\xf2\x13\x53\xd0\x94\xc2\x79\xa8\x3a\xf2\x52\x4b\xb8\x30\xcd\x80\x88\x40\x05\xf2\x8b\xd2\x01\x01\x00\x00\xff\xff\xce\x69\x60\x84\x7f\x00\x00\x00")

func dataDnscryptWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7UpdateTxt,
		"data/dnscrypt/win7/update.txt",
	)
}

func dataDnscryptWin7UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/update.txt", size: 127, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x51\x6e\x02\x31\x0c\x44\xff\x7b\x14\xa4\xb5\x54\x6e\x14\x92\xd9\x60\x29\x4e\xb6\xb6\xd9\xc0\xed\x2b\x28\x94\x12\xa0\x7f\x89\xdf\xd3\x78\xe4\x0d\x85\x65\xc1\x71\xd2\x99\xc4\x2a\xc5\x26\x1f\x1b\x12\x9b\xbd\x46\xe3\xeb\xd7\xa0\x2b\x47\xd8\x8f\x4a\x3b\xae\xf9\x46\x24\xa8\x5b\x54\xa0\x92\x70\xd4\x66\x6d\xf6\x2b\x73\x14\x08\x5c\x4f\xcf\x84\x0b\x9e\xb3\x3a\x82\xef\xa1\x83\x1d\xa2\xf3\x1a\x9c\x5b\x9d\xd6\x2d\x59\xb1\x91\x8f\xed\x93\x24\x12\x78\xf8\x2d\xfd\xe8\xe7\xfb\xca\x4c\x85\x57\x5c\x9e\x2c\x99\xcc\x77\x64\xd3\x2d\xa6\xb4\xcc\xf5\x2e\x3c\x5c\xa4\xe2\xe8\xd3\xdf\xa3\x8c\x4b\xbe\x0e\xd0\x13\x2d\xda\x12\x45\x31\x52\x1f\xb8\x79\x53\x20\x65\xcc\x89\x92\x1d\x49\x96\x41\x70\x16\x50\xe7\x9a\x5a\xb7\xcb\x60\x0d\x85\xd3\x3f\x67\xe8\x29\x8e\x19\xdd\x62\xab\xfe\xaa\xde\x5b\x42\xe7\x4e\x76\x60\x07\x55\xf8\xd5\xfb\x7c\x1f\xb1\x7d\x89\x7a\xbf\x55\x37\x04\x8d\xfb\xf3\xf4\x3b\x00\x00\xff\xff\x15\xb4\x85\x0c\x67\x02\x00\x00")

func dataDnscryptWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81ExtraTxt,
		"data/dnscrypt/win81/extra.txt",
	)
}

func dataDnscryptWin81ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/extra.txt", size: 615, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\x4d\x6e\x03\x21\x0c\x05\xe0\x7d\x8f\x12\x29\x56\x86\xd0\x28\x39\x8e\x05\x9e\x11\x2a\x18\x84\x9d\xd0\xb9\x7d\xd5\x3f\xa9\x14\xb2\xfd\xfc\x84\xf1\x3b\x00\x1e\x93\x90\xdf\x08\x98\xf4\xe5\x00\x4a\x91\x12\x69\xdd\x21\x05\x57\xb3\xe4\x55\xc1\xe5\xf4\x39\xa9\xb8\xae\xc1\x25\x64\xdc\xa8\xfe\xc4\xef\xc5\xa3\xd2\x90\x7d\xe4\xaa\xf4\x0e\x1e\x15\x87\x59\x93\x7f\xd4\xfd\xc0\x79\x59\x8c\xb5\x10\x33\x43\x8c\xdc\x7e\xd1\x9c\xec\xc9\x42\x74\x7b\xaf\x8b\x31\xb7\x31\xbb\x98\xd7\xcb\x4c\xaf\xcb\xa0\xe7\xf3\xad\x7f\x55\x48\x35\xf0\x26\xc7\x16\x78\x76\x80\x94\x9d\x49\xcd\x54\x31\xea\xd4\xe9\x5e\x73\xf9\xdb\x12\xbe\xa1\x67\xf9\xda\xf7\x5d\xd5\xb3\x6d\x2d\xf0\x15\x42\x79\x5c\x7a\xff\x08\x00\x00\xff\xff\x9a\x95\xed\x04\xb7\x01\x00\x00")

func dataDnscryptWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81SpyTxt,
		"data/dnscrypt/win81/spy.txt",
	)
}

func dataDnscryptWin81SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/spy.txt", size: 439, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\x2b\x2d\x48\x49\x2c\x49\xd5\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\xd1\x4b\xce\xcf\xe5\xd2\xd2\x2b\xcf\xcc\x4b\xc9\x2f\x2f\x86\xca\x42\xc5\x8a\xd1\x94\xa5\xa5\x1a\xe9\x95\x17\xa2\x09\xc2\x79\xa8\x46\xe4\xa5\x96\x70\x61\x1a\x0a\x11\x81\x0a\xe4\x17\xa5\x03\x02\x00\x00\xff\xff\x1b\x44\xac\xc4\x90\x00\x00\x00")

func dataDnscryptWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81UpdateTxt,
		"data/dnscrypt/win81/update.txt",
	)
}

func dataDnscryptWin81UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/update.txt", size: 144, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xd1\xbd\x6e\xdb\x40\x10\x04\xe0\xfe\x9e\x82\x80\x9a\xa4\xe0\x70\x67\x77\xef\x87\x2a\xd3\xa7\x4a\x91\x5a\x51\xe4\x98\x88\x2c\x1a\xb4\x02\xd9\x79\xfa\xe0\x2c\xf3\x27\xdd\x7c\xd8\x1b\x90\x8b\xdd\xed\x76\xcd\xc3\x30\x9d\x6e\x87\xf3\xb9\xb9\x0d\x17\x4a\x73\x7a\xbd\x4e\x87\xe6\x93\xf6\x9d\xa4\x4e\x85\xb9\x51\xdd\xb3\x7c\x0e\xf5\xed\xd7\x71\x3a\x35\xc3\xe5\x61\xdc\x37\x8f\xd7\xeb\xf3\xcb\xbe\xeb\x7e\x0d\xd7\xc7\x3f\x3f\x70\x1c\x9f\xba\xe3\x74\xf8\xfb\xd6\x3e\x1d\x5e\xbb\xef\xc3\xe5\xe7\x78\x7b\xf9\xf6\xfc\xf6\xe5\x3c\x1e\x7f\x9f\xa6\x10\x68\x28\x02\x2a\xa2\xd7\x4c\xc9\x30\x50\xcb\x0c\x25\x54\x24\xa8\xa1\xcf\x60\x2e\x60\xb6\xe0\x82\x9c\xa1\xea\x28\x4b\x8e\x50\x5f\x95\x20\xed\x9a\x35\xc6\x3a\x21\x0b\x28\x86\xfc\x0e\xcd\xa0\x2b\x72\x0a\xc9\xe1\x88\x0e\x69\xe7\x54\x0b\x29\x22\x2a\x28\xb5\xb7\x41\x6f\x0b\x4a\x6d\x2c\x79\xee\xc4\xbb\xec\x03\x1a\x15\x6e\x81\xe2\x70\x47\x29\xa8\xbb\x2d\xa0\xdc\x47\x4a\xbf\xff\x2c\x3f\x18\x41\x4f\xef\xab\xd3\x08\x8d\x06\x73\xa8\xad\x4c\x84\xb4\x1b\xd4\xcf\xd3\x1c\xcc\x02\x96\x88\x2c\x81\xa9\x20\x19\x58\x90\xfb\xa0\xe2\xc8\x3d\xd8\x67\x48\xbb\x41\xed\xa9\x64\x78\x42\x85\xce\xa0\x10\xda\x2f\x8a\x06\xae\x2f\xd9\x3b\xe8\x5b\xe9\x7f\x33\xb3\xad\x5c\x66\x69\xbd\xe3\xbd\x97\x0a\x98\xea\x69\xfc\x5f\x00\x00\x00\xff\xff\x17\x2f\xc0\x4b\x6e\x02\x00\x00")

func dataFirewallWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10ExtraTxt,
		"data/firewall/win10/extra.txt",
	)
}

func dataFirewallWin10ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/extra.txt", size: 622, mode: os.FileMode(438), modTime: time.Unix(1498767493, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x96\xbd\x6e\x64\x37\x0c\x85\xfb\xfb\x14\x03\x6c\x93\x14\x3e\xc3\x43\xfd\x6f\x99\x3e\x55\x8a\xd4\x8e\xe3\xcd\x1a\xf1\xda\x86\xed\xc0\x71\x9e\x3e\x38\xba\x3f\xd2\x2d\x66\xc0\x0f\x24\x25\x8a\x22\xa9\xfb\xe5\xcb\x97\xcb\xb7\x87\xd7\xfb\x8f\xdb\xc7\xc7\xcb\xc7\xc3\x13\xed\xf2\xf6\xf2\x79\xf9\xc9\xdb\xd5\xf2\xd5\x8d\xe5\xe2\xfe\x95\xf5\xe7\x45\x96\xbf\x3e\xbf\xde\x5f\x1e\x9e\xbe\x3d\x7f\xbd\x7c\x7f\x7f\x7f\x79\xfb\x7a\xbd\xfe\xf5\xf0\xfe\xfd\x9f\x3f\x70\xf7\xfc\xe3\x7a\xf7\x7a\xfb\xdf\xe7\xcd\x8f\xdb\x7f\xaf\xbf\x3f\x3c\xfd\xf9\xfc\xf1\xf6\xdb\xcb\xe7\x2f\x8f\xcf\x77\x7f\xdf\xbf\x2e\x0b\x03\x4a\x86\xb3\x82\x2c\x07\x35\xb0\x71\x22\xa7\x75\x6a\xf0\xd0\x90\x9b\xa0\x12\x09\x29\xec\x62\x83\x47\x17\xd0\x0a\x12\x6a\x5d\x3c\xa0\x15\x64\x82\xa1\x6c\xe0\xd6\xd0\x56\x68\xa0\x81\x3c\xe4\x86\x18\x27\xc8\x07\x30\xeb\xb7\x93\x13\x6e\x7d\x05\x9a\x23\xc2\x53\xd8\xc1\x89\xb8\xcb\x4c\x09\x8c\xb6\x62\x00\xab\x83\x9e\x97\x68\xc8\x0d\xd1\xc0\x54\x04\x25\x83\x60\xc9\xbb\xec\x88\x43\x64\xf6\x0e\x05\xee\x0d\x76\x33\x64\x4f\x49\x9a\xaa\x85\x1b\x62\x13\xb0\x1f\x1d\xa5\x1e\x10\xc1\x74\xa8\xdc\x11\xcb\x0a\x11\x8c\x0d\xee\xb6\xa3\x47\x82\x91\x2b\x26\x50\x99\xe8\x72\x01\xa3\xd4\x76\x60\x22\x7c\x5d\xd3\xd9\x95\xac\xbe\xa4\xee\x8e\xe0\x48\x5c\x92\x02\xef\x4e\x08\x61\xa6\xd4\x06\x29\x89\x69\x45\x9d\xc8\xa1\x55\x06\x31\x96\x81\x01\x0c\xab\x6d\xa9\xd2\xf4\x78\x76\x54\x3c\xf4\x03\xf5\xcb\x07\xb5\xd0\x6f\x6e\x43\xad\xe4\x6b\x44\x55\xa9\x71\x30\xe4\x81\x09\x6e\x1b\x16\x64\x53\x19\x2d\x39\x22\x22\x83\x66\xab\xe8\x01\x76\xb3\x4b\xba\x84\x9c\x10\x5a\xcf\x8c\x07\x13\x25\x87\x67\x78\xdd\x64\x9a\xc9\xe3\x90\x37\x9f\x7e\x36\xaa\xc6\x36\x17\x95\xb8\xf6\x4b\x50\x1c\xaa\xf2\xba\x81\x96\xb7\x4d\x8e\x51\x09\x1e\x72\x1c\x32\xad\xce\xd0\x36\x50\x85\xf8\xee\xde\x8b\x82\x33\xf8\x0c\x61\x87\x60\x48\x87\x4f\xc9\x68\x3b\xf8\x7a\xfe\x43\xde\x4f\x93\xe0\xc9\x87\x46\x07\x92\x46\x7d\xd3\xfa\x8d\x31\x70\x29\x05\xba\xce\xd6\xcb\x9d\x16\xd1\x8b\xa0\xa0\x84\x95\x14\x41\x41\xce\x83\xd4\xf6\x07\x45\xd3\x96\x3b\xba\xd7\xde\xfa\x83\xdc\xfc\xc0\x50\x40\xcd\x08\xa1\x0e\x07\xb6\xb4\x93\xab\xfc\xb9\xd9\xaa\xfb\x9c\xdc\x21\x54\x5d\xc9\x06\x49\x35\xbe\xba\x39\x0d\x11\xa5\x0c\x30\xd4\x41\x4e\x87\xc7\xb0\x71\x44\x48\xf0\x18\x17\x92\x70\x8d\x0b\x35\xfc\x4c\xd4\x4a\x03\x35\x41\x4e\x38\x5c\x73\x84\xdd\x4c\xa0\xb4\x32\x50\x2e\x6a\x6f\xbb\x99\x60\xd6\xa9\xf7\x34\x4c\x23\x58\x0c\xc1\xd6\xec\x4c\xa8\xc4\x6e\xa8\x5a\x4c\x03\x69\xb9\xaf\x3b\x68\x5d\x78\x67\xb5\xdf\x09\x63\x3d\x61\xcb\x13\xd6\xb3\x71\x3d\x1b\x57\x14\x3f\x1b\xcf\xd6\xe4\x1c\x87\x72\x30\xc7\xc1\x84\x34\xed\xe4\x76\xda\xc9\xed\xb4\x93\xdb\x69\x27\xb7\x53\x94\xa5\xea\x49\x18\xd8\xfa\xdd\xee\x58\x75\x86\xb1\x96\x87\xa4\x09\xa3\x52\xd5\xc3\x50\xb9\xee\x5b\xb6\x19\xb0\x2a\x53\x51\x1f\xf4\x96\x18\x72\x0f\x7f\xa3\x3c\x69\xf2\xac\xd1\xcb\x73\xa8\x04\xb3\xce\xd7\x86\xd8\x28\xd8\x64\x19\x6c\xb6\x54\x1c\x87\x4e\x70\xd2\xe5\x59\x37\xed\x9e\xa1\xff\x5d\x2e\xaa\x28\xdb\xa9\xb1\x97\xff\x0a\x2a\x0a\xd6\x78\xc6\x74\xc6\x76\xa0\xde\x1e\x0e\x5f\x27\x26\xa5\xc7\x9e\xec\x8d\xf4\x2a\x69\xcf\x5c\xf5\x6a\x7b\xec\x8f\xd2\x46\x8c\x0a\x75\x90\xda\xe8\xa0\xe2\x28\x9b\xe5\x3a\xbf\x19\x56\x0a\x7d\xea\x66\x0e\xaa\xf0\x10\x16\x36\xf6\xc3\x6b\xec\x57\xdb\x50\x9f\x07\xb5\x3f\xd3\x07\x53\xe6\x6d\xe3\x86\x14\x91\x7c\x61\x53\xc6\xab\x32\xa7\x54\x4e\xa4\x5c\x6a\xa6\x65\x3d\x43\xb9\xb7\xb2\x6b\xb4\xea\xc3\xa1\xe8\x66\x67\xf2\x94\xfe\x0f\x00\x00\xff\xff\x91\x9b\x16\xb1\x66\x09\x00\x00")

func dataFirewallWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10SpyTxt,
		"data/firewall/win10/spy.txt",
	)
}

func dataFirewallWin10SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/spy.txt", size: 2406, mode: os.FileMode(438), modTime: time.Unix(1498767497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\xbd\x92\xe2\x30\x0c\x00\xe0\xde\x4f\xe1\x19\x9a\xbb\x02\xc5\x92\x2c\xff\x50\x5e\x7f\xd5\x15\x57\x67\x21\x2c\x99\x05\xc2\x84\x30\x2c\xfb\xf4\x3b\x26\x03\x58\xdb\xe9\x1b\x49\x8e\xac\x78\xb1\x58\xd8\x6d\x3f\x76\xd7\x76\xbf\xb7\xd7\xfe\x88\xce\x5e\x4e\x9b\x76\xea\xec\x2f\xc7\x8d\x0b\x0d\x39\x8c\xd6\xe1\x0a\xe3\x6f\x53\x8a\xff\x0e\x63\x67\xfb\xe3\x76\x58\xd9\xdd\x34\x9d\xce\xab\xa6\x79\xef\xa7\xdd\xe5\x0d\xd6\xc3\xa1\x59\x8f\xed\xd7\x6d\x79\x68\x3f\x9b\xff\xfd\x71\x33\x5c\xcf\xff\x4e\xb7\x3f\xfb\x61\xfd\xd1\x8d\xc6\x20\x03\xba\x08\x1e\xc4\x55\x31\x19\x2a\x31\x03\xa6\x0c\x48\x41\x51\xa2\x66\x32\x41\x40\x04\x90\x13\xb8\xe5\x2b\x26\x91\x47\x26\xf0\x2b\x13\x78\xce\x04\x40\xcc\x80\xde\xdf\x4f\x54\x4c\x8a\x29\x2b\xe6\x32\x28\x02\x09\x03\xf3\x3c\xb6\x07\x8c\x0e\x04\x01\x53\xd4\x4c\x8a\x59\x15\x93\x0f\x9a\x51\xb3\xea\x65\xa0\x5c\x8b\xab\x83\xca\xa5\x2b\x94\xbb\x3d\x88\x28\x10\x9c\x26\xbd\x18\x44\x7d\x65\x76\xd6\x16\xfc\x61\x36\x28\x71\x5e\x31\x03\x39\xff\x20\x79\x07\x29\xd7\x22\x72\x33\x03\xc4\x58\xfe\x88\x52\xae\xe5\x55\xa5\x47\x25\xd5\xe7\x9f\x7d\x39\x80\xf8\x1a\xa9\x02\x12\x1b\xcc\x08\xc4\x04\xa9\xac\x4c\x29\xd5\x2a\x0b\xaa\x44\x4f\x21\xe7\xb2\xda\x4a\xf7\xdd\xde\xed\x21\x12\x60\x62\xcd\xa0\x99\x14\xb3\x33\x54\x5e\x77\x79\x4a\xbe\xcc\x50\x29\xe0\x77\x00\x00\x00\xff\xff\x1a\x8d\x68\x95\x74\x03\x00\x00")

func dataFirewallWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10UpdateTxt,
		"data/firewall/win10/update.txt",
	)
}

func dataFirewallWin10UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/update.txt", size: 884, mode: os.FileMode(438), modTime: time.Unix(1496445483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xbd\x4e\xc3\x30\x14\x47\xf1\xdd\x4f\x61\x29\x0b\x0c\xfc\x7d\xaf\x73\xfd\xd1\x8c\xec\x4c\x0c\xcc\x26\xb8\xd4\x22\x8d\x2b\xd7\x28\x0d\x4f\x8f\x90\x18\xba\x9d\x23\xfd\x86\x61\xd0\xc7\xd2\xf2\x96\x96\x45\x6f\x65\x0d\x3a\xdf\x7a\x4b\xfa\x81\x83\x21\x6f\x2c\x71\xd0\x96\x26\x17\x1e\xd5\x1f\x7d\xa9\x2d\xeb\xb2\x1e\xeb\xa4\x4f\xbd\x5f\xae\x93\x31\x9f\xa5\x9f\xbe\xdf\x31\xd7\xb3\x99\x5b\xfa\xd9\x9f\xce\xe9\x66\xde\xca\xfa\x51\xb7\xeb\xeb\x65\x7f\x5e\xea\xfc\x95\x9b\x52\x3c\x22\x12\xd8\xc2\x89\x12\x02\x73\x04\xd3\x88\xa0\xbc\x40\xe0\x04\xd6\x8d\x77\x2d\xca\x3b\x38\x8b\x43\x84\x1d\xf9\x7f\x98\x22\xd8\x89\xb2\x14\x20\x1e\x7c\x10\xb0\xfc\x06\x00\x00\xff\xff\x15\x4c\xc2\xac\xc3\x00\x00\x00")

func dataFirewallWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7ExtraTxt,
		"data/firewall/win7/extra.txt",
	)
}

func dataFirewallWin7ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/extra.txt", size: 195, mode: os.FileMode(438), modTime: time.Unix(1497726486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xd1\xbd\xae\x13\x31\x10\x05\xe0\xde\x4f\xb1\x52\x1a\x28\x38\x3b\x67\xfc\x33\x9e\x94\xf4\x54\x14\xd4\x21\xe4\x72\x57\xe4\x66\xa3\x24\x28\x84\xa7\x47\x8e\x2e\xfb\x53\xb8\xf8\xec\xb1\x3d\x9a\xb3\xd9\x6c\xba\x97\xe1\x72\xb8\xef\x8e\xc7\xee\x3e\x9c\xac\xbb\x9e\x1f\xdd\x07\x5a\x2f\xa5\x57\xa1\x75\x2a\xdb\x6c\x1f\x43\x2b\xfc\x32\x5e\x0e\xdd\x70\x7a\x19\xb7\xdd\xeb\xed\x76\xbe\x6e\xfb\xfe\xe7\x70\x7b\xfd\xfd\x1d\xfb\xf1\xad\xdf\x5f\x76\x7f\x1f\x9f\xde\x76\x7f\xfa\x6f\xc3\xe9\xc7\x78\xbf\x7e\x3d\x3f\x3e\x1f\xc7\xfd\xaf\xc3\x25\x04\x46\x98\x43\xa3\xa3\x78\x43\x25\xb2\x43\x93\x86\x24\x30\x83\x6a\x81\x26\x5f\x2a\x4b\x13\x59\x41\x29\x60\x94\x90\x09\x26\x22\x2a\x32\x43\x56\xb0\x24\x68\x12\x64\x9f\x45\xa8\xe4\x27\xad\x82\xc9\x5a\xc1\xc4\x4c\x28\x75\x62\x5b\x65\x92\x47\x70\xa6\x6a\x84\xc6\xa7\xaa\xa1\x08\x28\x16\x4a\x46\xce\x48\x09\x94\xba\x84\xbf\x83\x8c\xa0\x2e\x11\xdf\xa1\x59\x61\x5c\xc0\x97\x27\x74\x09\xa5\x80\x74\xb0\x3d\x98\x6d\xcd\xba\x62\xf5\x15\x5d\x02\x25\x21\xb5\xdf\x0c\xa5\xcc\x72\x28\xff\x4b\xb5\x22\xc7\xa5\x54\x74\x62\x34\xb0\x05\x43\x42\x95\x50\x6f\x9d\x2f\xa4\xed\x6a\x4c\xa0\x09\xa2\xb4\xdd\x89\x6d\xa6\xa9\xac\x69\x6b\xd6\x99\x11\xda\xf2\x37\x90\x06\x8d\xb9\x05\x40\xe7\xb3\x03\x95\x0a\x6a\xf9\x17\x00\x00\xff\xff\x45\xf8\x66\x4a\x93\x02\x00\x00")

func dataFirewallWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7SpyTxt,
		"data/firewall/win7/spy.txt",
	)
}

func dataFirewallWin7SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/spy.txt", size: 659, mode: os.FileMode(438), modTime: time.Unix(1497726494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\xbf\x6e\xc2\x40\x0c\x06\xf0\xfd\x9e\xe2\x24\x96\x76\xc0\xb9\xcf\x3e\xdf\x1f\xc6\xee\x9d\x3a\x74\x4e\x21\x94\xa8\x40\x50\x08\xa2\xf4\xe9\xab\xa8\x55\xc8\xb1\xf9\x27\x5b\x9f\x25\x7b\xb1\x58\xd8\x6d\xdb\x37\xd7\x7a\xbf\xb7\xd7\xf6\x18\xed\xe5\xb4\xa9\x87\xc6\x3e\x39\xa9\x5c\xa8\xd8\x21\x5a\x87\x15\xe2\xb3\x19\x67\x5f\xbb\xbe\xb1\xed\x71\xdb\xad\xec\x6e\x18\x4e\xe7\x55\x55\x7d\xb6\xc3\xee\xf2\x41\xeb\xee\x50\xad\xfb\xfa\xe7\xb6\x3c\xd4\xdf\xd5\x7b\x7b\xdc\x74\xd7\xf3\xdb\xe9\xf6\xb2\xef\xd6\x5f\x4d\x6f\x0c\x84\xe0\x22\x79\x52\x67\x78\xac\x85\x90\x32\x81\xb5\x64\x28\xa8\xb1\x64\x32\x41\x49\x95\x20\x89\x00\x2e\xe4\xe7\xe2\x30\x57\x9a\x14\x84\x98\x51\x88\x0d\xc4\x13\xa2\x23\x05\x21\xbb\x3b\x85\x64\xa6\x44\x6e\x39\x03\xab\x4e\x3d\x40\x29\xdc\x73\x10\x94\xd8\xa7\x07\xe7\xd2\x8a\x07\x8b\x81\x46\xd2\x40\x39\x10\x58\x0c\x32\x88\x85\x29\x8d\xeb\xe6\x0a\xae\x10\x4f\x82\xe4\xbf\x9c\xc2\xfe\xdf\x9e\x22\x13\x92\x94\x0c\x25\x53\xc1\xec\x0c\x8f\x4f\x0b\xe3\x79\x49\xd3\x6f\x00\x00\x00\xff\xff\x49\x36\xe8\x29\x30\x02\x00\x00")

func dataFirewallWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7UpdateTxt,
		"data/firewall/win7/update.txt",
	)
}

func dataFirewallWin7UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/update.txt", size: 560, mode: os.FileMode(438), modTime: time.Unix(1496445494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xb1\x6e\xab\x40\x10\x85\xe1\x7e\x9f\x62\x25\x9a\x7b\x0b\x9f\x9d\x99\x9d\xd9\x05\xca\xf4\xa9\x52\xa4\x26\x04\xc7\x28\x18\xac\x35\x11\x76\x9e\x3e\x72\x65\xba\xff\x93\xce\xa9\xaa\xca\x1f\xc7\x32\x6c\xdd\x34\xf9\x6d\x9c\x6b\xf6\xc3\x6d\x2d\x9d\xff\xc7\x39\x50\x0a\x42\x9c\xbd\x50\x6b\xf9\xbf\x7b\x6c\x5f\x97\x32\xf8\x71\x3e\x2e\xad\x3f\xad\xeb\xe5\xda\x86\xf0\x35\xae\xa7\x9f\x0f\xf4\xcb\x39\xf4\xa5\xfb\xbd\x1f\xce\xdd\x2d\xbc\x8f\xf3\xe7\xb2\x5d\xdf\x2e\xf7\x97\x69\xe9\xbf\x87\xe2\x1c\x47\xd4\x04\x16\x98\x3a\x25\x30\xd7\x60\x8a\xc8\x4f\x24\x70\x24\x97\x14\x0a\x53\x88\x3c\xd3\xe2\xae\xd5\x25\x83\x09\x98\x6a\x48\xb3\x83\xed\xc1\x16\x1d\x47\x7e\x7c\x91\x18\x74\xd8\x41\xcc\x9c\x90\x22\x37\xe0\x26\x43\x88\x9c\x50\x86\x26\x70\xa3\x60\xfd\x0b\x00\x00\xff\xff\x95\x29\x18\x1a\x16\x01\x00\x00")

func dataFirewallWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81ExtraTxt,
		"data/firewall/win81/extra.txt",
	)
}

func dataFirewallWin81ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/extra.txt", size: 278, mode: os.FileMode(438), modTime: time.Unix(1497726508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd1\x31\x8f\x1a\x4d\x0c\x06\xe0\x7e\x7e\xc5\x4a\x34\xdf\x57\xe4\xdd\x79\x3d\xf6\x78\x86\x32\x7d\xaa\x14\xa9\x09\xe1\x72\x28\x1c\x8b\x80\x88\x90\x5f\x1f\xcd\x86\x63\x77\x95\x62\x24\x3f\x92\x3d\xb6\xec\xd5\x6a\xd5\xbd\xec\xcf\xbb\xdb\xe6\x70\xe8\x6e\xfb\x63\x61\x77\x39\xdd\xbb\xff\xe8\x7d\xcc\xbd\x44\x7a\x27\x71\x6d\xfe\x7f\x68\x99\x9f\x86\xf3\xae\xdb\x1f\x5f\x86\x75\xf7\x7a\xbd\x9e\x2e\xeb\xbe\xff\xbe\xbf\xbe\xfe\xfc\x8a\xed\xf0\xd6\x6f\xcf\x9b\xdf\xf7\x0f\x6f\x9b\x5f\xfd\x97\xfd\xf1\xdb\x70\xbb\x7c\x3e\xdd\x3f\x1e\x86\xed\x8f\xdd\x39\x04\x26\x78\x85\xa4\x8a\x5c\x1b\x0a\x61\xb0\xf4\x1e\x56\x88\x4a\x90\x84\x5a\xa0\x15\xd4\x31\xae\x63\x2c\x0c\x1a\xe1\x0e\x91\x0c\xd1\x3a\x97\xc5\x60\x04\x95\x48\x02\x63\x30\x01\xb3\x42\x34\xc2\xea\x24\x42\xa2\x8d\xf4\x02\xaa\xb7\x84\x27\x8d\x10\xca\x93\xed\xe5\xa7\x6a\x02\x27\x8a\x24\x48\x1a\x55\x1c\x39\x82\xd1\x43\x56\x28\xc4\x61\x31\x64\x83\x19\xc8\x56\x34\x87\xcc\x91\x1e\x10\x13\xe8\x1c\x75\x0e\xd6\x38\x93\x44\x09\x39\x83\x6c\xbb\x51\xd0\x7c\xc9\xb2\x60\xa9\x0b\xb6\x9f\x14\x92\xd2\xb8\x0d\x96\x32\x31\x83\xb1\x04\x46\x85\xb6\xc9\x1c\x39\x4f\xaa\x10\xbe\x4b\x92\x83\xed\x74\x0f\x4a\x19\xaf\x37\xa9\x4d\xc8\xa4\xa0\x47\xa4\xf8\x2f\xd3\x92\xba\x60\xeb\xd3\x1a\x30\x8f\x6d\x49\x7d\xd8\x21\xc9\xda\x3d\x68\x3e\x2e\x30\xa5\xbf\xc5\x8d\x19\xac\x0a\x97\x85\xd2\x42\x1a\x58\x39\x0e\x2f\xb1\x80\x92\x1f\xae\xb0\x08\x96\xb9\xdc\x27\x09\x18\xe3\x44\x85\xc9\x9f\x00\x00\x00\xff\xff\x81\x4b\x1c\xb3\x2a\x03\x00\x00")

func dataFirewallWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81SpyTxt,
		"data/firewall/win81/spy.txt",
	)
}

func dataFirewallWin81SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/spy.txt", size: 810, mode: os.FileMode(438), modTime: time.Unix(1497726511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\xbd\xae\xda\x40\x10\x05\xe0\x7e\x9f\xc2\x12\x4d\x52\x30\xde\x33\xb3\xb3\x3f\x94\xe9\x53\xa5\x48\xed\x80\x09\x56\x00\x23\x63\x44\xc8\xd3\x47\x2b\xee\xc5\xbb\x74\xfb\x69\xe6\x48\xe3\x23\xaf\x56\xab\x66\x3f\x4c\xfd\xbd\x3b\x1e\x9b\xfb\x70\x8e\x68\x6e\x97\x5d\x37\xf7\xcd\x17\x2b\xad\xf5\x2d\x5b\x84\xc6\x62\x83\xf0\xd5\xe4\xe5\xef\xe3\xd4\x37\xc3\x79\x3f\x6e\x9a\xc3\x3c\x5f\xae\x9b\xb6\xfd\x3d\xcc\x87\xdb\x2f\xda\x8e\xa7\x76\x3b\x75\xff\x1e\xeb\x53\xf7\xb7\xfd\x39\x9c\x77\xe3\xfd\xfa\xe3\xf2\xf8\x76\x1c\xb7\x7f\xfa\xc9\x18\x08\xc1\x06\x72\xa4\xd6\x70\x7e\x0b\x21\x26\x02\x6b\x4d\x5f\x51\x43\xcd\x68\xbc\x92\x2a\x41\x22\xd9\xf5\xf2\x66\xd5\xcf\x89\x97\x65\xe2\xa5\x98\xb0\x63\x62\x75\x06\x02\x62\x15\x82\x23\xa8\x18\x88\x23\x04\x4b\x0a\xb2\xeb\x02\x39\xf8\xa2\x10\xa7\x52\x62\x17\xc5\x32\x17\xab\x1c\xa0\xa4\xbe\xa2\xb7\x35\x79\xa1\xcf\x37\xc6\x37\xa7\xda\x8a\x37\x8b\x81\x86\xe7\xe7\x59\x8a\xa9\x54\x2e\xb3\x20\xb3\x7d\xd2\x53\x08\xb9\xb5\x4a\xa9\x94\xab\x36\x1d\x2a\x55\x39\xf7\xca\x25\x4f\xb9\xdc\x05\xb1\x00\x58\x4a\x69\x30\x48\x20\x16\xa6\x98\xfb\x2c\x95\x0b\x2a\xc4\x2f\x41\x12\x21\xd6\xe6\x22\xfb\xb4\xfb\xb0\xa3\xc0\x84\x28\x35\xa3\xe1\xfc\x13\x7a\x02\x5c\xbe\xb0\x90\xc7\xff\x00\x00\x00\xff\xff\xc4\x5b\xe8\x09\x0f\x03\x00\x00")

func dataFirewallWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81UpdateTxt,
		"data/firewall/win81/update.txt",
	)
}

func dataFirewallWin81UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/update.txt", size: 783, mode: os.FileMode(438), modTime: time.Unix(1496445473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3d\x73\xdc\x3a\x0c\xec\xfd\x2b\x34\xe3\xe6\xbd\x42\xb8\x0f\x3f\xdb\x6f\x5c\xa6\xcf\xa4\x48\x91\x9a\x47\x42\x12\xe6\x48\x80\x21\x20\xeb\xe4\x5f\x9f\xd1\xf9\x6c\x47\x39\x69\xe2\x51\xc7\x5d\x62\xc5\xc5\x02\xb7\xb7\xb7\x55\x27\x6a\x5a\x0d\xc4\xbb\x6d\x85\x27\x2b\xae\xfa\x67\xf7\xb8\xd9\x3e\x6c\xf6\xdb\xdd\x63\xb5\xdf\x3e\xdd\x3f\xfe\x7b\x33\x11\xbf\x4a\xc1\x8a\xb8\x91\xa7\xaa\x33\xcb\xfa\xb4\xd9\xb4\x64\x5d\x7f\x00\x2f\x69\xe3\x8b\x7b\x19\xeb\xe4\x4e\x9b\x1f\xc4\x41\x06\xfd\x9e\xc7\x2f\x51\xfc\x11\xcb\xcd\xcd\x16\xce\x5f\xe5\x58\x07\x2c\x0a\x89\x7c\x11\x95\xc6\xa6\xab\x1f\x68\xce\x0a\x7a\x1c\x33\xce\x8f\x8b\x82\x26\x57\x4c\x7d\x41\xe4\xb5\xcb\x2f\x77\x0f\xbb\xff\x77\x0f\xf0\x2c\x90\x14\x3d\x07\x60\xb4\xdf\xe0\xfb\xdd\xfe\xee\xee\xbf\x15\xf8\x10\xe5\x00\x03\x3a\xeb\xb0\xac\x08\x78\xc7\x61\xf4\xa5\xd7\x4e\x25\x38\x38\x12\xb7\x73\x3c\x30\x78\x61\x43\x36\xc8\x45\x02\xf8\xa4\x90\x94\xaf\x48\xc2\xc8\x62\x38\xd3\xf7\x9d\x90\xc7\x35\xe5\x05\x10\x58\x9d\xf9\x79\x8d\x48\x93\xf6\xc0\x0a\xc3\x6b\x0b\xe6\x55\xce\x70\xad\xd0\x3a\xc3\xc1\x8d\x90\x50\x15\xb9\xc5\x02\x91\x9e\x71\x81\xeb\x85\x1b\x6a\x21\x3b\xd5\x2c\xc5\x66\x62\x01\x73\x94\x11\xd4\x9c\x91\x07\x77\x74\xc9\x91\xa1\xef\x58\xa2\xb4\x84\x73\xe9\x80\xcf\xd3\x03\x5c\x6f\x1d\x9c\x0e\x72\xba\xd2\x0b\x29\x40\x42\x73\x8a\x65\x62\xae\x05\x24\xf0\xe4\x68\x63\xec\x95\x66\x40\x83\x18\x0e\xce\x1f\x3f\xee\xd5\x9d\x74\x69\x99\xa3\xe8\x8a\xef\x56\x24\xde\x59\x4b\x16\xb6\xd7\x4e\x51\x6a\x6b\xad\x93\x72\x3d\x35\xe5\xd5\x87\x17\x9c\x87\x8b\x58\x29\x60\xc9\x53\xae\xa3\xf4\xc1\xe5\x3c\xc3\x23\x79\x64\x9d\xf2\x94\xf2\xca\x6f\x4d\xa6\xf2\xb5\x7a\x82\x4e\x2c\x39\x8a\xf3\xd3\x25\x8b\xa4\x69\xc8\xe3\x25\x23\xcb\x22\xc2\x6f\xb8\x36\x27\x48\xfa\x0e\xe4\x42\x1e\x23\xa9\x2d\x4c\xe7\xcf\x1e\xcb\xf8\x11\xf8\xb2\x56\xfc\x53\xb9\xd3\x2d\xec\x53\xe0\x99\x3b\xfa\x6d\xe1\xec\xd2\xc2\x3f\xa6\x4b\xd1\x8c\xb8\xd5\x5a\x35\x2e\x07\xed\x92\xd7\xeb\x82\x26\x05\x6b\x4a\xae\x45\x05\xad\x57\x9e\x30\x91\x30\xb4\xd8\x04\x08\x7a\x5a\xef\x96\x51\xc4\xfa\x92\xe5\xbf\x6c\x15\xa3\x84\x8b\x59\xb3\xe3\x1e\x72\xb4\xab\x37\xf6\xb4\xd0\x84\xfe\x53\x2b\x72\x08\x7e\xed\x8f\x07\x9d\x56\x17\x9c\x37\xf0\x0a\x63\x18\xce\xb3\xe7\x85\x19\xbd\x19\xea\x32\xfe\x16\xbc\x5f\x01\x00\x00\xff\xff\xe7\xce\xc2\xc4\x5b\x06\x00\x00")

func dataHostsWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10ExtraTxt,
		"data/hosts/win10/extra.txt",
	)
}

func dataHostsWin10ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/extra.txt", size: 1627, mode: os.FileMode(438), modTime: time.Unix(1497726522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x9a\x4b\x73\xe3\x2e\x12\xc0\xef\xf3\x29\x52\x35\x97\xdd\x83\x09\x0f\xf9\x35\xc7\xbd\xef\x69\x0f\x7b\x46\xd0\xb6\xa8\x48\xc0\x00\xb6\xe2\xfd\xf4\x5b\xd8\xce\x38\x8a\x10\xee\xfc\xff\x49\xa5\x2a\xa5\xfe\x89\x7e\xd2\xe0\x4e\x7e\xfe\xfc\xf9\xd2\xb9\x98\xe2\xcb\x68\x2c\xa3\x2f\xd1\x5f\x5e\xfe\xc1\xb6\xaf\x74\xf3\xca\x29\xdb\xbe\x70\xfa\x6b\xbd\xfd\xe7\x8f\x8c\xfd\xdb\x05\x78\x31\xf6\xe0\x7e\xbd\x74\x29\xf9\xf8\xeb\xf5\xf5\x68\x52\x77\x6a\x89\x72\xc3\xab\x0a\xf2\x7f\x97\xd5\x20\xdf\x5f\xff\x6b\xac\x76\x63\xfc\x8f\xbf\xfc\xab\x77\xea\x0d\xc2\x8f\x1f\x94\x5c\xbf\x5f\xe4\x8a\x52\xca\x88\x5c\x0d\x11\xf4\x11\x88\x85\xf4\x55\xa6\xd5\xa2\x90\x57\x5e\x14\x15\x59\x53\x91\xad\x2b\xb2\x4d\x45\xb6\xad\xc8\x76\x15\xd9\x7e\x59\xc6\x68\x45\x56\x09\x1a\x5b\x8c\x4b\xe9\x21\x91\x3a\x32\x32\x44\x9b\xb3\x36\x7d\xcc\xc9\x10\xa5\x8e\x73\x9e\x17\xf8\x20\xf5\xfc\xa9\x12\x85\x67\xc9\x9c\x4d\xba\x90\xf1\x56\x16\x53\xa1\xb6\xf0\x7e\xfa\xa2\x51\xdb\xf7\xaf\x54\x9c\x2f\x7b\xf3\x62\x66\x6e\xd1\x39\xa3\x7d\x24\x32\xe9\x21\x4d\x9f\xbf\xc9\x95\xd2\x76\x65\x23\x91\x3a\x81\xea\x88\x86\x87\x30\x04\x79\x61\x94\xad\x7c\x70\x9a\x68\x47\x74\xf4\x64\xf0\x64\x30\x2a\xb8\xe8\x0e\x5f\x96\xba\xd1\xfc\x5b\xb4\xf8\x16\xdd\xe0\xe8\xb6\x9c\xe0\x76\x29\xc1\x6d\x31\x93\xad\xb1\xc7\x6b\xd8\xcb\x3a\x7a\x21\x28\x5b\x49\xc2\x74\x38\x97\x24\x6a\x51\x72\x2c\x48\x2c\x13\xb4\x59\xc1\x82\x64\x53\xd4\x73\x93\x2c\xbf\x53\xd4\xc3\xdb\x95\x72\xe1\xda\x81\xbc\x21\x3e\xff\x52\xa0\x84\xc7\x50\x1f\x6b\x09\x14\xd5\xd4\xa9\xd1\x46\x46\x46\x1b\x8b\x9b\xa4\xb5\x22\xaa\x8e\x72\x4a\x39\x17\x7c\xb7\xcc\x5d\x16\xb3\x72\x59\xcc\xca\x4d\x52\x8a\x63\x24\x11\xc2\xd9\xd8\xe3\x2a\x5e\xa6\x8a\x54\x61\x2f\xa9\x59\x09\xa9\x5a\x3f\x57\x92\x24\xe8\x61\x80\x14\x2e\x0b\x45\xa6\xa4\xea\x80\x68\x99\xe4\x20\x43\x2a\x7a\xac\xb4\x2d\x99\xa2\x23\xdf\x10\x39\xc4\x3d\x19\x22\x28\x3b\x55\xac\x63\xb3\xde\x93\x5e\x5d\x48\xdf\xdb\xf1\xab\x6c\xbf\x59\x93\xde\xd9\x82\xac\x63\xcf\xab\xe2\x0f\xc4\xab\xd0\x52\x32\xee\x92\x42\x32\xee\x92\x42\x51\x5f\x25\x7c\x71\x35\x5e\x5c\xcd\x0d\x5e\x26\x78\x57\x9d\xb4\x47\x20\xaa\x77\x27\x2d\xbd\x9f\xfa\x3b\x61\x18\x49\x41\x1e\x0e\x46\x0d\xd2\xca\x23\x84\x2f\x68\xf0\x24\xa6\xa5\x66\x91\xc5\xf0\x9e\xc8\x10\x4d\x92\xfa\x10\xc9\xb1\x6f\xb5\xcd\xbd\xa8\x8c\x7b\x74\xd3\x55\x79\xd3\x78\x45\xce\x34\x17\xc2\x67\x93\x74\x2b\xe4\xef\x53\xa1\x36\x74\x2b\x46\x1b\x39\x65\xf9\x6b\x71\x27\xe9\x76\x5d\x93\x45\xd5\x31\xca\x58\x3e\x79\x39\x8a\xdb\x09\xdc\x7a\x7b\xb6\xc5\x71\x95\x2e\xf0\x89\xcb\x16\xe2\x38\xde\xe0\xb8\x06\xe5\x2f\xa3\x0d\x6e\x3d\xce\x71\xf6\x71\x81\xe3\x84\xc0\xe9\x6d\xd8\x1e\xc7\x09\x8a\xe2\xd6\xf5\x5a\x7a\x70\xb8\x3a\x60\xeb\x06\xb7\xde\xa6\xc1\xd9\xb7\x15\x38\x7f\x77\x4c\xe0\x38\xa4\x1f\x7b\x86\xcb\xc7\x1e\x67\x1f\xa7\x0c\xa5\x97\x53\x8e\xe4\x04\xaa\x9e\x39\x15\x98\xb8\xe4\xc2\xc7\xec\xcb\xcc\x61\xfc\xcd\x3f\x98\xf8\x65\x03\xb1\xdc\x06\xc7\xa1\xe2\x97\xdb\x06\x8e\x13\xa8\xbc\x31\x2a\x38\x2e\xce\x02\x69\x5f\xed\xb6\x34\xe1\x1a\x9c\xde\x86\x22\x39\x81\xd3\xbb\xe6\x98\x7e\xcf\xe8\x1a\x59\x7f\x1b\x8e\xcb\xef\x06\xd5\x27\x19\xdd\xa2\xce\x05\x46\xb7\xa8\x3e\xc4\xe8\x8e\x61\x39\x9c\x1f\x3b\xd4\xf9\x91\x39\xcc\x3e\xcf\x1c\x2e\x6f\x7b\x44\x9d\x0a\xba\x63\x3b\xc4\xfe\x15\xd9\x0b\xc4\xf9\x91\x39\x81\xe8\x2f\x99\x6b\x10\xfb\x3c\x73\x5b\x44\x1f\xba\x72\xec\x79\xfc\x04\xdd\xb3\x0d\xe2\xfe\x92\xb9\x2d\xa2\x1f\x64\x6e\x8f\xf2\x77\xcf\x31\x7d\x37\x73\x1c\xe3\x6f\xbe\x35\x61\xfc\x60\x94\x62\xce\x7d\x71\xbd\x6f\xe0\xb8\x35\xe2\xfc\xcd\xdc\x06\xb9\xde\x96\x22\xe2\xcc\x28\x67\x98\xfc\x32\xca\x37\xd5\xf8\x6d\xae\x1c\xa7\x7b\x2a\xaa\x7a\x3f\x71\x55\x3f\x1e\x5c\x53\xb5\xef\xc1\xad\xab\xfd\xe5\x33\x57\x8b\xf3\x83\xdb\x54\xef\x89\x0f\x6e\x87\xf4\x63\x8f\xb3\x2f\x7f\x62\x40\x71\x02\x97\x0f\xb6\xa9\x9f\x5b\xa3\x8d\x4c\xa3\x16\x62\xb8\xc4\xb2\x6a\xc2\xe0\x4c\xce\x26\xa4\x93\xec\x41\x86\xd4\x4d\x3f\xb8\x1d\x9e\xce\x05\xb4\x89\x0a\xfd\x11\x51\x1b\x79\xb4\x2e\x26\xa3\x22\x89\x27\xef\x5d\x48\x0b\x24\x94\xa6\x1a\xa0\x2c\xa9\xda\x0b\x27\x72\x76\x21\xc1\xfb\x75\x50\xb1\xb0\xf4\xa1\x87\xf7\xd9\x78\xe4\x38\x7f\x02\x0e\xe7\xd4\x11\xdc\x19\x02\x8e\xed\xe6\xa3\xc0\x6e\x3e\xce\x35\xab\xf6\x82\x19\x7b\x99\x15\x6a\x0e\x62\x56\xd1\xf2\x6f\x61\xb5\x81\x89\x61\xb7\x49\x94\x82\x48\xa2\x53\x46\xf6\x0b\xbe\x3e\x03\x89\x8d\x32\xa9\x49\xfe\x8c\x3d\x40\x00\xab\x80\xf4\x4e\xc9\x64\x9c\x25\xbd\x39\x4f\x67\x55\x6f\x67\x74\xb9\xf5\x2d\x23\xe3\x38\x92\x21\x12\xf9\x26\xb5\x9d\x8e\x5a\xaf\x2b\x87\xd2\x34\xbb\x8f\x7c\x84\x96\x04\xd0\x83\xb3\x9a\x5c\x27\x2a\x65\x0d\x03\x99\xcf\xc7\x07\xd7\x9a\x1e\x88\x37\x1e\x88\x0c\x66\xa9\x0c\x0b\x63\xb8\x21\xda\x04\x31\x2d\x4e\xfa\x6e\xd3\x79\x77\x38\x18\x05\xd2\xfb\x78\x0b\xce\x8c\x08\xa7\x1e\xea\x98\x43\x0c\xfc\x2a\x4c\x21\x73\xce\x42\x84\x94\x8c\x3d\xc6\x55\x6b\x39\xc9\x6f\x7d\x64\xef\xf9\x1b\xea\xf2\xdd\x37\x74\xbb\xfe\xe6\x1b\xdd\x1b\x46\x87\x0f\x40\x0e\xce\x25\x1f\x8c\x4d\x3e\x80\x36\x6a\x1a\x16\x1f\xe0\x6c\x60\x9c\xd5\x4c\x90\x7a\x1e\xe7\xd2\x2c\x3f\xaf\x19\xb2\x25\xf2\xcf\xee\x28\x27\x20\x40\xee\x8f\x91\x8c\x10\x09\xa2\x11\x47\xd5\xc1\x20\x3f\x2f\x56\xa8\xf9\x08\xea\x14\xa0\x50\xb4\x77\xc1\xa1\x97\xb1\x4b\xb2\x7f\x33\xf6\xf8\x45\x7e\xb7\x15\x6b\xcd\x47\xd8\xa3\xb4\xba\x75\xd5\x86\xfc\x87\x1d\x8d\xc5\x70\x37\xa6\x3e\xb7\x9c\xb2\x0b\x8c\x5d\x1a\xfd\xde\x25\x85\x61\xed\x5d\x52\x18\xfd\x46\x7f\xb1\x90\x16\xed\xb9\x4a\x65\xbf\x74\xde\xdd\xe4\x70\x0a\xce\xc3\x93\x14\xfe\x1e\x50\x09\xf8\x3d\xfc\x1d\xa6\xb0\x35\x62\x1c\xe7\x15\x1e\x93\x0b\xa0\x64\x92\xbd\x3b\x06\x38\x7f\x74\xed\xeb\xe3\xdf\x27\xd9\x9b\xb4\xa8\xfc\x14\xce\x70\x21\xa3\x4c\xd1\xd9\x05\x26\x51\x12\x63\x4f\xe4\x1b\xd1\x17\x2b\x07\xa3\x48\x32\xb9\xb7\x2d\x5e\x00\x1e\x2f\x3c\x03\xa1\x07\xe5\x86\x41\x5a\xfd\x34\x4c\x08\xb6\x10\xae\x07\x29\xbd\x87\x77\xd2\xe6\x2d\x85\x01\x7e\x35\x8d\x28\x40\xcb\xb6\xdd\xe4\xa7\xb0\xd4\x48\x52\x3c\xc0\xc7\x5f\x0c\x62\x27\x7d\xd6\x53\x3d\x37\xcf\x8c\xde\xef\x51\x9f\xb6\xe4\xd3\xd6\x59\x7c\xab\xbc\x3e\x84\x98\xab\xa4\xbb\xb4\xc1\xe8\xeb\x5d\xa3\x83\x30\x2d\xac\x6b\x93\x9d\x5f\x01\xef\x0a\x70\x47\xcc\x1d\xc6\x9d\x2e\x77\x18\x77\xb0\xdc\x61\xdc\x99\x72\x87\x11\x9d\xf0\x2f\x04\x1d\x17\xf0\x4f\x97\xe2\x7a\xdf\x9c\x5c\x9f\x91\xda\x6b\x9a\xef\xdb\x7b\xd6\x37\xaa\xdb\xfe\x2e\xf4\x1e\x9e\xee\xcd\x3b\xfa\xf7\xb0\x82\x67\xf9\xfe\x87\xf0\x0e\x77\x18\x5e\xff\x97\x87\x18\x7f\xde\x2c\x01\xd7\x4b\xea\xc7\x7d\xf0\xff\x01\x00\x00\xff\xff\x73\x1e\x7c\xbe\x05\x24\x00\x00")

func dataHostsWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10SpyTxt,
		"data/hosts/win10/spy.txt",
	)
}

func dataHostsWin10SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/spy.txt", size: 9221, mode: os.FileMode(438), modTime: time.Unix(1497726527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd2\xcd\x52\xc2\x30\x10\x00\xe0\x3b\x4f\x91\x19\x2e\x7a\x60\x9b\x04\x10\xe1\xe8\xdd\x93\x07\xcf\x21\x3f\x25\x43\x9a\x74\xba\x29\xb5\x3e\xbd\x83\x20\xc2\x68\x9a\x32\x3d\xee\xb7\x3f\xd9\xed\x74\x3a\x25\xbb\x80\x11\x49\x67\x3d\xa3\xa4\xad\x95\x88\x9a\x3c\x70\x56\xd0\x65\xc1\x29\x5b\x11\xb6\xdc\x2c\x57\x8f\x93\xa3\x7c\x0d\x8d\x26\xd6\x9b\xb0\x21\xbb\x18\x6b\xdc\x14\x45\x69\xe3\xae\xdd\x82\x0c\x55\x21\x1b\xf1\xd9\xcf\x2a\xf1\x51\xbc\x5b\xaf\x42\x87\x6f\x75\xff\xe2\x82\xdc\xeb\x66\x32\xa1\xf0\xfd\x11\x4a\x29\xa7\x7c\xc6\xc0\x41\x77\x52\xa7\x96\xc7\x0a\x37\x48\xce\x47\x20\xa3\xb2\x88\x2d\xd6\x26\x8f\x9e\xd7\x2c\x8b\x38\x7d\xca\x0f\xce\x99\xa2\x19\x24\x5a\x50\xa1\xf3\x2e\x08\x35\xac\x0e\x8b\x31\x50\x46\xa7\x86\xda\x29\x8b\xb5\x13\xbd\x14\x51\xb8\x50\x42\x55\x43\x65\x65\x13\x30\x98\x78\xeb\x1c\x28\xed\xec\x41\x37\xfd\x00\xfa\x99\x27\x13\x4e\x8f\xa3\xab\xe3\xb4\x98\x28\x60\x34\x87\x73\xd2\x7d\x00\xc4\x5e\x28\x8f\xe0\x75\xbc\xb2\xf3\xdf\x27\x29\xac\xff\x3c\x0b\x3c\x8a\x28\xd3\x39\xc9\x35\x98\x12\x14\xc2\x96\x8d\xb9\x8f\x29\x47\x1e\xf2\xd2\xea\x96\x5c\x4f\x87\x0e\x87\xd7\x93\x02\xff\xad\x07\xa3\x88\x78\xcf\x3e\xcf\x09\x2c\x7d\xbe\x4b\xc9\xa4\x88\xae\x85\x51\x7f\xda\xb8\x9d\xe5\x22\xe7\x40\x68\xca\xaf\x00\x00\x00\xff\xff\xd8\xdd\xde\xe2\xea\x04\x00\x00")

func dataHostsWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10UpdateTxt,
		"data/hosts/win10/update.txt",
	)
}

func dataHostsWin10UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/update.txt", size: 1258, mode: os.FileMode(438), modTime: time.Unix(1495446719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x4f\xf3\x30\x10\x86\xf7\xfe\x0a\x4b\x5d\xbe\x6f\xe0\x9c\x54\x08\x4a\x46\x76\x26\x06\x66\xd7\xbe\x24\x27\x6c\x5f\xe4\xbb\xc6\x2d\xbf\x1e\x15\x24\xa4\x40\x03\xf2\xf6\x3e\xaf\x1f\x9d\xde\xed\x76\x6b\x46\x16\x15\x53\x29\xdf\x1b\x3c\x69\x71\xe6\x5f\xbb\xb7\xcd\x83\xdd\x35\xed\x9d\x69\xf7\xdd\x6d\xf3\x7f\x73\xe9\x3d\x71\x41\x43\xb9\xe7\xce\x8c\xaa\x93\x74\xd6\x0e\xa4\xe3\xf1\x00\x9e\x93\xf5\xc5\xbd\x9d\x6f\x92\x3b\xd9\x17\xca\x81\xab\x3c\x4f\xe7\xc7\xc8\xfe\x15\xcb\x66\xd3\xc0\xc7\x33\xce\x2b\xcd\x4e\x89\x33\x48\x14\x48\xe4\x0b\x0b\xf7\x7a\x31\x7c\x95\x3c\xef\x7e\xa3\x25\xae\x90\x90\x02\x24\x54\x27\x58\x66\xf2\xb8\x26\x08\x59\x20\x49\xaf\xd9\x0b\x2d\xc0\x00\x07\xca\xc3\xb7\x28\xd2\x8c\x8b\x28\xf2\x40\xf9\x67\x7c\xd5\xa8\x94\x10\xea\xe7\x1c\x0b\x30\xbb\x48\xe1\xaf\x1d\x6a\xad\xd7\x0f\xad\xe2\x39\x2b\xb8\x69\x5a\xfd\xba\xd6\x00\x0c\x03\xca\x91\x14\x21\xa3\xbe\x07\x00\x00\xff\xff\x51\xe3\x1e\xc0\xfe\x01\x00\x00")

func dataHostsWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7ExtraTxt,
		"data/hosts/win7/extra.txt",
	)
}

func dataHostsWin7ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/extra.txt", size: 510, mode: os.FileMode(438), modTime: time.Unix(1495446644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xbd\x6e\xe3\x30\x10\x84\x7b\x3f\x05\x01\x37\x77\x85\x57\xff\x32\xec\xf2\xfa\xab\x52\xa4\xa6\xa9\x95\x44\x58\xdc\x55\xc8\xb5\x65\xe5\xe9\x03\x27\x48\x10\x01\xa6\x13\x83\xe5\xf7\xed\x0c\x38\xeb\xf5\x5a\xf5\x1c\x24\xa8\xc9\xd2\x56\x85\x71\x56\x7f\xf2\x2c\x49\xab\x24\x4f\xb3\xad\xca\xaa\x7d\x55\xff\x5d\x5d\xad\xff\xec\x51\x59\x6a\x79\xaf\x7a\x91\x31\xec\x93\xa4\xb3\xd2\x9f\x0e\x60\xd8\x25\xc6\xeb\xd7\x79\xe3\xf4\x25\x79\xb6\xd4\xf0\x14\x9e\xc6\xf9\xdf\xc0\xe6\x88\x7e\xb5\x4a\xe1\xfd\x29\xd3\x84\x2c\x2b\x0b\x18\x98\x60\x18\x68\x02\x42\x59\xc0\xbc\xde\x45\x61\x9e\x96\x79\x09\x83\x99\x63\xb4\xa8\xee\xd1\x3a\x8b\xd2\xa2\xd8\xc5\x59\x19\xef\x2c\xd3\x2d\xb4\x5e\xdf\x60\xec\x46\x2d\x78\x31\xbd\xa6\x0e\x33\x10\xaf\xdb\xd6\x1a\xa7\x49\x77\xe8\x97\xea\x9c\x43\x40\x11\x4b\x5d\x80\x46\x8b\x06\x67\x8d\xe7\xc0\xad\x5c\x77\x05\x7d\xd4\x0d\x85\xc5\x49\x73\xa8\x1e\x3d\xc1\x13\x9c\xd9\x0b\x5e\x6e\xf8\x5f\x52\x87\xfc\x68\xee\xa7\xbe\x99\x2c\xdd\x8b\x0e\xe3\x4c\x28\xf9\x5d\x8a\x27\xcf\x23\x7e\x53\x6e\xf5\xbd\x38\x10\x1c\xd0\xa1\xf8\x39\x92\x76\xe5\x86\x9d\xd3\xd4\xfc\xc2\xf5\xd8\x30\xd8\xf1\x5c\x47\x8c\x8f\xd9\x7e\xfa\xdf\xa4\x25\x30\x2d\xe1\x5b\x00\x00\x00\xff\xff\x3a\x87\x5f\xb5\x5a\x03\x00\x00")

func dataHostsWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7SpyTxt,
		"data/hosts/win7/spy.txt",
	)
}

func dataHostsWin7SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/spy.txt", size: 858, mode: os.FileMode(438), modTime: time.Unix(1495446658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xbb\x6e\xac\x30\x14\x85\xe1\x9e\xa7\xb0\x44\x73\x4e\x31\xbe\x05\xc2\x88\x32\x7d\xaa\x14\xa9\x8d\x2f\x60\x05\xbc\x91\x6d\xe4\x4c\x9e\x3e\x9a\x30\x22\x89\x34\xc1\x88\x8e\xf5\xf1\x6f\xca\xb2\x44\x03\x84\x18\x50\xb2\xae\x41\xcb\xac\x44\xd4\xe8\x1f\x67\x84\xd6\x84\x53\xd6\x20\x56\xb7\xf5\xe3\xff\xe2\x0a\x9f\xc1\x6b\x64\x9d\x81\x16\x0d\x31\xce\xa1\x25\xa4\xb7\x71\x58\x3a\x2c\x61\x22\xd2\x8b\x8f\xcb\x69\x12\xef\xe4\xd5\x3a\x05\x29\xbc\xcc\x97\xa7\x11\xe4\x9b\xf6\x45\x41\xf1\xd7\x83\x28\xa5\xc2\x88\x13\xc3\x23\x4e\xab\x5a\x4f\x5e\x0b\x3f\x51\xa7\x4c\x1e\x99\x8a\x66\x11\x3b\x57\x5d\xbe\xc4\x1f\xce\x79\x54\x69\x9d\x45\x9c\x8b\xe6\x00\x92\x2c\x83\xc4\x82\x15\x24\x37\x82\x50\x3b\x4a\xc6\x51\xed\x55\xb6\xc4\x64\xa5\x87\x00\x26\xde\x9f\x77\x0a\xe1\xc8\x7f\x18\xcd\xf1\xed\xf5\xfd\x4b\xa6\xc7\x2a\xe0\x8e\x1d\x89\x6d\x85\xdf\xc4\xe9\xb8\x91\xbf\x3f\x5e\x97\xdb\x00\xbe\xff\x1e\x52\xda\x39\xfe\x19\x00\x00\xff\xff\x4d\x79\xc3\xf9\x07\x03\x00\x00")

func dataHostsWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7UpdateTxt,
		"data/hosts/win7/update.txt",
	)
}

func dataHostsWin7UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/update.txt", size: 775, mode: os.FileMode(438), modTime: time.Unix(1495446680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x8f\xdb\x30\x0c\xc5\xf7\x7c\x0a\x03\x59\xda\xc1\x74\x1c\xb4\xe8\x21\x63\xf7\x4e\x1d\x3a\x2b\x12\x6d\x13\x67\x51\x2e\xc9\x58\x76\x3f\x7d\xe1\xeb\x5f\xdf\x9d\xd2\x42\x9b\xde\xef\x51\x7a\x0f\x3c\x1e\x8f\xd5\x90\xd4\xb4\xca\xc4\x0f\x6d\x85\x8b\x89\xab\xde\xb4\xef\x9b\xd3\xbb\xe6\x7c\x6a\x3f\x54\xed\xc3\xe5\x7c\x7a\x7b\xd8\xc0\x4f\x49\xb0\x22\xee\xd2\xa5\x1a\xcc\x26\xbd\x34\x4d\x4f\x36\xdc\xae\xe0\x53\x6c\xbc\xb8\x6f\x6b\x1d\xdd\xd2\x7c\x21\x0e\x29\xeb\xe7\x69\xfd\x38\x26\xff\x88\x72\x38\x9c\xe0\xe9\x54\xce\x1b\xcd\xce\x28\x71\x3d\x9f\x41\x47\x85\x48\x5e\x92\xa6\xce\xb6\x21\x7f\xb8\x69\xc2\xa5\x96\x0e\xa2\xf2\x4e\x08\x31\x40\x44\x73\x8a\x32\x93\xc7\x92\x3f\xb0\x42\xd4\xce\xd8\x2b\xed\x84\x8e\xd8\xb1\x47\xf8\xed\x7f\x7a\x09\xae\xc4\xfd\x9e\x4b\x29\x38\x0e\x41\x88\x1f\xc1\x68\xc4\x22\x28\x75\x27\x50\xfc\x6f\xff\xd2\xd1\xc3\x48\x33\xee\xae\x28\xf6\xa0\x76\x05\xad\x9f\xfb\xc7\xd4\x13\xbf\x34\xbc\x9a\x8d\x71\xb1\xfa\xef\x60\xa5\x76\xbe\xde\x50\x56\x98\x24\x05\xf0\x51\x41\xac\xc0\xfd\x9c\x05\x19\x9d\x0d\x28\x25\xca\x92\x20\x86\x1e\xbb\x00\x41\x17\x88\x53\x01\x34\x8a\x08\xf9\xc7\x72\xec\x84\xd9\x8d\x14\xfe\x63\x2b\xf2\x16\x4a\x70\x02\x8d\x4e\x4c\xbd\x20\x72\x09\xcd\xf9\xf5\x05\xc8\xce\x34\x31\x18\x8e\x18\xd1\x64\x2d\xf9\x83\x2f\xc5\xc8\xea\x13\xdb\xbd\x7e\x8b\x04\x6c\x35\xe9\x8d\x0c\x81\xd1\x9e\xf1\xed\xbf\x47\x9e\xef\x22\x39\xff\x6a\x57\xd1\x89\x1f\x36\xf5\x7b\x00\x00\x00\xff\xff\x7d\xd1\x90\x9d\xe1\x03\x00\x00")

func dataHostsWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81ExtraTxt,
		"data/hosts/win81/extra.txt",
	)
}

func dataHostsWin81ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/extra.txt", size: 993, mode: os.FileMode(438), modTime: time.Unix(1495446755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd4\x3d\xef\x9b\x30\x10\x06\xf0\x3d\x9f\xc2\x52\x96\x76\xc0\xd8\x0e\x81\x24\x63\xf7\x4e\x1d\x3a\x5f\xcd\x01\x56\xf0\x4b\xed\x23\x84\x7e\xfa\x8a\x56\xaa\xca\x5f\xc1\x11\x1b\xbf\x07\xee\xf4\xc8\xf2\xf1\x78\x64\x83\x4f\x94\xd8\x6c\xdc\x45\xb2\x14\x16\xf6\x49\x36\xa5\xa8\x4b\x25\x64\xc3\x94\xb8\x9d\x9b\xcf\x87\x35\xf6\xd5\x47\x64\xc6\x75\xfe\xc6\x06\xa2\x90\x6e\x65\xd9\x1b\x1a\xa6\x1f\x5c\x7b\x5b\xea\x08\xbf\x96\xc2\xc2\xb3\xfc\x6e\x5c\xeb\xe7\xf4\x2d\x2c\x5f\x46\xaf\xef\x18\x0f\x07\xc1\xff\x3c\x0c\x0a\x21\x84\xe4\x50\xd8\x84\x6d\x8f\xdc\x21\x6d\x4d\x65\xec\x94\xb1\x2a\x63\xe7\x8c\xd5\x19\x6b\x32\x76\xc9\xd8\x75\xdf\xa4\xc8\x58\xa6\x17\xb9\xdb\xcb\x8b\x97\xba\x4d\x52\x55\x15\x1f\xbd\xe3\xe3\xe8\xe6\x8f\xa8\x44\x25\x2a\x3e\xea\xe5\xb5\x4a\xa5\xae\xfb\xdf\x4a\x75\xae\x73\x7a\x91\xbb\x7a\x3a\x5d\x77\xa6\x7a\x1b\x80\xf0\xa9\x07\x70\x3d\x4a\x4e\x11\xba\xce\x68\x0b\x0e\x7a\x8c\x9b\x28\x4e\xfc\xe1\x23\xe1\x93\xb7\x40\xc0\xad\xd1\xd1\x27\xdf\xd1\x7a\x04\xff\x85\x12\x12\x19\xd7\xa7\x62\x36\x2e\x9b\x0b\x8b\x43\x52\x59\x85\x91\xb2\x8e\x53\xf4\x01\xff\x8b\xc0\x1d\x5a\x97\x36\x4b\xa7\x9f\x96\x13\x8e\x68\x91\xe2\xb2\xf7\x37\x02\x4a\x1d\x2a\x3e\x85\x16\x08\xdf\xa5\xe6\xb4\x93\x58\xe7\xe4\x0a\x5c\x5d\x7b\x6b\xc1\xb5\x6f\x77\xfa\xdb\xf4\xbb\x16\xd7\x7b\x83\x9b\xf0\xa8\xb7\xfe\x3b\x00\x00\xff\xff\x83\x7f\xa5\x53\x59\x04\x00\x00")

func dataHostsWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81SpyTxt,
		"data/hosts/win81/spy.txt",
	)
}

func dataHostsWin81SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/spy.txt", size: 1113, mode: os.FileMode(438), modTime: time.Unix(1497726533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd2\xb1\x6e\x83\x30\x10\x80\xe1\x3d\x4f\x61\x29\x4b\x3b\xc4\xdc\x39\x10\x92\x8c\xdd\x3b\x75\xe8\xec\xd8\x40\x50\x0d\x4e\xb1\xa9\x9b\x3e\x7d\x45\x13\x45\xad\x94\x72\x27\x36\xfc\xf1\xdf\x49\x66\xb9\x5c\x8a\xa3\x0f\x31\x88\xd4\xf6\x5b\x14\xe3\xc9\xea\x58\x89\x07\x2c\x33\xd8\x64\x0a\xb0\x14\x0a\xf6\x45\xf9\xb8\x98\xe4\xb3\x1f\x2a\xd1\xf6\xb5\xdf\x8b\x63\x8c\xa7\xb0\xcf\xb2\xa6\x8d\xc7\xf1\x20\x8d\xef\x32\x33\xe8\xaf\xf3\xaa\xd3\x9f\xd9\x6b\xdb\x5b\x9f\xc2\xcb\xe9\xfc\xe4\xbc\x79\xab\x86\xc5\x02\xe4\xcf\x23\x00\x00\x36\xb8\x42\xe9\x64\xba\xa8\xcb\xc8\xa9\xf0\x1b\xe5\xda\xd2\x68\xb7\xdd\xd1\xc8\x80\xa1\x11\xd4\x8a\x83\xe8\x71\x08\x50\xd2\x08\x91\xde\x09\x4b\x53\xd0\x48\x6f\xd7\x34\xb2\xc0\x58\xdc\x62\xcd\x40\x39\x5d\x52\xeb\x5d\x4e\x20\x3d\x4a\xeb\x53\xef\xbc\xb6\xf3\xea\x23\xe7\xc0\x43\x33\x41\x2d\xad\x93\x29\xc8\xae\x35\x83\x0f\xbe\x8e\x77\x4c\xd5\xcd\x1b\xe4\x84\x90\x53\x52\x9c\x92\xe2\x94\x72\x4e\x29\xe7\x94\x0a\x4e\xa9\xa0\x4b\x26\x3a\x3b\x77\xbd\x8c\x2b\xab\x2b\x25\xaf\xaf\xef\xcf\x98\x40\x7a\x9f\x3b\xfc\x6f\xbb\xba\x61\xfe\x36\xb7\xcf\xff\x92\xbe\x8a\x37\x12\x5c\x98\x5f\x93\x37\x89\x3a\xb9\x1e\xf8\xa1\xf9\x0e\x00\x00\xff\xff\x00\x69\x8c\x9d\x91\x05\x00\x00")

func dataHostsWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81UpdateTxt,
		"data/hosts/win81/update.txt",
	)
}

func dataHostsWin81UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/update.txt", size: 1425, mode: os.FileMode(438), modTime: time.Unix(1497726536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNcsiNcsiTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xcf\xcc\x4b\xc9\x2f\x2f\x0e\x2e\xa8\x74\xca\xc9\x4f\xce\x4e\x2d\x02\x04\x00\x00\xff\xff\x76\x30\x32\x0e\x11\x00\x00\x00")

func dataNcsiNcsiTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataNcsiNcsiTxt,
		"data/ncsi/ncsi.txt",
	)
}

func dataNcsiNcsiTxt() (*asset, error) {
	bytes, err := dataNcsiNcsiTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ncsi/ncsi.txt", size: 17, mode: os.FileMode(438), modTime: time.Unix(1495292715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xb1\x72\xdb\x30\x0c\xdd\xf3\x15\xbe\xcb\xd2\x0e\x82\xe2\xa4\xcd\xf5\x72\xd7\xa5\x7b\xaf\x43\x87\xce\x34\x09\x49\x38\x8b\x00\x43\x40\x96\x95\xaf\xef\x29\x71\xe3\x5a\x11\xdb\x8c\xe4\x7b\x04\xc0\x87\x07\x5c\x5f\x5f\x6f\x24\x21\x8f\xd9\x36\x23\xf1\xf6\x66\x83\x47\xcb\x6e\xf3\xa1\x46\xf3\x75\x60\x8d\x4e\x1f\xc1\x0b\x37\x1f\xaf\x66\xee\x77\xc9\xb8\x21\x6e\xe4\x61\xd3\x99\x25\x7d\xa8\xeb\x96\xac\x1b\x76\xe0\x25\xd6\x3e\xbb\xa7\xa9\x8a\xee\x58\xff\x22\x0e\x32\xea\xcf\x34\x7d\xeb\xc5\xef\x31\x5f\x5d\x29\xe6\x03\xe6\xaf\xb5\x63\x1d\x31\x2b\x44\xf2\x59\x54\x1a\x7b\x7e\x7a\x86\x53\x52\xd0\xfd\x94\x70\x71\x9f\x15\x34\xba\x6c\xea\x33\x22\x17\x9f\x3f\xdd\xdd\x6f\xbf\x6c\xef\xe1\x20\x10\x15\x3d\x07\x60\xb4\xbf\xf1\xcf\xdb\xdb\xbb\xbb\x4f\x25\x7c\xd7\xcb\x0e\x46\x74\xd6\x61\x2e\xe5\xf0\x8e\xc3\xe4\xf3\xa0\x9d\x4a\x70\xb0\x27\x6e\x17\x84\xc0\xb3\x66\x86\x6c\x90\xb2\x04\xf0\x51\x21\x2a\xbf\x65\x09\x23\x8b\xe1\x65\x0d\xbe\x13\xf2\x58\xcc\xbe\x82\x02\xab\x33\xbf\x88\xd2\x13\xb2\x55\x0a\xad\x33\x1c\xdd\x04\x11\x55\x91\x5b\xcc\xd0\xd3\x61\xa1\xee\x0b\x19\x46\x56\x18\x5f\x5a\xb7\x86\xcf\x3e\xa0\x16\x92\x53\x4d\x92\xed\x32\x5f\xc0\xd4\xcb\x04\x6a\xce\xc8\x83\xdb\xbb\xe8\xc8\xd0\x77\x2c\xbd\xb4\x84\x8b\x80\x01\x0f\xf3\x2f\xdc\x60\x1d\x1c\x77\x72\x7c\x5b\x52\x88\x01\x22\x9a\x9b\xcf\xe4\xb1\x68\x98\xc0\xb3\xb6\x8d\xb1\x57\xba\x44\x1a\xc4\xb0\x73\x7e\x7f\x7e\x59\x75\xd2\xc5\x02\x49\xd1\x65\xdf\x95\xb2\xbc\xd2\x56\xe5\x69\x57\x24\xa5\xd8\x56\x5a\x45\xe5\x6a\x6e\xd0\x8b\x1e\x4f\xb8\xb0\x1b\xb1\x52\xc0\x9c\x66\xb7\xf7\x32\x04\x97\xd2\x25\xa1\x27\x8f\xac\xb3\xc3\x62\x2a\xd5\x36\xeb\xcb\x2b\x15\x44\xe8\xc4\xa2\xa3\x7e\x71\xbd\x2a\x96\x34\x0d\x79\x3c\xf9\xa0\x90\x48\xf8\x0f\x41\x9b\x23\x44\x3d\x23\x29\x93\xc7\x9e\xd4\xd6\x46\xf7\x71\xc0\x3c\x9d\x07\x21\x17\xe3\xbf\xcf\xab\x7a\x03\xb7\x31\xf0\xa5\x4e\xfa\x63\xed\xf2\xd4\xd2\xe5\xe4\x29\x9a\x11\xb7\x5a\xa9\xf6\x05\xf7\x9d\x6c\xbc\x12\xd3\x24\x63\x45\xd1\xb5\xa8\xa0\x55\xe9\x27\x33\x0b\x43\x8b\x4d\x80\xa0\xc7\x7f\x34\xcf\xa8\xc7\xea\xe4\xf1\xff\x2d\x1e\xa3\x88\xeb\x06\xb4\xfd\x2d\xa4\xde\xde\x7e\x75\xa0\xb5\x8e\x0c\xef\x5b\xa6\x63\xf0\xc5\xba\x47\x9d\x37\x1c\x3c\xaf\xeb\x12\x65\x1c\x9f\x27\xd3\x0b\x33\x7a\x33\xd4\x02\xe1\xd5\x8d\xbf\x03\x00\x00\xff\xff\xda\xba\xc1\x37\x8f\x06\x00\x00")

func dataOpenwrtWin10ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10ExtraDnsmasqConf,
		"data/openwrt/win10/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin10ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/extra/dnsmasq.conf", size: 1679, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd4\xbf\x6e\xdb\x3c\x14\x05\xf0\xdd\x4f\x71\x01\x2f\xdf\x37\xe8\x88\x97\x7f\xa5\x6c\x6d\x9d\x16\x1e\x1a\x07\x4a\x8a\xcc\x8a\x4c\x37\x6a\x1d\x49\xa0\x68\x38\xe9\xd3\x17\xaa\x91\x22\x1b\xd9\x59\x3f\x1d\x1c\x5c\x5e\x72\xbd\x5e\xd3\x38\xf9\xe1\x1c\x22\x9d\xfb\x81\x05\xf9\x97\x18\x5a\xfa\xaf\xf4\xb1\x2b\x0f\x7d\xf0\xe7\xf6\x78\xc4\x69\xf6\xe1\xff\xd5\x82\xbf\x8e\xc1\x53\x3f\x1c\xc6\x2b\x7a\x8a\x71\x9a\xaf\xca\xf2\x7b\x1f\x9f\x4e\x8f\xe8\xc6\xe7\xb2\x0b\xed\xaf\xd7\xe2\xb9\x7d\x29\x1f\xfa\x61\x3f\x9e\xe7\xbb\xe9\xf5\xe3\x71\xec\x7e\xfa\xb0\x5a\xad\xc9\x0f\x87\x31\x74\x9e\xc2\x78\x8a\x3e\xd0\xe6\xe6\x6e\xd5\x4f\xb1\x7d\x3c\xfa\x99\x8a\x48\x43\x1b\xa9\xd8\xd2\x6d\x73\xdd\xec\xbe\xdd\x6f\x6f\xbe\x50\x31\x51\xec\x26\x2a\x8a\xfd\x34\x86\x48\x46\x51\xf1\x83\x9a\xeb\xcd\xb6\xb9\xfe\x74\x4f\x45\x11\xc7\x62\xf9\x30\x93\x51\xe9\xa4\xd3\x3e\x33\x69\xb5\xa6\x70\x3a\xfa\xf9\x5d\xe4\x96\x3e\xef\x9a\x87\x0f\xcd\x66\xf9\x6d\xd3\xec\x6e\xa9\xd8\x13\x2b\x54\x02\x2c\x61\x74\x06\x65\xe1\xa0\xc0\xb2\xca\xb4\x92\x21\x85\x48\x61\xa9\x50\x3b\xb0\xab\xc0\x4e\xa5\xb0\x16\x70\x0e\x52\x6a\x24\x4b\xbc\x51\x03\xa9\xb3\xb1\x85\x28\x65\x72\x16\x5a\x80\xb9\x02\x0b\x05\x97\x63\xa5\x03\x6b\x09\x67\x53\xd8\x6a\x68\x18\x9d\x55\xc2\x1a\x18\x09\x16\x4b\x97\x7c\x5b\x27\x47\xfc\x66\xab\xec\x16\xe6\x8f\x96\x59\xc9\x06\xd2\x48\xe8\xa4\x65\xa1\xa1\x35\xaa\x0a\x19\xeb\xf6\xd7\xb2\xc8\x0a\x96\xac\x2f\xc7\x9d\x1c\xdc\x45\x1b\xb0\xb6\x39\xbb\xcc\x8a\x21\x8d\x82\xd2\x90\x2a\x5b\x5b\xce\x1a\x35\x2b\x0d\x76\x02\x5c\x19\xb8\x74\xb8\xad\x60\x15\xb8\x82\xab\x93\x57\x50\x68\xb8\x1a\x5c\xbb\xac\x22\x52\x38\x68\x0b\xb7\x1c\x65\xa6\x65\xc1\x90\x19\x3d\x2e\xd8\x28\xb0\x31\xb9\xba\xd6\xe0\xdc\xce\x0b\x96\xff\x92\xac\x92\x0b\xf5\x0e\xeb\xf4\x63\x77\xc1\x72\x79\xf4\xb2\x3a\xdb\x0a\x6c\x2d\xa4\xd1\xbf\x03\x00\x00\xff\xff\x45\x09\x77\x87\xe9\x06\x00\x00")

func dataOpenwrtWin10ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10ExtraFirewallUser,
		"data/openwrt/win10/extra/firewall.user",
	)
}

func dataOpenwrtWin10ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/extra/firewall.user", size: 1769, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x9a\xcd\x6e\x23\x2f\x12\xc0\xef\xf3\x14\x91\xe6\xb2\x7b\x30\xe1\xc3\x76\xec\xbf\xb4\x97\xbd\xef\x69\x0f\x7b\xa6\xa1\xec\x46\xe9\x06\x02\xd8\x9d\xde\xa7\x5f\xd1\xf6\x4c\x12\x1b\x70\x65\x67\xa4\x91\xac\xae\x5f\x53\x9f\x14\xb8\x9c\x9f\x3f\x7f\x3e\x39\x0f\x76\x0a\xe9\x69\x32\x96\xd1\xa7\xe8\xe7\xa7\xbf\x3d\x43\x52\xcf\xda\xc6\x51\xc6\x37\xa2\x9c\x3d\xfc\xfd\x47\x26\xff\xe5\x02\x3c\x19\x7b\x70\x7f\x3d\xf5\x29\xf9\xf8\xd7\xf3\xf3\xd1\xa4\xfe\xd4\x11\xe5\xc6\x67\x15\xe4\x7f\xe7\xd5\x28\xdf\x9f\xff\x63\xac\x76\x53\xfc\xb7\x9f\xff\x39\x38\xf5\x0a\xe1\xc7\x8f\x08\xe1\x0c\xe1\x1f\xcf\x72\x45\x29\x65\x44\xae\xc6\x08\xfa\x08\xc4\x42\x7a\xbe\x15\x6a\x55\x97\xf2\xd6\xab\xa2\x25\x5c\xb7\x84\x9b\x96\x70\xdb\x12\xbe\xb4\x84\xbb\x96\x70\xdf\x10\x32\xda\x12\xb6\xe2\xc7\xea\x11\x2a\x3e\x25\x52\x47\x46\xc6\x68\x97\x1c\x7e\x7d\xce\xc9\x18\xa5\x8e\x85\x37\x78\xe9\x8d\x20\x75\xe1\xb1\x12\xa5\x87\xc9\x9c\x4d\x9a\xc9\x74\xa9\x94\x1b\xa9\xb6\xf0\x7e\xba\x55\xab\xed\xfb\x1d\x17\x0b\x4b\x5f\xdc\xb9\x37\xbb\xec\xa6\xd1\x3e\x12\x99\xf4\x98\x6e\x04\xaf\x72\xa5\xb4\x5d\xd9\x48\xa4\x4e\xa0\x7a\xa2\xe1\x93\x34\x04\x39\x33\xca\x56\x3e\x38\x4d\xb4\x23\x3a\x7a\x32\x7a\x32\x1a\x15\x5c\x74\x87\xdb\xc5\x2e\x38\xff\x1e\x2e\xbe\x87\xaf\x91\x78\x57\xc9\x78\x57\xcd\x78\x57\xce\x6c\x67\xec\x71\x49\x41\x45\xcf\x20\x04\x65\x2b\x49\x98\x0e\xe7\xa2\x48\xd5\x45\xc7\x92\xc8\x32\x41\xd7\x2b\xa8\x89\xb6\x65\x5d\x17\x51\xe3\xad\xb2\x2e\xde\xad\x94\x0b\x4b\xaf\xf2\x86\xf8\xfc\xa1\x85\x09\x1c\xb6\x7e\x80\x4d\x36\x32\x32\xd9\x58\xde\x18\x9d\x15\x1e\x65\x95\x88\xaa\xa7\x9c\x52\xce\x05\xdf\x35\xd6\x8b\x24\x7f\x34\xf6\xb8\x8a\xf3\xad\x6c\xae\xa7\x6f\xae\xa7\xef\x22\x2a\x45\x5b\x35\x9b\xbb\x2a\x6d\x42\x75\x5f\x74\x4a\x92\x04\x03\x8c\x90\xc2\x5c\xab\x3c\x25\x55\x0f\x44\xcb\x24\x47\x19\x52\xd9\x75\xa5\x6d\x51\xa3\x8e\x7c\x4b\xe4\x18\xf7\x64\x8c\xa0\xec\x8d\x91\x3a\xae\x37\x7b\x32\xa8\x99\x0c\x83\x9d\xee\x84\xfb\xed\x86\x0c\xce\x96\x84\x3d\x43\x24\xee\x37\xc5\xdb\x54\x35\xfc\x57\x51\x31\xfc\x7d\x75\x63\x2d\x22\x5e\x5f\x90\x97\x17\x74\xa3\x97\x09\xde\x55\x2f\xed\x11\x88\x1a\xdc\x49\x4b\xef\x6f\xfc\xfe\x02\x31\x92\x82\x3c\x1c\x8c\x1a\xa5\x95\x47\x08\xb7\x6c\xf0\x24\xa6\x6a\x43\xc9\x72\x78\x4f\x64\x8c\x26\x49\x7d\x88\xe4\x38\x74\xda\xe6\x96\x55\xe1\x3d\xbe\x43\xab\xbc\xed\xbc\x22\x67\x9a\x0b\xe3\x8b\x59\xba\x13\xf2\xed\x54\x2a\x16\xdd\x89\xc9\x46\x4e\x59\xfe\x57\xdf\x65\xba\xdb\x34\x85\x51\xf5\x8c\x32\x96\x8f\x6e\x8e\x03\x77\x02\xb9\xe2\x9e\xbd\x20\xc1\x56\x9b\xf8\x04\x66\x2b\x91\x20\x5f\x23\xc1\x35\xce\x6b\x46\xd7\xc8\x15\x39\x47\xda\xc8\x05\x12\x14\x02\xa9\x7a\xcd\xf6\x48\x50\x50\x1c\xb8\x79\x50\x5a\x1f\x20\xb2\x28\xd8\x66\x8d\x5c\x71\xbb\x46\xda\xf8\x22\x90\x5e\xef\x98\x40\x82\x58\x67\xf6\x0c\x99\x99\x3d\xd2\x46\x4e\x19\x4e\x35\xa7\x1c\x0b\x0a\x5c\x85\x73\x2a\x50\xe1\xc9\x7b\x01\xb5\x5d\x33\x88\xf2\x3a\xff\x47\xc5\x31\x1b\x89\x06\xb7\x48\x10\x17\xc7\xdc\x51\x90\xa0\xc0\xa5\x90\x51\xc1\x91\x01\x17\x58\x1b\x9b\xf7\xad\x2f\xe0\x1a\xa9\x7a\x4d\xb1\xa0\x40\xaa\xde\x70\xd4\xa9\xc0\xe8\x06\x5b\x8f\x5b\x8e\xcc\xf5\x16\xd7\x48\x19\x7d\xc1\x1d\x1f\x8c\xbe\xe0\x9a\x14\xa3\x3b\x86\x06\x91\xce\xec\x70\xe7\x4c\x06\x51\x0d\x20\x83\xc8\x14\xee\x31\x85\x2b\xe8\x8e\xed\x30\xfb\x5a\x64\x57\x30\xe7\x4c\x06\x05\xa6\xf7\x64\x70\x8d\x69\x00\x19\x7c\xc1\x34\xa9\x05\x64\x88\x38\x0a\xba\x67\x5b\xcc\xbd\x27\x83\x2f\x98\x4e\x91\xc1\x3d\xce\xeb\x3d\x47\xb5\xe6\x0c\x72\x94\xd7\xf9\xc2\x85\x72\x86\x51\x8a\xba\x2a\x88\xe5\x96\x82\x04\x37\x98\xf3\x3a\x83\x5b\xec\x8a\x2f\x14\x13\x70\x46\x39\x43\xe5\x9a\x51\xbe\x7d\x10\xc7\xfc\x95\x5a\xb7\x88\xed\xb2\x14\xa7\x7b\x2a\xda\xc6\x7d\x02\xdb\xee\x7e\x80\xeb\xb6\x17\x1f\xe0\xa6\xdd\x9d\x3e\x83\xcd\x94\x7c\x80\xdb\xf6\x55\xf4\x03\xdc\x61\x9d\xd9\x23\x6d\xcc\xdf\x50\x70\x20\x43\x06\x9c\x89\x76\x92\x3f\x40\x6c\xc0\xd9\xb6\x79\xac\xc2\x99\x9c\x4d\x48\x27\x39\x80\x0c\xa9\xbf\xf9\x46\x78\x78\x3c\x83\xd0\x46\x1e\xad\x8b\xc9\xa8\x48\xe2\xc9\x7b\x17\x52\x1d\x8d\x0a\xff\x4d\x15\x8a\x93\x12\x50\x96\xb4\x8d\x86\x13\x39\xbb\x90\xe0\x7d\x19\x8c\xd4\x56\x3f\x0c\xf0\x7e\x3f\x74\x39\x16\x1e\x81\x43\x1a\x7c\x04\x77\x86\x80\x84\xfb\xc2\x60\xb2\x2f\x0c\x9b\xcd\xaa\x9b\x51\xb3\x30\xb3\xc2\x8d\x5e\xcc\x2a\x5a\xfe\x3d\xae\x39\xa4\x31\xec\x32\x5a\x53\x10\x49\x74\xca\xc8\xa1\xe6\xf2\x23\x92\xd8\x28\x93\xfa\x9a\x4c\x63\x0f\x10\xc0\x2a\x20\x83\x53\x32\x19\x67\xc9\x60\xce\x37\x23\xb5\xd7\x33\xbe\xaa\x86\x8e\x91\x69\x9a\xc8\x18\x89\x7c\x95\xda\xde\x4c\x80\x97\xc5\x43\x71\xde\x3e\x44\x3e\x41\x47\x02\xe8\xd1\x59\x4d\x96\x21\x4e\x45\xc9\x48\x0a\x43\xfc\xd1\x75\x66\x00\xe2\x8d\x07\x22\x83\xa9\x56\x66\x69\x68\x38\x46\x9b\x20\xa6\xfa\x10\xf3\xf2\x3b\x82\x3b\x1c\x8c\x02\xe9\x7d\xbc\x44\xe9\x1e\x09\xa7\x01\x1e\x70\x0e\x33\x79\x6c\x40\xa5\x34\x3a\x0b\x11\x52\x32\xf6\x18\x57\x9d\xe5\x24\xbf\xf6\x2b\x95\x88\x57\xd4\xfc\xed\x57\x74\xb7\xf9\xee\x2b\xfd\x2b\x4a\x8b\x0f\x40\x0e\xce\x25\x1f\x8c\x4d\x3e\x80\x36\xea\x26\x38\x3e\xc0\xd9\xc0\x74\x5f\x42\x41\xea\x42\xc0\x8b\xbf\x39\xe4\x75\x43\x36\x47\xfe\xde\x33\x95\x54\x04\xc8\x3d\x37\x92\x09\x22\xc1\x34\xec\xa8\x7a\x18\xe5\xe7\xe5\x4a\x1b\x21\x82\x3a\x05\x28\xd5\xf1\x55\x72\x18\x64\xec\x93\x1c\x5e\x8d\x3d\xde\x02\x57\x83\xd1\x16\xfd\xca\x40\x94\x56\x77\xae\xdd\xb8\x7f\xc3\x93\xb1\x28\xf0\x02\x3d\x18\xa1\x7e\x85\x6b\x90\xad\xce\xa3\xaf\xa2\xd2\xf8\xf8\x2a\x2a\xcd\xa3\xa3\x9f\x2d\xa4\xba\x51\x8b\x58\x0e\xd5\x03\xf5\x02\xc0\x29\x38\x0f\x8f\xf2\xf9\x36\xe2\x72\xf1\x36\xfe\x11\x54\xda\x31\x31\x4e\x85\xb2\x8f\xc9\x05\x50\x32\xc9\xc1\x1d\x03\x9c\x7f\xb5\xf7\xe5\xf1\xdb\x49\x0e\x26\xd5\xf5\x9f\xc2\x19\x66\x32\xc9\x14\x9d\xad\x41\x89\x92\x18\x07\x22\x5f\x89\x9e\xad\x1c\x8d\x22\xc9\xe4\xe6\x57\xbf\x39\x7c\xbc\xf1\x90\x84\x01\x94\x1b\x47\x69\xf5\xe3\x68\x21\xe0\x52\xd4\x3e\x50\xe9\x3d\xbc\x93\x2e\x6f\xb4\x0a\xd1\xd0\x7c\x01\x4e\xa1\xda\x3f\x52\x3c\xc0\xaf\x9f\x2b\x62\x2f\x7d\x56\xd3\x3e\x43\xcf\x8c\x5e\xaf\x58\x9f\x36\xe1\xe3\xc6\x59\x7c\xad\xa2\x01\x42\xcc\xc5\xd0\xcf\x5d\x30\x7a\xb9\x7e\xf4\x10\x6e\x0a\x68\xe9\xb1\x85\x2b\xe2\x55\x07\xf2\x9c\xb9\xd2\xc8\x23\xe6\x4a\x23\x4f\x97\x2b\x8d\x3c\x58\xae\x34\xa6\x09\xfe\x3f\xd1\x47\x46\xfe\xd3\xd5\xf9\x41\xcf\xfc\x72\xcb\xc6\x1a\xd0\x54\x7e\xdd\xd0\xf7\xbd\xa2\xbd\xd3\xaf\x52\xef\xe1\xf1\x66\xbc\xb2\x7f\xc8\x95\xfc\xcb\x97\x43\x8c\x8f\xc8\x43\x71\xf9\x23\x25\x62\xfc\x79\x5b\x25\x96\x6b\xec\xef\xcb\xe2\xff\x02\x00\x00\xff\xff\x58\x9e\x7d\xf0\xe2\x24\x00\x00")

func dataOpenwrtWin10SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10SpyDnsmasqConf,
		"data/openwrt/win10/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin10SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/spy/dnsmasq.conf", size: 9442, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x3d\x73\x1b\x47\x0c\x86\x7b\xfd\x8a\x9d\x51\x93\x14\x7c\xb9\xc0\x7e\xbb\x4b\x22\x27\xa3\x22\xb6\x87\x76\xc6\xb5\x4c\x51\x31\x13\x99\xe4\x90\xa7\x51\x94\x5f\x9f\xc1\xf2\x4e\x92\x9b\x00\x57\x9c\x1a\x3d\xc4\x00\xef\x2e\xbe\xf6\xf2\xf2\xd2\xed\x0f\x9b\xdd\xe3\x71\x70\x8f\xdb\x1d\x79\x77\x3a\x3c\xb9\x1f\x96\x9b\x61\xbd\xbc\xdb\x1e\x37\x8f\x37\xf7\xf7\x78\x38\x6d\x8e\x3f\x5e\x08\xfa\xfb\xfe\xb8\x71\xdb\xdd\xdd\xfe\x8d\xfb\x3a\x0c\x87\xd3\x9b\xe5\xf2\xcf\xed\xf0\xf5\xe1\x0b\xd6\xfb\x6f\xcb\xf5\xf1\xe6\xdf\xa7\xc5\xb7\x9b\x7f\x96\x9f\xb7\xbb\xdb\xfd\xe3\xe9\xe3\xe1\xe9\xe7\xfb\xfd\xfa\xef\xcd\xf1\xe2\xe2\xd2\x6d\x76\x77\xfb\xe3\x7a\xe3\x8e\xfb\x87\x61\x73\x74\x57\xef\x3e\x5e\x6c\x0f\xc3\xcd\x97\xfb\xcd\xc9\x2d\x06\xb7\xbb\x19\xdc\xe2\xda\x7d\x58\xbd\x5d\xbd\xff\xe3\xd3\xf5\xbb\xdf\xdc\xe2\xe0\x86\xf5\xc1\x2d\x16\xb7\x87\xfd\x71\x70\x29\xb8\xc5\x5f\x6e\xf5\xf6\xea\x7a\xf5\xf6\x97\x4f\x6e\xb1\x18\xf6\x0b\xf9\xc7\xc9\xa5\xa0\x5b\x7a\xb8\x35\x5a\xba\xb8\x74\xc7\x87\xfb\xcd\xe9\x95\xc9\x6b\xf7\xeb\xfb\xd5\xe7\x9f\x56\x57\xf2\xb3\xab\xd5\xfb\x0f\x6e\x71\xeb\x28\xa0\x64\x30\x55\x10\x15\x2b\xdc\x40\x8d\xec\x30\x93\xb7\xc0\x0d\x1c\x1a\x72\x33\xb0\x95\x90\xf0\x9d\x5e\xff\x47\x36\x70\x64\x03\x4b\xbe\x20\xa1\x56\x0d\xe5\x80\x56\x90\x09\x14\x54\xc9\xce\x2c\xfb\x86\x66\x62\x1b\xc8\x83\x54\x71\x27\xb4\x21\x46\x3b\x9b\xad\x2c\x65\xf9\x8c\x30\x13\xd8\x5b\x82\x23\xcf\x88\x60\xfd\xdc\x46\x96\x09\x16\x87\x05\xa5\x94\x40\x51\xbd\x66\x9d\x0e\xa0\xca\x20\x56\xe3\x8b\x1e\xb9\x21\x7a\x50\x52\xc3\x8b\x5e\x6e\x3b\x81\x8a\xc5\xac\xa0\xac\x07\xf7\x4c\x52\x56\xef\xaf\xb0\x05\xcc\x0d\x7e\xc9\x16\xcb\x55\x74\x68\x88\x6a\xbe\x89\x00\x3d\x3b\x50\xd4\xd4\x98\xd8\x08\x4a\x56\xc3\xcc\x88\x16\x7d\x49\xac\xc6\x06\x66\xf5\x9c\x47\x9a\x23\x81\xa2\x9a\x4c\x9d\x4e\x20\x43\x2e\x75\xb4\x80\xa2\x18\xb7\xb9\x51\x40\x89\xc0\x26\x35\x98\xba\x69\xaa\xea\x71\xa7\x1e\x19\x02\x23\xa9\xf1\x25\xb9\x40\xdd\x61\x04\x35\xf7\x5e\xc1\xfa\x09\x3e\xc3\x52\x02\x92\x89\x96\x3b\xca\x30\x04\xf8\x02\x93\x7e\x3d\x9e\xe9\x00\x0a\x26\x47\x4a\x15\xbb\x96\x53\x9c\x68\x39\x45\x32\xf9\x2d\xb4\x7c\x6a\x29\x98\xe0\x16\x2c\xf5\x76\xa4\x25\x48\x36\x9d\x63\x95\x34\x64\x50\x30\x99\xee\x74\x02\x7b\x1b\x5d\x90\xbd\xb4\x4c\x0d\xce\x11\x11\x19\xe4\x55\xa1\x3b\xc9\xc1\x54\xc0\x72\x42\x68\x3d\xbb\x38\xe8\x86\x13\x12\x83\x33\x58\x2d\x60\x67\x94\xbc\xb7\x7a\xd1\x6f\x1e\x19\x5a\xeb\xe8\x84\xcc\x43\x06\xd1\x12\xe4\x28\x64\x24\x32\xb9\x7c\x56\xc3\x24\x44\x42\x8c\x86\xa2\xf1\x82\x9a\x22\xeb\x28\x79\xa3\xb3\x9d\x55\xab\xcb\x99\x95\x3e\xa5\x57\xfc\x33\xdb\x7b\x8f\x31\xb4\xce\xaa\xe9\xfc\x8a\x55\x53\x6e\x64\x83\x47\xb2\xfa\x5b\x32\x9a\x91\x65\x7b\x66\x08\x9d\xd8\x46\xcb\xa4\xd7\x7a\x29\xa4\xa0\x2a\x57\x0a\xa4\xca\x36\xcb\x98\x43\x3e\xa2\xf7\x85\x82\xa2\x4f\xea\x02\x8b\xc6\x05\xd9\x66\x59\x60\x59\x2d\xac\x70\xf4\xa2\xa0\x91\x66\xae\x96\xf5\xe2\x05\x66\xaf\x2f\x18\x23\x1d\x0a\xc8\xb0\xe4\x08\x2d\x17\x0f\xd4\xd4\x7e\x36\xc2\x2c\x03\x92\x7e\xa5\x3b\x2d\xb3\x2a\xeb\xa9\x32\xb2\xa1\x1a\x0a\xdc\xc8\x26\x99\x63\x4c\x2e\x33\x79\x44\x14\x7d\xed\x9c\x58\x8f\x6a\x86\x99\x18\x1c\x4d\x67\x28\xba\x85\x04\xd6\xc7\x3f\x22\x02\xcb\xbe\x23\x6b\xc1\x0c\x98\x0c\x41\xbe\xd0\x86\x0d\xe9\x3b\xda\xec\x76\x8e\xa6\x9a\x40\x81\xc4\x07\x99\xe2\xe7\xe0\x32\x5e\x1a\x9e\x10\x22\xa8\x78\x04\x6f\xca\x99\x57\xb4\x21\xd5\x47\x5a\x5a\xb2\xde\xe0\x26\x9a\x7c\x36\x86\x39\xf1\x32\x35\xce\xa1\xa3\xda\x15\x5f\xd3\x4d\xaf\x7f\xcf\x74\x9d\xe5\x49\x9d\xe5\x49\x45\x31\x9f\x4f\xf7\x64\x86\x2b\x44\xf3\x24\xa7\x84\x64\x97\x85\xfd\x1c\x59\xd8\xcf\x91\x85\xfd\x1c\x59\xd8\xcf\x39\xce\x52\x0d\x8f\x44\x2f\x74\xb3\x54\xc3\x89\xae\x72\x55\xcc\x61\x72\x48\x86\xed\x45\xba\x35\x51\x46\x25\x93\xde\x65\x1c\xd7\x4d\xa6\x53\x91\x29\xc6\x38\xc4\x4c\xb4\x31\x91\xcf\x34\x79\xdb\x53\xc9\x84\xb3\x69\xda\x18\xe1\x60\xdb\x1f\x46\x5c\x34\x99\x85\xcf\x08\x34\x43\xfe\x1a\xd1\x12\xc1\xfa\xec\x3a\xc2\x8d\x2c\xbd\xfb\xcc\x4a\x91\xa5\x6a\xf5\xf8\x4c\x5b\x9d\x3e\xd3\xfa\x44\x35\xd2\x14\xc0\x86\xa7\xee\x91\x66\x82\xdd\x34\x47\x4b\x4a\x8e\x70\x6c\x26\xad\x73\x45\x96\xfc\xb2\x3c\x64\x8d\x30\xc5\x0c\xc3\x04\x36\xc1\x32\x9e\x58\xe1\xc2\x28\x36\x37\xce\x4f\x04\xfa\xd2\xd4\xe1\xd0\x37\xee\x6c\xb3\x1c\xce\xed\x46\x7f\xca\xa2\x46\x3d\x57\x48\xb6\x48\x5d\xe9\x4e\x17\xb0\xaf\x96\xc7\xe1\x67\x9c\xc4\x17\xfd\x8a\x74\xbc\x21\x45\x24\xbd\x7f\x34\x29\x21\x15\x9c\x6c\x75\x41\x76\xac\x5c\x41\x39\x5b\xa6\x41\x96\x65\xb6\xb5\xde\x41\xc4\xfa\x7f\x01\x00\x00\xff\xff\xb1\x80\x32\xe4\x3e\x1b\x00\x00")

func dataOpenwrtWin10SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10SpyFirewallUser,
		"data/openwrt/win10/spy/firewall.user",
	)
}

func dataOpenwrtWin10SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/spy/firewall.user", size: 6974, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd2\x4d\x53\xf2\x30\x10\x07\xf0\x3b\x9f\xa2\x33\x5c\x9e\xe7\xc0\x86\x00\xe3\x08\x33\x5e\xbc\x7b\xf2\xe0\x39\xe4\xa5\x64\x48\x93\x98\xdd\x52\xeb\xa7\x77\x90\x0a\xa2\xb6\x29\xe7\xfd\x6d\x77\xf3\xdf\x4e\xa7\xd3\x22\x44\xed\x9b\x44\x45\x63\x3d\x9f\x17\x75\x54\x82\x74\xf1\x8f\x69\x92\x4c\x79\xac\x04\xbe\x82\x0c\xde\xfc\x9f\x1c\xf1\x53\x48\xba\xb0\xde\x84\x4d\xb1\x23\x8a\xb8\x61\xac\xb4\xb4\xab\xb7\x20\x43\xc5\x64\x12\xef\xed\xac\x12\x6f\xec\xc5\x7a\x15\x1a\x7c\x8e\xed\xa3\x0b\x72\xaf\xd3\x64\x82\x3a\x1d\x74\x7a\x60\x7c\xb5\x36\x33\x0e\x0e\x9a\x93\x39\x4d\xfc\xec\xbf\x98\xfb\x35\xcf\x99\xc5\x7c\x91\x27\x77\x79\xc3\xd5\x3c\x6b\xe4\x32\x4b\x8c\xca\x11\x51\x83\x0a\x8d\x77\x41\xa8\x0c\x3b\xac\x46\x49\x49\x4e\x0d\x4e\x54\x16\xa3\x13\xad\x14\x24\x5c\x28\xa1\x8a\x50\x59\x99\x02\x06\x43\x3f\xa0\x03\xa5\x9d\x3d\xe8\xd4\x0e\xa9\xaf\x9d\x72\xf5\x81\x95\x74\x75\x5c\x19\xfb\x3e\x61\xf4\x02\xba\xb6\x1b\x05\x88\xbd\x50\x1e\xc1\x6b\xfa\x8e\x97\x97\x87\x29\x8c\xbf\x1e\x07\x1e\x05\xc9\x81\xa6\xfe\x34\x4c\x09\x0a\x61\xcb\x47\x9d\xca\x94\x63\x8f\x7a\x9e\x76\x6d\xae\x36\x44\x87\x99\x94\xfa\xc4\x9f\x29\x21\x09\x42\xa3\xf9\xc0\x5d\x3a\x72\x43\xf4\xe7\x8e\xfe\x8f\x92\xab\x61\xdc\x9f\x37\x32\xbb\x6c\xa9\xab\x84\x54\xb2\x8f\x00\x00\x00\xff\xff\x6d\x9e\x36\x8f\xfb\x04\x00\x00")

func dataOpenwrtWin10UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10UpdateDnsmasqConf,
		"data/openwrt/win10/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin10UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/update/dnsmasq.conf", size: 1275, mode: os.FileMode(438), modTime: time.Unix(1498767414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd6\x3d\x6f\xdb\x3c\x10\x07\xf0\xdd\x9f\xe2\x00\x2f\xcf\x33\xf0\xa4\xe3\x8b\x5e\xb2\xb5\xb5\x5b\x78\x68\x1c\x28\x29\x32\x2b\x32\xdd\xa8\x75\x24\x81\xa2\xe0\xa6\x9f\xbe\x90\x95\xa6\xf2\xc4\xd3\xec\x9f\x89\x3f\xef\x78\x67\xaf\xd7\x6b\x68\x3b\xdb\x9c\x9d\x87\x73\xdd\x50\x0c\x43\x77\x28\xbd\x85\xff\x22\xeb\xab\xe8\x58\x3b\x7b\x2e\x4f\x27\x1c\x7a\xeb\xfe\x5f\x8d\xfa\x6b\xeb\x2c\xd4\xcd\xb1\xbd\x81\x67\xef\xbb\xfe\x26\x8a\xbe\xd7\xfe\x79\x78\xc2\xaa\x7d\x89\x2a\x57\xfe\x7e\x15\x2f\xe5\xaf\xe8\xb1\x6e\x0e\xed\xb9\xbf\xef\x5e\x3f\x9e\xda\xea\xa7\x75\xab\xd5\x1a\x6c\x73\x6c\x5d\x65\xc1\xb5\x83\xb7\x0e\x36\xb7\xf7\xab\xba\xf3\xe5\xd3\xc9\xf6\x20\x3c\x34\xa5\x07\xb1\x83\xbb\x62\x5b\xec\xbf\x3d\xec\x6e\xbf\x80\xe8\xc0\x57\x1d\x08\x71\xe8\x5a\xe7\xc1\x28\x10\x3f\xa0\xd8\x6e\x76\xc5\xf6\xd3\x03\x08\xe1\x5b\x31\x7e\xd0\x83\x51\xe1\x93\x86\x03\xf3\xa4\xd5\x1a\xdc\x70\xb2\xfd\xec\xc8\x1d\x7c\xde\x17\x8f\x1f\x8a\xcd\xf8\xb5\x4d\xb1\xbf\x03\x71\x00\x52\x48\x71\x8a\x1a\x4d\xcc\xa7\x32\x44\xe5\x48\x15\x52\x96\x23\xc9\x64\x89\x36\xe9\x22\x9d\x85\x74\x62\xd0\x18\x24\x95\x61\x1c\x49\xcd\xd4\x89\xe2\xe9\x04\x89\x72\x24\xad\x39\xb9\xaf\x74\x38\xf7\x4c\x67\xf9\x12\x9d\x33\x1a\x49\x28\x8d\x42\xa5\x58\x5d\xd7\x48\x69\x8c\x86\x90\xb2\xe0\x25\xaf\x74\xf0\x92\x73\xcd\x89\xfd\xae\xa5\x0e\x3e\xaa\x2b\xbd\x24\xb7\xd4\xfc\xdc\x0a\x65\xb0\x37\x33\xac\xf8\x77\xe4\xbd\xd7\xbf\x9c\xc8\x60\xc2\x3e\xfc\xa2\x83\x33\xfc\xae\x13\xb3\xa4\x26\x13\x67\x57\xe5\xc2\x0d\x2d\xe3\x2a\xc8\x4d\x3a\x8d\xbd\x42\x19\x87\xab\x38\x69\xa9\x63\x0c\x8f\xda\x0c\x4b\x19\x2e\xf9\xa8\x13\x4c\xd3\x71\x05\x2d\xc1\xbc\x1c\x13\xd6\x4b\x62\xe8\x70\xad\x67\x78\x49\x66\x46\xd3\x27\x9c\x27\x68\x78\x4d\x99\x2c\x37\x44\x9e\x20\xc9\xf0\xdb\xc8\x09\xa5\x92\x98\x8d\x23\xb9\x04\x87\x63\xfc\xc3\x8c\x61\x9c\xe1\xf0\x2c\xbe\x61\x52\x39\x6f\x2f\x5c\xbc\xc6\x54\x22\x65\xcc\x4b\xbe\xe9\xf0\x62\x9d\x6b\x66\x4d\x26\x1d\x5e\xf1\x72\xfc\x7f\x31\xfe\x96\x69\x46\xb9\x67\x38\xa1\x3f\x01\x00\x00\xff\xff\x8d\x8b\xb2\xf8\x06\x0a\x00\x00")

func dataOpenwrtWin10UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10UpdateFirewallUser,
		"data/openwrt/win10/update/firewall.user",
	)
}

func dataOpenwrtWin10UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/update/firewall.user", size: 2566, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x4f\x03\x31\x0c\x85\xf7\xfe\x8a\x48\x5d\x60\xc0\x91\x58\x90\x2a\xb1\xb0\x33\x31\x30\xa7\x8e\xef\x6a\x91\xd8\x47\xec\x5e\x5a\x7e\x3d\x2a\x48\x88\x43\x2d\x88\xd1\xef\x7b\x7e\xc3\xb7\x5e\xaf\x83\x4e\x24\xbd\x79\xe8\x2c\x77\x81\x0e\xde\x52\xb8\x8a\xe4\x18\xb3\x58\x4d\xf6\x0a\xa8\x32\x5c\xaf\x4e\xd5\x47\x6d\x14\x58\x06\xdd\x84\x9d\xfb\x64\x9b\x18\x47\xf6\xdd\x7e\x0b\xa8\x35\x62\x4b\x6f\xc7\x9b\x9a\x0e\xf1\x99\x25\x6b\xb7\xa7\xe9\xf8\x50\x14\x5f\xa8\xad\x56\x46\x6d\xa6\x76\x1f\x13\x3a\xcf\xc9\x59\x05\xac\x18\x54\xc6\xa6\xa6\x83\x7f\x2c\x7c\xb5\x50\x6f\x7f\xc5\xad\x5c\x42\xb9\x66\xa8\xe4\xe9\x74\x33\xd2\xc5\x89\x2c\x06\xd5\x06\x17\x34\x5e\x92\x11\xb6\x2c\xe3\xcf\xac\xf0\x4c\xcb\xac\xe8\xc8\x72\x26\x3f\xbf\xea\x5c\x09\xfa\xa7\x97\x25\x99\x53\xe1\xfc\xa7\x91\x6e\xa8\xe2\x90\xa6\xe9\xff\x15\xa0\x3c\x92\xed\xd9\x09\x84\xfc\xdb\x43\xef\x4b\x07\xef\x01\x00\x00\xff\xff\x6e\x7e\x1a\xa7\x0f\x02\x00\x00")

func dataOpenwrtWin7ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7ExtraDnsmasqConf,
		"data/openwrt/win7/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin7ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/extra/dnsmasq.conf", size: 527, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\xb1\x72\x82\x40\x10\xc6\xf1\x9e\xa7\xf8\x66\x68\x92\xe2\x16\x0e\x0e\x45\xbb\x24\x98\x0c\x45\xd4\x39\xcd\x58\x23\x9c\x91\x04\xb9\x9b\xe3\x18\x34\x4f\x9f\xa1\x4b\x2a\xac\xf7\xb7\xff\xd9\xf5\x7d\x1f\xda\xa8\x76\xb0\x0e\x43\xdd\xce\xa1\xae\xce\x16\x78\x08\x94\x2b\x83\x53\x6d\xd5\x50\x34\x0d\xf5\x9d\xb2\x8f\xde\x68\xdf\xb5\x55\xa8\xdb\x93\x5e\xe2\xec\x9c\xe9\x96\x41\xf0\x59\xbb\x73\x7f\xa4\x52\x5f\x82\xd2\x16\x3f\x37\x76\x29\xae\xc1\xa1\x6e\x2b\x3d\x74\x3b\x73\x7b\x6e\x74\xf9\xad\xac\xe7\xf9\x50\xed\x49\xdb\x52\xc1\xea\xde\x29\x8b\x6c\xbd\xf3\x6a\xe3\x8a\x63\xa3\x3a\x30\x87\xb6\x70\x60\x39\xb6\x72\x25\x37\x1f\xfb\x7c\xfd\x06\x66\xe0\x4a\x03\xc6\x2a\xa3\xad\x43\x12\x83\x7d\x41\xae\xb2\x5c\xae\x5e\xf6\x60\xcc\x69\x36\x0e\x3a\x24\xf1\x74\xa9\xaf\xee\x2c\x79\x3e\x6c\xdf\xa8\xee\x4f\x32\xc7\xeb\x46\x1e\x9e\x64\x36\xae\x65\x72\xb3\x05\xab\xc0\x63\x4a\x43\xe2\x11\x25\x62\x8a\x8a\x90\x38\x4f\x89\x87\x31\xcd\xa7\xec\x4c\x90\xa0\x44\x50\xf4\xef\xa9\x09\x3a\x79\xc1\x2c\xa1\x24\xa2\x45\x4a\x51\xcc\xef\xb3\x3c\x4c\x89\x4f\x87\xa3\x70\x4e\x62\x46\x7c\x21\x88\x8b\xdf\x00\x00\x00\xff\xff\xb2\xac\x49\x2b\x4f\x02\x00\x00")

func dataOpenwrtWin7ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7ExtraFirewallUser,
		"data/openwrt/win7/extra/firewall.user",
	)
}

func dataOpenwrtWin7ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/extra/firewall.user", size: 591, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xbd\x6e\xea\x40\x10\x85\x7b\x9e\xc2\x12\xcd\xbd\x05\xbb\xf8\x07\x10\x48\x69\xd2\xa7\x4a\x91\x7a\xd8\x1d\x9b\x15\xde\x99\x65\x77\xc0\x38\x4f\x1f\xa1\x28\x4a\x40\xd8\x09\xf5\xf7\x9d\x33\x9a\x33\x9d\x4e\x33\x0e\x48\x5d\x94\xac\x73\xb4\xca\x52\xe8\xb3\x7f\x1a\xc5\x68\x4b\xc9\x43\x3a\x28\xc3\x54\xff\x9f\x5c\xc4\x17\x8e\x98\x39\xaa\x79\x93\xed\x44\x42\xda\x68\xdd\x38\xd9\x1d\xb7\xca\xb0\xd7\x26\xc2\x7b\x3f\xf3\x70\xd6\x6f\x8e\x2c\x77\xe9\x35\xf4\xcf\x2d\x9b\x3d\xc6\xc9\x24\x61\x3c\x61\x7c\xd2\xc6\xa6\x3c\xaf\x4a\xd5\x32\xa9\xb6\xa5\x4e\x11\x8a\xbe\xa2\xc5\x72\x3d\x4c\x8b\x79\x55\x54\xaa\x35\xfd\x20\x2e\x17\xa3\x78\x99\x0f\xe3\xb2\x5c\x8f\xc0\x6a\xe4\x6e\x35\x5f\xa9\x3a\xc2\x3d\xc8\x3e\x80\xe0\xd9\xec\x80\x1a\xcc\x95\x44\xa8\x6b\x67\x3c\x10\x34\x18\x6f\xdc\xbe\x50\x09\x45\x1c\x35\x49\x59\x10\x50\xde\x99\xc8\x89\x6b\xb9\x0c\xac\x60\x0f\x96\xd2\x75\xc6\x6e\x17\x0f\x67\xf0\xa8\x4e\x1c\x05\xcf\x77\x02\xdf\x56\x83\xfc\x70\xf3\x97\x3f\xeb\x1c\x8d\x96\xa7\xd0\x13\x4a\x31\x8e\xf1\x18\x39\xe0\x0f\xe7\xee\xc9\x83\x57\x82\x2d\x7a\x94\xd8\x0f\xf5\x5d\x04\xc3\xde\x03\xd9\xbf\xc8\x11\x2d\x2b\x17\x4e\xcb\x21\xe5\x73\xbe\x5f\xbf\xec\x40\x12\xd3\x0d\xfd\x08\x00\x00\xff\xff\x41\xcc\x82\xeb\x72\x03\x00\x00")

func dataOpenwrtWin7SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7SpyDnsmasqConf,
		"data/openwrt/win7/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin7SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/spy/dnsmasq.conf", size: 882, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\x31\x6f\xdb\x3c\x10\x06\xe0\xdd\xbf\xe2\x00\x2f\xdf\x37\xe8\xc4\x3b\x92\xa2\x94\xad\xad\xd3\xc2\x43\xe3\x40\x49\x91\xd9\x91\xe9\x46\xad\x23\x09\x14\x0d\xd7\xfd\xf5\x85\x9a\xc6\x55\xa7\x63\x06\x4d\x7a\x78\xa0\x5e\xbe\xa0\x96\xcb\x25\xf4\x83\xef\x4e\x21\xc2\xa9\xed\x1c\x8c\xc3\x19\xfe\xcb\x7d\x6c\xf2\x7d\x1b\xfc\x69\x7b\x38\xe0\x71\xf4\xe1\xff\xc5\x24\x3f\xf7\xc1\x43\xdb\xed\xfb\x2b\x78\x8a\x71\x18\xaf\xf2\xfc\x6b\x1b\x9f\x8e\x8f\xd8\xf4\xcf\x79\x13\xb6\x3f\xcf\xd9\xf3\xf6\x47\xfe\xd0\x76\xbb\xfe\x34\xde\x0d\xe7\xf7\x87\xbe\xf9\xee\xc3\x62\xb1\x04\xdf\xed\xfb\xd0\x78\x08\xfd\x31\xfa\x00\xab\x9b\xbb\x45\x3b\xc4\xed\xe3\xc1\x8f\x90\x45\xe8\xb6\x11\xb2\x35\xdc\xd6\xd7\xf5\xe6\xcb\xfd\xfa\xe6\x13\x64\x03\xc4\x66\x80\x2c\xdb\x0d\x7d\x88\x60\x35\x64\xdf\xa0\xbe\x5e\xad\xeb\xeb\x0f\xf7\x90\x65\xb1\xcf\xa6\x17\x23\x58\x2d\x4f\x3a\xee\x12\x27\x2d\x96\x10\x8e\x07\x3f\xce\x46\xae\xe1\xe3\xa6\x7e\x78\x57\xaf\xa6\x65\xab\x7a\x73\x0b\xd9\x0e\x48\xa3\xab\x90\x75\x85\x45\x95\x60\x4b\x42\x5b\x21\x1b\x96\xac\x51\xe8\x1c\x32\x17\xc8\x46\x1c\x3c\xc3\x56\x25\x60\xa2\x12\x49\x15\x48\x5a\xd4\x96\x90\x0c\xa1\x66\xb4\x24\x5a\x46\x2a\x0c\xb2\x51\x68\xc5\x3d\x5f\x30\x21\x2b\x9b\xa2\x5d\x89\x64\xdc\x34\x3e\x55\x5b\x42\x26\x31\xea\x57\x3d\x3d\x45\x2a\xae\x34\x52\xb2\x66\xd6\xc8\x3a\x05\x97\x0e\x0b\x85\xa4\x9c\x84\x0b\x8b\xd6\xa2\x31\x48\xaa\x7c\x83\x15\x8f\xe5\xc5\x12\x69\x94\x83\x9b\x59\xf1\xe3\x5e\x2c\x5b\x46\x27\xf6\xe8\xaf\xad\xde\x30\x97\x2a\xb1\x17\x45\x81\x44\x15\xd2\x14\x85\x95\x23\x9e\x6b\x39\xe4\x99\x2e\xe5\x98\x67\x5a\xde\x37\x29\x83\x66\x4a\xd9\x61\x21\x76\xee\x82\x2b\x64\x31\xea\x3f\x98\xb9\x44\x2b\x66\x3d\xc3\xac\xc4\x76\xbc\x6a\xed\x90\x12\xee\x46\x22\x64\x26\xe4\x2a\xa1\x4c\x33\xcc\x09\xdb\xd6\x06\xc9\x29\xd4\x6a\x5a\x94\xaa\xa7\xbb\xc3\xc8\x61\xcf\xb5\xd8\xa8\x7f\xb4\xd8\xa8\x8b\xd6\xc8\x09\xff\x16\x87\x44\x0e\x59\xdb\x84\x5b\x8c\x2a\xfa\x7d\x30\xac\x4a\x24\x2e\x7e\x05\x00\x00\xff\xff\xad\x14\x82\xb3\xff\x07\x00\x00")

func dataOpenwrtWin7SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7SpyFirewallUser,
		"data/openwrt/win7/spy/firewall.user",
	)
}

func dataOpenwrtWin7SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/spy/firewall.user", size: 2047, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x31\x4f\xc3\x30\x10\x05\xe0\x3d\xbf\xc2\x52\x16\x18\x6a\x93\x10\xa9\x55\x25\x16\x76\x26\x06\x66\xc7\x3e\xa7\x16\x89\xcf\xd8\x17\x4c\xf9\xf5\x08\x52\x05\x18\x6a\x67\xf5\xfb\x7c\xef\xd5\x75\xcd\xd0\x83\x4b\x81\x58\xb2\x6e\xcf\x66\xaf\x25\x01\xbb\x11\x40\x4a\x68\x17\x27\x19\xdf\xb8\x42\x67\x6e\xab\x6f\xfb\x84\x01\x98\x75\x06\x8f\xec\x44\xe4\xe3\x51\x88\xc1\xd2\x69\xee\xb9\xc2\x49\xa8\x20\x3f\xcf\xbb\x49\x7e\x88\x17\xeb\x34\xa6\xf8\xec\xcf\x8f\x23\xaa\x57\x08\x55\x15\x21\xbc\x43\x78\x10\xcd\xa1\xeb\x77\x0d\x1f\x79\x5a\xcc\xd2\xf8\xf3\x7f\x35\x6d\x2b\xf7\x65\xa3\x9a\xa2\xb9\x3f\x94\x48\x07\x50\x22\xd2\xc8\x22\x99\xb9\xc6\xe4\x46\x94\x3a\xc7\x7a\x6d\x4a\x97\x14\x8d\x3a\x0b\xd6\x9e\xc9\xaa\x80\x11\x0d\x5d\xc9\x73\x37\xe2\xa6\xb9\xa6\xbb\x2b\xcd\x35\xd0\xf2\xcb\xfb\x95\x3d\x66\xe0\x3a\xf2\xbe\xd9\xd4\xb8\xde\xf8\x6f\x1c\xd0\xaf\xc9\x7c\x5f\xa2\x4b\x82\x61\xf8\x93\xa4\x94\x1b\xf0\x15\x00\x00\xff\xff\x91\xff\x09\xc0\x08\x03\x00\x00")

func dataOpenwrtWin7UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7UpdateDnsmasqConf,
		"data/openwrt/win7/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin7UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/update/dnsmasq.conf", size: 776, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd4\xc1\x6e\x9c\x30\x10\x06\xe0\x3b\x4f\x31\x12\x97\xf6\xe0\x61\xc7\xc6\x06\x72\x6b\xbb\xdb\x6a\x0f\xcd\x46\x24\x55\xce\x04\xbc\x0d\x2d\xc1\xc8\x18\x6d\xd3\xa7\xaf\x68\xb7\xd1\xee\x69\xe0\xcc\xc7\xc8\xf3\xff\xb2\xe3\x38\x06\x37\xd8\xfe\xe4\x03\x9c\xda\x3e\x83\x69\x68\xaa\x60\xe1\x5d\x62\x43\x9d\x1c\x5b\x6f\x4f\x55\xd7\xe1\x34\x5a\xff\x3e\x9a\xf1\x57\xe7\x2d\xb4\xfd\xd1\xdd\xc0\x73\x08\xc3\x78\x93\x24\xdf\xdb\xf0\x3c\x3d\x61\xed\x5e\x92\xda\x57\xbf\x5f\xc5\x4b\xf5\x2b\x79\x6c\xfb\xc6\x9d\xc6\xfb\xe1\xf5\x63\xe7\xea\x9f\xd6\x47\x51\x0c\xb6\x3f\x3a\x5f\x5b\xf0\x6e\x0a\xd6\xc3\xf6\xf6\x3e\x6a\x87\x50\x3d\x75\x76\x04\x11\xa0\xaf\x02\x88\x3d\xdc\x95\xbb\xf2\xf0\xed\x61\x7f\xfb\x05\xc4\x00\xa1\x1e\x40\x88\x66\x70\x3e\x80\x56\x20\x7e\x40\xb9\xdb\xee\xcb\xdd\xa7\x07\x10\x22\x38\x31\x7f\x18\x41\x2b\x7e\xd2\xd4\x2c\x9c\x14\xc5\xe0\xa7\xce\x8e\x17\x23\xf7\xf0\xf9\x50\x3e\x7e\x28\xb7\xf3\x6f\xdb\xf2\x70\x07\xa2\x01\x52\x48\x9b\x0c\x53\xd4\x1b\x8e\xca\x99\x2a\xa4\xbc\x40\x92\x7a\x95\x36\x6b\xb4\xce\x56\xe9\x9c\xd3\x46\xa3\xd6\x48\x2a\x47\x22\xb9\x06\xa7\x2b\x30\xbf\xe2\x05\xce\x97\x62\xa3\x50\x4a\x5a\x83\xd9\x05\x49\xa5\x48\xd9\x06\x35\x21\x15\x6c\xe7\x6f\x5a\xa1\x5a\x8e\x73\xdc\x24\x92\x4d\xef\x3f\x27\xd2\x68\x16\x9f\x9b\x8c\x46\x99\xb2\xa5\x5f\xf3\x62\x15\xd7\x6c\xe2\xd7\x5c\xb1\x5c\x67\xa8\x0d\x16\x06\x49\xf2\xb8\x20\x94\x4a\x62\x3e\x07\xb9\x02\x1b\xbe\x9f\x0b\xcc\xe7\x7d\xc6\xa4\x8a\x45\x2b\x5e\x71\xbe\xfb\xbf\x3c\xc5\x4c\x22\xe5\x0b\x87\x9f\x35\x7b\x77\xae\xf4\xc2\x04\xff\x69\xfe\x3e\xc8\xf9\xad\x34\xf3\xdb\x80\x3a\xff\x13\x00\x00\xff\xff\x5f\x24\x5b\x78\x79\x06\x00\x00")

func dataOpenwrtWin7UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7UpdateFirewallUser,
		"data/openwrt/win7/update/firewall.user",
	)
}

func dataOpenwrtWin7UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/update/firewall.user", size: 1657, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\xdb\x40\x0c\x85\x77\xff\x0a\x01\x5e\xda\x41\x14\x92\xa9\x08\xd0\xa5\x7b\xa7\x0e\x9d\xcf\x77\x94\x4c\x44\x47\x5e\x48\x5a\x27\xf7\xd7\x17\x72\x83\xb6\x4e\x7c\x81\x47\xe9\x7d\x7c\x47\x3e\xbc\xfd\x7e\xdf\x49\x41\xae\xea\x5d\x25\xfe\xf2\xd0\xe1\xea\x1a\xba\x4f\x03\x7a\x1c\x12\x5b\x0e\xf6\x02\x51\x78\xfc\xbc\xdb\xd8\xef\xa2\xd8\x11\x8f\xf2\xd4\x1d\xdd\x8b\x3d\x0d\xc3\x44\x7e\x3c\x1d\x20\x4a\x1e\xa2\x86\x5f\xe7\x3e\x87\x75\xf8\x49\x9c\xa4\xda\x8f\x72\xfe\x36\x4b\x7c\x46\xdd\xed\x0c\x75\x41\xfd\x3a\x84\xe8\xb4\x04\x27\xe1\x7e\x79\x04\x9b\x0d\x32\x45\x15\x93\xd1\x2f\x26\xff\xc0\x52\x70\xed\x75\x84\x6c\x7c\xad\xa4\x9c\x20\xa3\x87\xed\x9b\x22\x36\x1d\x12\x1b\x64\x1b\x9d\xa3\xd1\xb5\x32\x12\x07\x8e\x08\x7f\x1d\x2e\x8f\xc1\x81\x78\x7a\x03\x8a\xa4\xc0\x29\x29\xf1\x33\x38\xcd\xd8\x26\xb5\x1f\x15\xda\x4b\x4f\x37\x66\x26\x98\x69\xc1\xeb\x7f\x94\x27\x30\x3f\x80\xf5\xef\x2c\x66\x99\x88\x6f\x8c\xdc\xbe\x91\x71\xf5\xfe\xff\x03\x9b\x39\xbd\x9c\x50\xcf\x50\x54\x12\xc4\x6c\xa0\xde\x02\x5f\xdd\xa0\x62\xf0\x23\x6a\x13\x73\x51\xc4\x34\xe1\x98\x20\xd9\x0a\xb9\xb4\x48\xa7\x8c\x50\xff\x94\xe5\x5a\x59\xc2\x4c\xe9\x9e\x9a\xd4\xed\x34\xc5\x02\x96\x83\xba\x45\x45\xe4\x26\x1b\xdc\x84\xc1\x71\xc6\x8c\xae\xe7\x26\x97\x62\x73\xe5\x6a\x51\xd8\x3f\xcc\xb3\x89\xc0\x16\x8a\x9d\xc8\x11\x18\xfd\xed\xc0\xc3\x1d\xa6\x8f\x1f\x33\xb5\x36\x0a\xbf\x29\xaf\x39\x1b\x06\x8d\xc7\x8b\xfc\x3b\x00\x00\xff\xff\x76\x74\x20\x1d\xff\x03\x00\x00")

func dataOpenwrtWin81ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81ExtraDnsmasqConf,
		"data/openwrt/win81/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin81ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/extra/dnsmasq.conf", size: 1023, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\x3f\x93\x9b\x30\x10\x05\xf0\x9e\x4f\xb1\x33\x34\x49\xa1\x45\x2b\xc4\x3f\x77\x49\x70\x32\x14\xb1\x3d\xd8\x19\xd7\x18\xe4\x98\x3b\x8c\x18\x21\x06\xfb\x3e\xfd\x0d\xdd\x5d\x25\xae\xd6\x4f\x6f\xf6\x3d\xdf\xf7\x41\x0f\xaa\x9f\x8d\x85\xb9\xed\x53\x02\xf5\xb0\xa6\x82\x6f\x81\xb2\x75\x70\x6d\x8d\x9a\xab\xae\xc3\x69\x54\xe6\xbb\xb7\xe0\xbf\xda\x28\x68\xfb\xab\xde\xc0\xcd\xda\x61\xdc\x04\xc1\xff\xd6\xde\xa6\x0b\xd6\xfa\x1e\xd4\xa6\x7a\x7b\xb2\x7b\xf5\x08\xce\x6d\xdf\xe8\x79\x3c\x0e\xcf\x9f\x9d\xae\x5f\x95\xf1\x3c\x1f\x54\x7f\xd5\xa6\x56\x60\xf4\x64\x95\x81\x7c\x77\xf4\xda\xc1\x56\x97\x4e\x8d\xc0\x2c\xf4\x95\x05\x56\xc0\xa1\xdc\x96\xfb\x7f\xa7\x62\xf7\x07\xd8\x00\xb6\x1e\x80\xb1\x66\xd0\xc6\x42\x14\x02\x7b\x81\x72\x9b\x17\xe5\xf6\xd7\x09\x18\xb3\x9a\x2d\x0f\x23\x44\xa1\x3b\x69\x6a\x56\x26\x79\x3e\x98\xa9\x53\xe3\x87\xc8\x02\x7e\xef\xcb\xf3\x8f\x32\x5f\xbe\xe5\xe5\xfe\x00\xac\x01\x0a\x31\xe5\x48\x02\x23\xe9\xa2\x92\x23\x51\x8a\xc4\x43\x4c\x56\xdb\x18\x29\xe4\x2e\x1d\x4b\x94\x18\x49\x14\x62\xb5\xfc\x34\x96\x83\x3a\x9b\xc5\x11\x46\x02\x89\xa7\x28\xb2\xf5\x36\xfa\x82\x25\xf7\xbd\x14\xd2\x52\x0b\x63\x42\x1e\x08\xe7\xcd\x82\x4b\x4c\x32\xa4\x2c\x41\xc1\x9d\x0b\x0b\x9e\xa0\x8c\x91\x32\x89\x24\xdf\x03\x00\x00\xff\xff\x2a\x33\x85\x11\x31\x03\x00\x00")

func dataOpenwrtWin81ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81ExtraFirewallUser,
		"data/openwrt/win81/extra/firewall.user",
	)
}

func dataOpenwrtWin81ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/extra/firewall.user", size: 817, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd4\xb1\xaf\xd3\x30\x10\xc7\xf1\xbd\x7f\x45\xa4\x2e\x30\xd4\x8e\xdd\xbc\xd2\x3e\x89\x85\x9d\x89\x81\xf9\xb0\x2f\xa9\xf5\xe2\xb3\x6b\x5f\x9b\x86\xbf\x1e\x05\x24\x44\x81\x5c\xd7\x7e\xbe\x8d\xad\x9f\xa2\x6c\xb7\xdb\x26\x65\xa4\xa9\x70\x33\x05\x3a\x9a\xa6\xe6\xb9\x79\xa7\x91\x9d\xf6\x54\x23\xd4\x8b\x72\x89\xfa\xf7\x9b\xa5\xfc\x9c\x0a\x36\x81\xfa\xf4\xda\x9c\x99\x73\x7d\xd5\x7a\x08\x7c\xbe\x7e\x53\x2e\x45\xed\x0a\x7c\x9f\x77\x11\xee\xfa\x6b\x20\x9f\xa6\xfa\x25\xcf\x9f\xc6\xe4\xde\xb0\x6c\x36\x15\xcb\x0d\xcb\x47\x0d\xbb\xb6\x6d\x8d\x82\x5d\xac\xe8\x07\x54\x84\xac\x1f\xd1\x4a\xb8\x97\xb0\x93\xf0\x45\xc2\x83\x84\x1f\x24\x3c\x4a\x78\x12\xd0\xb4\x12\x4a\x0b\x99\xf5\x85\xfe\xf7\xab\xf3\xd5\xd8\xae\x53\x63\x22\x35\x8e\x34\xfd\xa3\xb6\xed\xda\x4e\x8d\x6e\x5e\x61\x63\xed\x49\xf8\xb7\xb1\x2f\x07\x91\x8f\x66\x9d\xf7\xfb\xd3\xda\xc9\x29\x66\x60\xbc\xbb\x33\xd0\x80\x46\x71\x81\xbe\x0f\x2e\x02\xc1\x80\xe5\xb1\xc5\xab\xba\xa5\xc2\x78\x57\x1e\x18\x54\x0c\xae\xa4\x9a\x7a\xfe\xf9\x5a\xfe\xae\x2a\x32\x07\x1a\xea\x6e\x0a\x24\x87\x79\x26\x64\x2b\x33\x8c\x2c\x07\x78\x2d\x29\xe3\x1f\x0d\xbc\x81\xa7\xfa\x78\xf3\x7a\x89\x8a\x71\xc4\x88\x5c\xe6\xd5\xe7\x31\x70\xed\xd1\xaa\x6b\xf6\xc0\xf8\x34\x9b\xea\x5a\xb2\x1c\x25\x2e\xb9\x04\x2e\xc5\x08\xe4\x9f\xdf\xeb\xd7\xe6\x4f\xe7\x5c\xbe\x2b\x2a\xe4\xdb\xe1\xaf\xe0\x47\x00\x00\x00\xff\xff\x62\x18\x2c\xed\x7c\x04\x00\x00")

func dataOpenwrtWin81SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81SpyDnsmasqConf,
		"data/openwrt/win81/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin81SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/spy/dnsmasq.conf", size: 1148, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\x31\x73\xda\x4c\x10\x06\xe0\x9e\x5f\xb1\x33\x34\xdf\x57\xe8\xe5\x76\xef\x4e\xa7\x73\x97\x04\x27\x43\x11\xdb\x23\x3b\xe3\x1a\x83\x1c\x93\x60\xa4\x91\xc4\x10\xe7\xd7\x67\x84\x63\xa2\x34\xd9\xa3\xa0\xe2\xd1\xcd\xed\xbb\xda\xd5\x74\x3a\xa5\xba\xa9\x76\x87\xb6\xa7\xc3\x66\x57\x30\x75\xcd\x0b\xfd\x37\xab\xfa\xd5\xec\x71\xd3\x56\x87\xe5\x76\x8b\x7d\x57\xb5\xff\x4f\x06\xfa\xb9\x6e\x2b\xda\xec\x1e\xeb\x0b\x7a\xea\xfb\xa6\xbb\x98\xcd\xbe\x6e\xfa\xa7\xfd\x03\x56\xf5\xf3\x6c\xd5\x2e\x7f\xbe\x64\xcf\xcb\x1f\xb3\xfb\xcd\x6e\x5d\x1f\xba\xdb\xe6\xe5\xfd\xb6\x5e\x7d\xaf\xda\xc9\x64\x4a\xd5\xee\xb1\x6e\x57\x15\xb5\xf5\xbe\xaf\x5a\x9a\x5f\xdd\x4e\x36\x4d\xbf\x7c\xd8\x56\x1d\x65\x3d\xed\x96\x3d\x65\x0b\xba\x29\x2f\xcb\xeb\x2f\x77\x8b\xab\x4f\x94\x35\xd4\xaf\x1a\xca\xb2\x75\x53\xb7\x3d\x79\x4b\xd9\x37\x2a\x2f\xe7\x8b\xf2\xf2\xc3\x1d\x65\x59\x5f\x67\xc3\x1f\x1d\x79\xab\x9f\xb4\x5f\x27\x9e\x34\x99\x52\xbb\xdf\x56\xdd\xe8\xc8\x05\x7d\xbc\x2e\xef\xdf\x95\xf3\xe1\xb1\x79\x79\x7d\x43\xd9\x9a\xd8\x22\x44\x88\x8d\xc8\x63\x82\x2d\x18\x1e\x7f\x5d\xf4\x5f\x32\x42\x9c\x68\x56\x2c\x62\x01\x17\xc1\x2e\x85\xc6\x23\x15\xd6\xac\x33\x08\x01\x22\x39\xc4\xa9\x95\x8d\xb0\x37\x1a\xf6\x0c\x76\x0c\x2b\xf0\xea\x2d\xbc\x80\x73\x07\x71\x06\x5e\xbd\xc5\x09\x33\xc4\xf8\x14\x1d\x0a\xb0\x0b\xc3\xf1\xa9\xda\x33\x84\xd5\x9e\xbc\xe9\xe1\x97\xa7\xe2\x68\xc1\xc9\x5a\xc4\x42\xd4\xf7\x68\xc0\x45\x40\x6e\xc0\x26\x68\x38\x77\x70\x90\x00\xbd\x83\x43\xc8\xd6\x1e\xc3\xe6\xa2\x48\xd6\x39\xd8\xe8\xda\xc3\x7b\x30\x0f\x61\x9c\x61\xd5\x96\x8c\xac\x1a\xdb\xab\x15\x2f\x70\x67\xd8\x78\x86\xe5\xa8\x87\x7c\xc2\x62\xf4\xea\x72\x30\x0f\x2b\xc0\x81\xbd\xde\xe9\xb1\xd6\x3b\x32\xd2\x85\x3a\x84\x63\xad\x17\xc9\xc6\xc1\x0d\x2d\x09\xc8\xd5\x57\xff\x84\x23\xf4\xfd\xf5\x1b\x8b\x14\x29\xfb\xf6\x0f\x4e\x08\xfb\x4d\xdb\x00\x4e\xd9\xfa\x0e\x1c\x0c\xac\x49\x3a\x7b\xac\x13\xbe\x13\x23\xad\xae\xff\xb1\x4e\x08\x70\x28\x8f\xf3\x63\xdc\xac\x7f\x5b\x5e\x79\x80\x58\x9f\xb0\xf3\xd8\x87\xe3\x38\x5a\x9b\x74\xf1\x41\xe7\xe0\xe8\x10\xf4\x04\x47\x58\x0f\x70\x84\xf5\x6b\x44\x3e\x36\x5d\x4c\x01\x16\xbd\xc6\x23\x8f\xf0\x06\xac\x0e\xd9\x08\x07\x75\x7e\x4f\x58\xc0\x46\x9f\xb1\x37\xed\xe0\xe5\x57\x00\x00\x00\xff\xff\x63\xf2\x70\xa7\xeb\x09\x00\x00")

func dataOpenwrtWin81SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81SpyFirewallUser,
		"data/openwrt/win81/spy/firewall.user",
	)
}

func dataOpenwrtWin81SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/spy/firewall.user", size: 2539, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd3\xbd\x6e\xc2\x30\x10\xc0\xf1\x9d\xa7\x88\xc4\xd2\x0e\xd8\x71\x30\xe5\x43\xea\xd2\xbd\x53\x87\xce\xc6\x1f\x21\xaa\xe3\x0b\xb6\xc1\xa5\x4f\x5f\xa5\xa0\xa2\x4a\x85\xbb\x35\xfe\xe5\x7f\x4e\xe2\x4c\xa7\xd3\x0a\x06\x1b\x4a\xcc\x55\xe9\xc2\x4a\x54\x87\xc1\xa8\x6c\xab\x07\x6e\xb3\xe6\x26\xa4\x5e\xa5\x3d\xd3\x10\xdc\xe3\x64\xc4\xaf\x10\x6d\xd5\x05\x07\x9b\x6a\x97\xf3\x90\x36\x9c\xb7\x5d\xde\x1d\xb6\x4c\x43\xcf\x75\x54\x5f\xa7\x59\xaf\x3e\xf9\x7b\x17\x0c\x94\xf4\x36\x9c\x5e\x3c\xe8\x0f\x1b\x27\x93\x64\xe3\xd1\xc6\x67\x2e\xea\x7a\x39\x13\xcc\xb3\x72\x36\xe7\x89\x3f\xf7\x5f\x8d\x10\x1a\x35\x4b\xbd\x40\x8d\x5a\xcd\x51\x63\xea\x35\x6e\x84\xc3\x8d\x44\x3b\xcd\x7c\x2d\x31\x23\x95\xc1\xc8\x93\xc0\xc4\x7a\x85\xee\x45\x1d\x98\x81\x12\x3c\x28\x83\xb0\xa3\x24\xc9\x6d\x3b\x4a\xc5\x8c\x67\x25\xb1\xbe\xd3\x11\x12\xb8\xfc\x1f\xb2\x3d\x82\x04\x29\x25\x48\xad\x86\xd4\x6a\x48\x2d\x49\x6a\x49\x52\x6b\x41\x6a\x2d\x08\x2d\x5d\xa3\x7f\x8b\xce\xde\xdc\x05\x94\x2f\xec\x1a\x6c\x8c\x43\x8f\x9d\xb3\x0d\xbb\x5c\xbf\xf1\x34\xa3\x28\xfb\xbb\xab\x37\xdf\x84\x6b\xa9\xa7\xf5\x37\xf0\xd7\x04\x9b\xaf\x26\xf9\x84\xec\x95\x38\x0c\x5d\xba\xac\x40\x6c\xf9\x77\x00\x00\x00\xff\xff\x78\xfb\xfd\x4d\x94\x05\x00\x00")

func dataOpenwrtWin81UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81UpdateDnsmasqConf,
		"data/openwrt/win81/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin81UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/update/dnsmasq.conf", size: 1428, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\xb1\x6e\xdb\x30\x10\x06\xe0\xdd\x4f\x71\x80\x97\x76\xe0\xc9\x47\x8a\x94\x94\xad\xad\xdd\xc2\x43\xe3\x40\x49\x91\x59\x91\xe9\x46\xad\x22\x0a\x14\x05\x37\x7d\xfa\x42\x76\x9a\xc8\x43\x40\x72\xf6\xe7\xc3\xe1\x7e\xfe\xf6\x72\xb9\x04\xd3\xeb\xee\x68\x1d\x1c\x9b\x2e\x27\x18\xfb\x7d\xe5\x34\x7c\x48\xb4\xab\x93\x43\x63\xf5\xb1\x6a\x5b\x1c\x07\x6d\x3f\x2e\x26\xfd\xdd\x58\x0d\x4d\x77\x30\x57\xf0\xe8\x5c\x3f\x5c\x25\xc9\xcf\xc6\x3d\x8e\x0f\x58\x9b\xa7\xa4\xb6\xd5\xdf\x67\xf6\x54\xfd\x49\xee\x9b\x6e\x6f\x8e\xc3\x6d\xff\xfc\xb9\x35\xf5\x6f\x6d\x17\x8b\x25\xe8\xee\x60\x6c\xad\xc1\x9a\xd1\x69\x0b\xeb\xeb\xdb\x45\xd3\xbb\xea\xa1\xd5\x03\x30\x07\x5d\xe5\x80\x6d\xe1\xa6\xdc\x94\xbb\x1f\x77\xdb\xeb\x6f\xc0\x7a\x70\x75\x0f\x8c\xed\x7b\x63\x1d\x48\x01\xec\x17\x94\x9b\xf5\xb6\xdc\x7c\xb9\x03\xc6\x9c\x61\xd3\x07\x03\x48\xe1\x9f\x34\xee\x03\x27\x2d\x96\x60\xc7\x56\x0f\xb3\x91\x5b\xf8\xba\x2b\xef\x3f\x95\xeb\xe9\x6b\xeb\x72\x77\x03\x6c\x0f\x24\x90\x56\x19\xa6\x28\x57\x3e\xca\x27\x2a\x90\xf2\x02\x89\xcb\x28\xad\x62\xb4\xcc\xa2\x74\xee\xd3\x4a\xa2\x94\x48\x22\xc7\x55\xc2\xd3\x40\xad\x44\x84\xe6\x29\x47\x2e\xbd\x98\x04\x21\x97\x02\x29\x45\xba\x08\xfb\x1d\x9d\x22\x65\x2b\x94\x14\xb4\xc9\x2b\x17\xc8\x8b\x08\x2c\xbc\xb9\xbf\xe2\xb0\x03\xfe\xe7\x44\x12\xa5\x37\xf8\xb9\x56\xc1\xab\x9c\x34\x0f\xd6\x6a\x8a\xc8\xfb\x4e\x2e\x79\xf0\x0d\x4f\x5c\x52\x1c\xf7\xa7\x2f\xb3\xf3\xcb\x5a\x61\xee\x5f\xe5\x0d\x07\x74\x6d\xa6\x39\xf7\x9f\x7c\xd2\x0a\xb3\x6c\x6a\x50\x0c\x0e\xdb\xfa\x8c\xd3\x98\x35\x52\xff\xad\x67\x38\x66\xe7\x80\xd0\xcf\xb8\x50\x18\x50\xf7\x37\x1b\xba\x44\xa1\x90\x78\xd8\xdb\x38\x63\xff\x6f\x25\x15\x84\x5c\x70\xcc\xa7\xb6\x47\xe0\x80\x32\xce\xb0\xbf\x8b\x2f\x98\x44\x81\x94\x47\xf1\x90\xb6\x5c\x70\x7f\x32\x27\x9e\x62\xc6\x91\xf2\xc0\xe1\x2f\xda\x9b\x24\x9f\xfe\x4d\x15\x12\xa5\x01\xb1\xcf\xb0\xa2\x7f\x01\x00\x00\xff\xff\x10\x9e\xc8\xee\xc9\x08\x00\x00")

func dataOpenwrtWin81UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81UpdateFirewallUser,
		"data/openwrt/win81/update/firewall.user",
	)
}

func dataOpenwrtWin81UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/update/firewall.user", size: 2249, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10ExtraDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x92\xe3\x30\x08\xbc\xcf\xa7\x4c\x95\x39\xcc\x75\xbe\x46\x83\xb0\x4d\xd9\x80\x56\x90\x28\xd9\xaf\xdf\x72\x6c\x97\x13\x67\xf6\x28\x1a\x9a\x47\xb7\x3e\xe1\x4b\xb2\x82\x52\x7c\x7f\x7c\x82\x90\x3b\xe9\x40\x15\x66\xbe\x12\xa0\xc9\x23\xea\x7d\x28\x3a\xef\x6f\x97\x54\xc3\xb1\x12\x29\x08\x63\x35\xb7\x3e\x76\xf0\x6a\x20\x4e\xa8\x79\xe7\x6c\x94\x62\xa4\xfa\x9e\x79\xfb\xb1\xdb\xd1\x26\xa9\x37\xaa\x7e\x4e\x4b\xa5\x38\xf8\x74\x2f\x5b\x1a\x26\xcd\x77\xac\x17\x1f\xdd\x72\x82\x89\x75\xd8\x80\xac\x80\xa6\x41\x1a\x50\xaa\x65\x40\x71\x10\xd7\x03\x35\x25\xb5\xa0\x75\x2e\x1c\x8d\x91\xce\xdd\x7e\x8b\x82\x7a\x0a\xdc\xaa\x66\x5e\xf8\x9b\x3a\x34\xd6\x6c\xcd\xb7\xba\x47\x1c\x4d\x7b\x1e\xa0\x24\xf7\x62\x35\xd6\x92\x4c\x65\xb6\x3b\x78\xa4\x60\x84\x34\x25\x49\x1c\x84\xa3\xda\x6c\x03\xd3\x46\x90\x25\x83\x50\x24\xa7\x7a\x65\xa4\xb7\x33\xf4\x44\xf9\x27\xe1\x74\xc4\xbb\xd1\x46\x39\x81\x4e\xa9\xe2\xf8\xdf\xda\x97\x91\x87\x27\x89\x59\x86\xce\x3b\x71\xed\x96\x7d\xd7\x19\xff\xd2\xa6\x20\xab\x73\xa6\x5a\x16\x05\x66\xbb\xe4\x54\xca\x0a\xcc\x8c\xa4\xbe\x08\x20\xe5\xdc\x73\xd9\x4d\x9f\x3a\x08\x8c\x16\x92\x78\xde\x9e\x2f\x8e\xb2\xbe\x67\xa4\xed\xb6\x27\x22\xd3\x1d\xf0\xfe\x06\xe2\xdf\x1f\xa5\x32\xd2\xcc\x1e\xcf\xb6\xf8\x73\xa1\x7a\x3f\x74\xaf\x6f\x3c\xfb\x69\x76\x43\x78\x58\xa5\x8e\x25\x0d\xe4\xe0\xdd\x39\x7b\x41\x29\x0f\xd4\x67\xc8\x7e\xfb\x65\xc1\x60\xa1\xd7\x83\xc6\xf4\x05\x65\x8e\xa3\xc5\x85\x9f\x27\x6c\x19\xdf\x48\x9a\x2f\x8e\x85\x87\xc7\xcf\x50\x6b\x8f\x7f\x87\xa6\x4a\x18\x41\xbe\x02\xff\x02\x00\x00\xff\xff\x31\xd6\x5e\x5c\xb0\x03\x00\x00")

func dataProxifierWin10ExtraDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10ExtraDomainsTxt,
		"data/proxifier/win10/extra/domains.txt",
	)
}

func dataProxifierWin10ExtraDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10ExtraDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/extra/domains.txt", size: 944, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10ExtraIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xd1\x5b\xae\xc6\x20\x08\x04\xe0\x77\xf7\xd2\x09\xc3\x45\x30\xee\x7f\x5f\x27\xb6\xe7\xb7\xf6\x8d\x2f\x30\x09\x0a\x0d\x25\xa0\x22\x7c\x36\x1a\x28\x09\x03\xb5\xb6\x94\x50\x91\xd9\xd4\x30\x12\xcc\x02\xd3\x66\x73\x41\x26\x54\x1d\xf5\x22\xa0\x7e\xb0\x43\xae\xb7\xd6\x88\xbb\x45\x16\x28\x86\x7c\xa4\x09\xba\x22\xfb\x6c\xdd\xe1\x08\x87\x5c\xbf\xea\xce\xf4\x40\x28\x28\x2b\x7a\x6a\xd8\xab\x5a\xa1\x5d\xef\x58\x3c\xb4\x9f\x34\x14\x6e\xb3\x51\x1c\xee\xa8\xc2\xfd\xd2\x2d\xca\x7f\x53\xe9\xcf\xde\xfc\x39\x40\xef\xcf\x57\xd0\x08\x0d\x83\x39\xd4\x0e\x77\x42\xae\x03\xf7\x1a\x34\x07\x53\xc0\x0a\xe4\x1a\xee\x85\x6e\x60\x21\xc7\x6c\x2a\x8e\x1c\xe0\x48\xc8\x75\xe0\x8e\xaa\x24\xbc\x63\x49\xb7\x28\x84\x8e\x97\x61\xe0\x31\xcc\xe1\xa0\x7f\xa8\xdf\xae\xd9\x87\x2e\x9b\xba\x6e\xfc\x9f\xed\x05\xf6\x75\x34\x9f\x7f\x01\x00\x00\xff\xff\x68\x83\x7d\x76\x24\x02\x00\x00")

func dataProxifierWin10ExtraIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10ExtraIpsTxt,
		"data/proxifier/win10/extra/ips.txt",
	)
}

func dataProxifierWin10ExtraIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10ExtraIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/extra/ips.txt", size: 548, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10SpyDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x98\xef\x8e\xab\x2a\x10\xc0\xbf\x9f\x47\xd9\x44\xc2\x1f\xeb\xb6\x39\x4f\x83\x30\x55\xb2\x0a\x5c\xa0\xba\x7d\xfb\x1b\x5a\x5b\x6d\xa5\x70\x36\xd9\xa4\xce\xfc\x60\x86\x99\x01\x65\xbe\x10\xaf\x46\x0f\xb2\x03\xa4\x21\xfc\xfd\xf3\x85\xb8\xd4\xbf\x1e\x09\x33\xde\x1f\xfc\x17\x1a\x3d\x97\x7e\x55\xdf\x24\xfa\x49\x8c\xb7\x67\x10\xfa\x49\x04\x39\x86\x87\x5a\x8a\xb7\xe9\xbb\xa1\x95\xda\x53\x34\x2a\xe1\x8c\x37\xe7\x27\x39\x18\xc1\x83\x32\x1a\x0d\x6a\x7a\xd2\xaf\x63\x1d\x97\x5b\xd3\x2e\xba\xb5\x79\xf6\xe0\x26\x25\xc0\x23\x6f\x84\xe2\xc3\xde\x44\x80\x01\x46\x08\xee\x9a\x50\x39\x7e\x3e\x2b\x31\x72\xcd\x3b\x70\x0f\x83\x93\x72\xe1\xc2\x07\xe0\x2e\xf4\x4f\x99\x71\x01\x7e\xbf\x90\xe4\x81\xa3\x38\xdb\xc3\x65\x61\x46\xa4\x3d\x0f\x22\x4d\xbe\x5b\xbc\x6b\x93\xca\xd7\x94\x70\xc1\xd6\x55\x72\x11\xd4\xa4\xc2\x15\xcd\x4a\x4b\x33\x2f\x89\xe2\x52\xc3\xef\x65\xc9\xd1\x26\x81\x2f\x01\xe2\xd2\x93\x6d\x2e\x97\xe7\x87\xf6\x87\x57\x42\xea\x4a\x7b\xc4\x65\x00\xd1\x23\x09\x7f\xff\x70\xe7\xf8\xf5\xab\xb2\xce\x48\x24\x0d\x92\xde\xa2\xd1\xbe\xbb\xdb\x2a\xdd\xdd\x2c\xbd\x89\x07\xc6\x30\xa9\x38\x22\xd2\x4d\x2f\x22\xb1\x17\x75\x5b\x91\x26\x0c\xd7\x15\xbc\x8b\x9a\xd7\xb9\xee\xa2\x04\xf5\x3a\x17\x6d\x2b\x61\x1c\xc6\x04\x71\xab\x90\x8d\x3f\x52\x6a\x96\x57\xd7\x1f\xd4\xb3\xf6\x04\xcd\xda\xbf\xe6\xa3\xd5\xcc\x66\xad\x32\x2f\x7a\x4c\x31\xa6\x94\xd1\x63\x62\xbc\xbf\x17\xb3\xee\x2a\x7f\x7d\xc8\xae\xfb\x70\x5e\xf7\xe1\xbc\x8b\xb6\x51\x11\x6b\x92\x05\x17\x3d\xdc\x4a\x6e\xe4\x2e\xbc\xda\x14\xd2\xd7\x87\x13\x1a\xc4\x15\x0d\x83\x9e\xef\x35\x22\xa4\x3f\x35\x07\x34\xc4\x1a\x5f\x85\x3d\xc9\x2c\xee\xa9\xa5\x69\xed\xce\xe5\x45\x04\x7b\x51\xf7\x2e\xa2\xfb\x81\xf4\x75\xa0\x19\x2d\x0f\xf0\x2b\x7a\xae\x3b\x40\x62\x30\x17\xc9\xad\x5d\xfc\x36\xce\x22\x1f\x76\x85\x2a\x2c\xc1\xa4\x50\xe3\x22\xa6\xd9\x0a\x34\x61\x21\x97\x93\x4e\xb6\x6c\xd6\x9e\x62\x12\xff\xf6\x39\x94\xed\x21\x29\xf4\xa2\x27\x98\x10\x8c\x09\xa5\x79\xe0\xc8\x0a\x33\x9c\xc8\x77\x01\x48\x15\xd7\x06\x88\x5e\x14\x00\x5a\x17\x80\x3a\xbf\x0a\x82\xeb\xc2\x0c\x94\x16\x7c\xa0\xac\x00\x30\x56\x30\x51\x93\x53\x01\x60\x38\x0f\x1c\x3e\xa4\x78\x05\x0a\xc9\x22\x87\xba\x30\x43\x53\x17\x7c\xf8\x66\x85\x55\x1c\x09\x2b\x00\x25\x27\x4f\xa4\x10\xc9\x53\xc1\x07\x8a\x49\xde\x04\xc5\xb4\x04\xb0\x7c\x45\x51\xcc\xb2\xcb\x8c\x35\x97\x2d\xfb\x08\x64\x57\x11\xff\xb3\x71\x88\x4e\x14\x81\xa6\x00\xe4\xe3\x10\x77\x5e\x01\x60\xf9\x50\x13\xcc\x68\x21\x50\xac\xe4\x43\xf2\xed\xf4\x02\xd4\x05\x13\x35\x2e\x01\xac\x60\xe2\x40\xb3\xa7\x1c\xc1\x87\x52\x3d\x34\xb4\x90\x8b\x26\x7f\x80\x10\xfc\x9d\x3f\x06\x09\xfe\xce\x6f\x5e\x82\x8f\xa4\x08\x14\x9c\x3c\xe6\xcf\xc9\x08\x64\x37\x4e\x04\x0a\xa1\x3e\xe5\x0a\x86\xe1\x23\x39\xe6\xf6\x05\x8b\x2e\xe6\xce\xc9\x08\xb0\xdc\xde\x8c\x40\x9d\xdb\x38\x11\xf8\xce\x6d\xde\x1b\x40\x32\x71\x60\xf8\x44\x9a\xdc\x7b\x33\x02\xdf\xb9\x9d\x15\x81\x53\x7e\x15\x27\x9a\x3d\x82\x22\x40\xb3\xab\x88\x2f\xe6\xac\x93\x04\xe3\xec\x2b\x89\xdd\xde\x7a\x05\xe0\x90\x7b\x5f\x44\xa0\x29\xcd\xf0\x8d\x73\x81\x22\x98\x92\x6c\x2e\x08\xa6\xcd\x87\x38\xc4\x0f\x6b\x99\xd2\x34\xb7\xa1\x14\x9f\x30\x4b\x1b\xdf\x00\x69\xf7\x57\xa0\x4e\x7b\xb7\x02\x87\xf4\xae\xdd\x02\xc9\x10\xae\x40\x93\xfe\xf4\x58\x81\x63\xc9\xc9\x53\xc1\x87\xf8\xa5\x98\x07\x48\x21\x50\x84\xa5\x93\xb0\x02\xa5\x40\x91\x26\x79\xcc\x2b\xde\x69\xe3\x83\x12\x1e\xf9\x8b\xb5\xc6\x85\xf7\xef\x6a\xa9\xbc\x28\x7f\x7d\x9f\x07\xf8\x5d\x6f\x31\xdd\xe6\x27\x98\xc2\xd0\x0e\xcc\x04\xae\x00\xf5\x9b\x8b\x70\x4f\xd7\xdf\xaa\x6a\xaf\xd9\x9b\x9c\xaa\xf2\x97\x21\x55\x79\x4d\xff\x4d\x9f\xbc\x2e\xfd\x4c\xe5\xe0\x0c\x2d\x41\xf3\x3c\xa3\xd1\x23\xfe\xc3\xa5\x5e\xae\xf7\x83\xa7\x33\xb4\xc8\x81\x1c\x8d\x96\xe8\x76\xf9\x79\x1b\x39\x9a\x56\x0d\x80\xac\xb2\x80\xb8\x53\xbb\x3e\xc4\xb6\x0b\x31\x7a\x1d\xc0\x87\xfd\xbd\xf4\xde\x79\x30\xe7\xb3\x12\xc0\xad\xf5\xcf\x66\xc8\xa2\x72\x97\x01\x3e\xe8\x8d\x06\x0f\x21\x28\xdd\xf9\xaa\xd5\x34\xd7\x4d\xd9\xa2\xe2\xfa\xcf\x68\xbc\x84\xfd\x23\xda\xff\x64\x67\xb5\x0e\xd0\xd9\x98\x60\x9d\xd2\xc1\x3a\x90\x4a\x2c\x51\xb2\x0e\x26\x05\xf3\x5a\x35\x8e\xcb\xcd\x22\x5f\x9a\x56\x71\x9c\x8b\x66\xf8\xb3\x59\xf5\x16\x73\x2f\x7a\x18\xf9\x56\xbc\x4d\xaa\x07\x71\x89\x8e\x0c\xdc\xf7\x81\x0f\x3f\x4a\x77\xcb\xb0\xc7\x32\x3c\xd7\xb2\x35\xe9\xbe\xd2\x13\x9a\x95\xce\x02\x69\xa5\xde\x5d\xdd\x17\x11\xec\x45\xdb\xab\xbb\xb7\x57\x0d\x61\xd7\xf2\xbb\x8b\xf9\xb0\x3b\x13\xee\x0a\xb8\x38\x63\xe1\x53\x1c\xfc\xbc\x09\xb1\x0f\xc6\x81\xe0\x81\x0f\xa6\x73\x30\x3d\x1a\x89\x37\xf1\x7f\x17\x3e\xa8\xb0\xeb\xf8\xf9\x8b\x9b\xe0\x8a\x66\x1e\xbc\xd1\xef\xca\xb5\x4f\xc8\xad\x85\x5f\xd4\xc6\x30\xdf\xec\x7e\xec\x20\xae\x8a\x8b\xdb\xe5\x34\xf8\x33\x3c\x3a\x8c\xbe\xe7\x36\x4e\x97\xde\xcb\x13\x38\x1f\x5d\xef\xaf\xad\x53\xf2\x76\x22\xf4\xe0\x96\x65\xde\x3b\x86\xd5\x57\xae\x4c\x17\x26\x57\x05\x0b\xf2\xa9\x06\x5e\xfa\x92\x25\x43\xc9\x19\x96\xa0\xae\xf9\x49\x47\x79\x56\x9a\x60\xa4\xec\xd4\xbc\x69\xfe\x0f\x00\x00\xff\xff\xa9\x48\x2c\xd5\x94\x16\x00\x00")

func dataProxifierWin10SpyDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10SpyDomainsTxt,
		"data/proxifier/win10/spy/domains.txt",
	)
}

func dataProxifierWin10SpyDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10SpyDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/spy/domains.txt", size: 5780, mode: os.FileMode(438), modTime: time.Unix(1498767414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10SpyIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x96\x5b\xb2\x03\x21\x08\x44\xff\xb3\x97\xdb\x45\xe3\xbb\xb2\xff\x7d\xdd\x6a\xc6\xf1\x91\x8f\xa4\x3c\x83\x20\xa2\x80\x4c\x68\x15\xce\x0e\xb2\x7d\x3f\x2f\x0e\x70\xf0\x44\xa7\x3d\x38\xe0\x69\xa0\x8e\xa0\x4e\x14\x94\xb4\xc6\x03\x9e\x3d\x88\xd6\x50\xd0\xfb\xf7\xe3\x09\xa3\xa1\x12\x4c\xed\x25\xb7\x81\x31\x69\x80\x06\x72\xc3\x40\xce\x27\xd5\x4d\xac\xfa\x2d\x74\xc2\xed\x31\x43\x73\x64\xb8\x7c\x99\xe4\x44\x5e\xc0\x52\xc0\x6c\x93\x13\xd8\x1d\xf4\xfa\xfd\x64\x43\x1d\xc8\x06\x96\x16\xd4\x2a\x08\xb6\xba\xc0\x65\x66\x8d\x59\xfd\xa1\x06\xf7\x01\xfb\xdb\x63\x2f\x25\x44\x5d\xe6\x07\xf2\x08\x62\x04\x03\xad\x6f\xca\x60\xd9\x42\x77\xe4\x36\x29\x83\x79\xc0\xdd\x16\x7b\x26\x98\x39\xb9\x80\x11\x9c\x80\x06\x66\x4d\xb0\xcd\x85\xf0\x69\xd9\x19\x62\x76\xff\x7e\x4a\xd8\x40\x72\x14\x7e\x3f\x45\xbb\x08\x45\xa4\x74\xa1\xbc\x5a\xa8\xd8\x96\xc9\xda\xa0\x23\x4c\x6d\xa4\xdc\x5e\x9c\xc0\x34\xa7\xb7\x2e\xd9\xe3\xd9\xcb\xf2\x8c\xbe\x59\xbf\xba\x71\xa4\xe7\x60\x27\xcb\x9c\x4f\xdf\xba\xc2\xe5\x60\xaa\x07\x17\xb8\xbd\xdc\x50\x4d\xf7\xed\xfb\xa9\x19\x19\x15\x34\x9b\x63\x4f\xb0\xbf\x77\x14\xe7\x53\x0b\xd2\x88\x60\x79\xb2\xc0\xe2\xf0\x0a\xef\x2f\xd0\x4c\x4a\x6b\xfc\xaa\xc5\x4e\x19\xb7\x71\x6a\x29\x2d\x62\xd9\x02\x39\xa4\xcc\xe8\x2f\x69\x11\x7b\x21\xe7\x08\xfc\x86\x7c\x00\xad\x5f\x34\x5e\xd2\x3d\xf2\x65\x23\x6e\x0e\x2f\xf2\x8b\xd2\xa2\x64\x28\x5b\xaf\x55\x8c\x45\xfe\x44\x64\x8d\xd7\xe6\x0a\xbc\xf8\x16\x69\x7b\x21\x52\xc2\x8d\x38\x4e\x26\x7e\x3f\xad\x41\xa7\x3d\x9e\x0c\xa1\x65\xc4\x3d\x69\x68\x69\xa2\x3c\x69\xa8\xf5\x40\x55\x8f\x8d\xd9\xb4\xf2\x62\xf7\xfe\x54\x90\x8d\x6e\xbe\x39\x35\x30\xaa\x8d\x58\x5b\x05\x47\x59\xe8\x4a\x19\xbe\xd3\x95\xba\x4e\x2e\x4a\x3d\x8e\x6b\x52\x51\x56\x4c\x55\xa7\x21\xa3\xb5\x83\x0c\xfd\x40\xa7\xc3\x73\x7a\x3f\x64\xa4\x02\x57\xea\x91\x84\xab\xf0\xa8\x6a\x5c\xc8\x30\xb7\x39\x8a\xd1\xc5\x87\x7a\xcd\xb0\xbf\x03\x22\xda\x4c\x94\x96\x2a\x84\xfd\x1d\x70\x09\x95\xb6\x51\xa9\x33\xd8\x0c\xc9\x66\xbc\x0e\x8e\x70\x4f\xd6\xb5\x2d\x07\xd3\x6a\x18\xdf\x34\xad\xbf\x1f\x94\xb8\x37\xe7\x7e\xf3\xa8\x27\xf7\x9f\xf9\xfd\x67\x7e\x47\xf3\x9f\xf9\x97\x02\x79\xfa\xa3\x88\x5c\xfe\xb0\xa0\x9c\xeb\xb9\xdd\xeb\xb9\xdd\xeb\xb9\xdd\xeb\xb9\xdd\xfe\xb6\x1e\x9d\x67\xf3\x78\xce\xfd\xe5\xae\xfd\x1c\x06\x3d\x95\xa8\x54\xba\xd5\xea\x3f\x9d\x73\xfd\x36\xab\xc8\x14\x97\xa6\xc4\x89\x1c\xda\xe3\x67\x2b\x13\xeb\x21\xaa\x97\x48\x5d\x6e\xc9\x04\x97\xd0\x67\xfe\x4c\x4c\x76\xcc\x4d\x76\xcd\x95\x37\x4b\x28\xb8\x85\xf5\x14\x9e\x2e\x54\xe8\x7f\x41\xd3\x95\xb3\x85\x83\x4f\xa6\x3c\xa4\x2b\xc3\x9e\x7f\xb8\xfc\xf0\xd8\xac\x1e\xc7\x43\xdf\x89\x53\xec\xf9\x39\x80\x89\xea\x7f\xb1\x76\xed\x7a\x34\x78\x7e\xda\xdf\x44\x66\xb9\x7d\xa0\xd2\x6e\x63\x73\xb4\x77\xf2\xd3\x1a\x54\x16\x03\x53\x14\xf3\xca\x03\x3b\x5c\x0d\x90\x83\x11\x0e\x75\x95\x6e\x2f\xeb\x91\xd2\x9f\x37\xc2\xfa\x40\x69\x8c\xf7\xc3\x40\xc9\x28\xba\x6b\x43\x27\xd1\x15\x4f\x05\xf8\xa0\x88\xb0\xca\x63\x55\xbb\xab\x4f\x09\x70\x55\x6b\x3d\x5f\x9a\x4e\xfd\x24\x4d\xff\x0f\x00\x00\xff\xff\x9d\x04\xc3\x74\x91\x09\x00\x00")

func dataProxifierWin10SpyIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10SpyIpsTxt,
		"data/proxifier/win10/spy/ips.txt",
	)
}

func dataProxifierWin10SpyIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10SpyIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/spy/ips.txt", size: 2449, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10UpdateDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x0a\x02\x31\x0c\x45\xf7\x1e\xc5\x45\x2e\x30\xa7\x09\x4d\x1d\x0a\x6d\x7e\x68\xa2\x65\x6e\x2f\xea\x28\x5a\x67\x99\xf7\x1f\xbc\x9c\x49\x72\x2d\xb7\xdc\x37\x12\x37\x6a\x46\xad\xa4\x0e\xc7\x25\x28\xa1\x91\x3a\x47\x22\xcd\xb1\x9c\xbe\xd4\x59\x7b\x8c\x57\x13\x8e\xfc\xcf\x47\x51\xc1\xf0\x7d\x7e\x43\x9f\x45\x29\x6e\x95\xb7\xc4\xc1\x15\xeb\x41\x41\x30\xb4\x82\x65\xe6\x9f\xf3\x37\xf4\x7c\xf9\xa0\xfd\x42\x3b\x41\x5f\x97\x7b\x00\x00\x00\xff\xff\x33\xc4\x53\x0e\x02\x01\x00\x00")

func dataProxifierWin10UpdateDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10UpdateDomainsTxt,
		"data/proxifier/win10/update/domains.txt",
	)
}

func dataProxifierWin10UpdateDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10UpdateDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/update/domains.txt", size: 258, mode: os.FileMode(438), modTime: time.Unix(1498767414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10UpdateIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd3\x4b\xb2\xae\x20\x0c\x04\xe0\xb9\x7b\xb9\x5d\x74\x5e\x84\x72\xff\xfb\xba\x85\x7a\x7e\x08\x33\xbf\xf0\x30\xb4\x48\x05\x5b\x87\xc1\xdb\x7d\x2d\xc8\x7d\xc9\x84\x82\x39\x40\x89\x6a\xef\x87\xf3\xbe\xc2\xe1\x0e\x6a\xa2\xfd\x5b\xcf\xe2\xfe\x1b\x0a\x5d\x43\xa1\xdf\x50\x80\x1c\xa0\xd9\xbb\x6b\x71\x56\xe7\xa8\x1e\x4f\xcb\x84\xb8\x42\xf5\x3b\x81\x81\xbd\xc1\x09\x66\x3f\x9c\xd5\xa3\xce\x17\x8b\xc3\xfd\xf0\xbe\x5e\x21\xa3\x50\xf7\xdd\x66\x06\x1b\x9e\x93\xfe\x99\x74\x44\x3b\x2c\x9b\xc3\xeb\xbb\xde\xc2\x38\x0a\xce\xb3\xa0\xf7\x45\xef\x6f\xf0\x0a\x69\xf6\xb3\x58\xc3\x0c\x6f\xa3\x48\xfb\x1c\xe8\x7d\x7e\xaa\xca\x51\x68\x75\xb2\xb1\xb2\xae\xb5\xb5\x76\x04\xdc\x8a\x72\x17\x65\xf6\x3c\x08\x51\x41\xce\x18\x2b\xb3\xf0\x09\x6d\xa3\x2c\x52\xc7\x4c\x7c\xd3\x1b\xf9\x53\x30\x74\x01\x53\x0f\xc7\xe1\xac\x9e\xb7\x43\xe6\xcf\x30\x2f\x9c\x3d\xbd\x6c\x0c\xde\xff\x03\x00\x00\xff\xff\xf6\xfe\x0a\x0c\x3a\x03\x00\x00")

func dataProxifierWin10UpdateIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10UpdateIpsTxt,
		"data/proxifier/win10/update/ips.txt",
	)
}

func dataProxifierWin10UpdateIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10UpdateIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/update/ips.txt", size: 826, mode: os.FileMode(438), modTime: time.Unix(1498767413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7ExtraDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3b\x0a\x03\x31\x0c\x05\xfb\x1c\x25\x85\x8a\xb4\x7b\x1a\x47\xd6\x9a\x07\x96\xb4\xac\x14\xef\xf5\x53\x98\x40\xbe\x90\xee\x69\x06\xc1\x9c\x49\x63\x4d\xe3\x00\xb1\xeb\x72\x2a\x9c\x18\x25\xe1\x46\xd1\x83\x14\xbc\x7b\xf8\x9a\xd3\xb2\x5f\xbe\xe2\xbd\xbf\xa3\xaa\x95\x54\xb2\x84\xec\x03\x2c\x1f\x2f\x8d\xae\xb0\xf6\xd8\x1d\x43\xe6\xee\xde\x60\x4f\xf7\x6b\x5d\x42\x85\x0e\x58\xf5\x23\x26\x19\xa5\xa3\xfe\xec\x3d\x82\xdd\x92\xca\xb6\xfd\xaf\x48\x6a\x93\xb8\x21\x85\x4c\x72\xb9\x07\x00\x00\xff\xff\x61\x01\x49\x4a\x21\x01\x00\x00")

func dataProxifierWin7ExtraDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7ExtraDomainsTxt,
		"data/proxifier/win7/extra/domains.txt",
	)
}

func dataProxifierWin7ExtraDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7ExtraDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/extra/domains.txt", size: 289, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7ExtraIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc9\x41\x0a\x03\x41\x08\x44\xd1\x7d\x1f\xe6\x63\x69\xd9\xe3\xe0\xfd\xef\x15\xb2\x08\x64\xf9\x78\x2a\x26\x50\xd2\xde\xe3\x40\x1a\x14\xc5\xb3\xe7\x1a\xd3\x26\xbb\xfe\xe1\x3d\xb7\xe9\xe4\x1d\xb2\xf4\x93\x62\xd0\x37\x33\x1e\x7c\xd1\x6b\xe4\xfd\x04\x00\x00\xff\xff\xff\x0f\x28\x2b\x60\x00\x00\x00")

func dataProxifierWin7ExtraIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7ExtraIpsTxt,
		"data/proxifier/win7/extra/ips.txt",
	)
}

func dataProxifierWin7ExtraIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7ExtraIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/extra/ips.txt", size: 96, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7SpyDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x51\x6a\xc3\x30\x0c\x06\xe0\xf7\x1d\xa5\x30\xd1\x38\x6e\x46\xd9\x69\x34\x5b\x09\x66\x8e\x14\x64\xad\x59\x6e\x3f\x4a\x18\x84\xc4\x85\xbc\x7e\xfe\x7f\x19\x5b\x17\x30\xca\x34\x92\xe9\x02\x63\x0a\x2a\x45\x7a\x83\x20\xe3\xe7\xdb\x05\x4c\xb1\xef\x53\x18\x91\x71\x20\x05\x26\x7b\xea\x43\xd4\xe8\x17\x22\x1a\xee\x2b\x21\x96\xa6\xf1\x2d\x64\x61\xc8\x99\xe7\xb5\xf2\x54\xd7\xdd\x8f\xea\xae\xde\x79\xc8\x61\x39\x70\x7b\xab\x72\xd7\x1c\xb9\x6d\xef\x15\xf4\x95\xb9\xfe\xfa\x01\xbd\xe2\x16\x17\x07\x85\xcc\x12\x0f\xa5\xf2\x20\xc0\x6f\x8c\x5c\xd6\x6c\xfc\xba\x9d\xce\x0e\x24\xa7\xb3\xff\xb9\xf7\x39\x71\xf5\x53\xcb\xb4\x30\x99\xab\x33\xfd\xa8\x4c\xb4\x39\xdb\x8e\x36\x52\x8a\x02\x69\x7a\x74\xfb\xf6\xba\xc4\x97\x77\xce\x68\x45\x78\xa7\x7f\x01\x00\x00\xff\xff\x6b\x8d\x7f\x2a\x2c\x02\x00\x00")

func dataProxifierWin7SpyDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7SpyDomainsTxt,
		"data/proxifier/win7/spy/domains.txt",
	)
}

func dataProxifierWin7SpyDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7SpyDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/spy/domains.txt", size: 556, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7SpyIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\x41\xb2\xc4\x20\x08\x04\xd0\x7d\x0e\xd3\x45\x37\x02\x52\xb9\xff\xbd\x7e\xe9\xd4\xfc\x98\x59\xb8\x78\x2a\xa2\x02\x1d\xd5\x90\x37\xb2\xef\x8b\x8e\x49\x44\x43\x43\xf7\x35\x0c\x55\x90\x12\x1a\xfd\x62\xd8\x26\x39\x41\x4b\xd0\xed\xbe\x82\xe0\x20\x5c\x08\xde\x57\x08\xcc\x01\x0d\x43\xf4\x41\x42\x16\x1f\xd7\x04\x47\xad\x2d\x8f\x83\x10\xf5\x78\x8d\x7c\xd8\x0e\x1e\x96\x1c\xf2\x0f\x67\x21\x0d\xb4\xba\xaf\x0c\x44\x60\x0c\xd0\xe6\x4b\xfd\x15\xe9\x58\x69\x0e\xf9\x57\x0a\xa1\x78\xaa\x5f\x6b\x6c\xbb\xaf\x4c\x90\x0d\xae\x63\xa3\x7e\x3c\xdf\x9e\xfd\xf6\x8a\xa7\x0d\x8c\x95\xb5\x90\x79\xb0\x21\xfe\x53\x9a\x08\x7f\x51\xa6\xc7\x5e\xe0\xae\x1a\x09\x89\x50\xef\x67\x1c\xd4\x0e\xf7\x01\x96\xc1\x6d\x4d\x3f\x5e\x7f\x3d\xf2\xc7\xf5\xe3\x79\xd8\xa1\xdd\x23\x05\xb2\x20\x8f\x5d\x1b\x36\xf7\x55\x64\x13\x54\xde\x7f\x01\x00\x00\xff\xff\x55\x5e\xdd\x6a\x52\x02\x00\x00")

func dataProxifierWin7SpyIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7SpyIpsTxt,
		"data/proxifier/win7/spy/ips.txt",
	)
}

func dataProxifierWin7SpyIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7SpyIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/spy/ips.txt", size: 594, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7UpdateDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\x2b\x2d\x48\x49\x2c\x49\xd5\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\xd1\x4b\xce\xcf\xb5\xe6\xd2\xd2\x2b\xcf\xcc\x4b\xc9\x2f\x2f\x86\x4a\x83\x05\x53\xf2\xcb\xf3\x72\xf2\x13\x53\xd0\x15\xc3\xb9\xa8\x7a\xf2\x52\x4b\xac\xb9\xb0\x18\x03\x11\x82\x8a\xe4\x17\xa5\x5b\x03\x02\x00\x00\xff\xff\x49\x80\x29\x87\x85\x00\x00\x00")

func dataProxifierWin7UpdateDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7UpdateDomainsTxt,
		"data/proxifier/win7/update/domains.txt",
	)
}

func dataProxifierWin7UpdateDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7UpdateDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/update/domains.txt", size: 133, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7UpdateIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x51\x8a\x40\x21\x08\x85\xe1\xf7\xf6\x32\x87\x8e\xa6\x19\xed\x7f\x5f\x83\x30\xc3\x4d\x1f\xbf\x3f\xb0\x30\x2a\x38\x37\x16\x6c\xde\x21\x09\x05\xe3\x80\x62\xcd\x5e\x6d\xbb\x39\xee\x70\x83\x19\xa8\x01\x52\x2a\x57\x61\x0e\x7b\x18\x1f\x5d\x21\xc2\x4a\xb9\x83\xba\xc0\x3d\x61\x04\xcf\x7c\xac\xd0\x97\x81\xf9\xf3\x40\xcc\xbe\x43\xd2\xe0\xcf\x2c\xba\x41\x56\xf4\x70\x5a\x30\xf6\xa0\x77\xd0\x36\xcc\x71\x1c\x94\xe4\x21\x44\x05\x91\xb7\x16\xfa\xac\x94\x8f\xd4\xf3\x37\xac\x84\xf5\x1f\x16\xb6\x80\xa1\xcd\xde\x1c\xd5\xb9\x1d\xc9\x1f\xf5\xdc\x7a\x3e\xe7\x37\x00\x00\xff\xff\x9e\xbc\x35\x00\xe3\x01\x00\x00")

func dataProxifierWin7UpdateIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7UpdateIpsTxt,
		"data/proxifier/win7/update/ips.txt",
	)
}

func dataProxifierWin7UpdateIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7UpdateIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/update/ips.txt", size: 483, mode: os.FileMode(438), modTime: time.Unix(1498767411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81ExtraDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6e\xeb\x30\x0c\x44\xf7\xff\x28\x01\x4c\xe0\x67\xdb\xd3\x28\xd2\x58\x21\x20\x4a\x2e\xc9\x58\xc9\xed\x8b\x36\x70\xe0\xda\x6e\x76\x36\xe7\x69\x38\x9c\x13\x85\x69\xc2\x7d\xd0\x91\xc4\x2a\xc5\x26\x1f\xff\x4e\x24\x36\x7a\x8d\xc6\xcb\xbf\x41\x67\x8e\xb0\x27\x4c\x17\xae\xf9\x25\x49\x50\xb7\xa8\x40\x25\xe1\xa8\xcd\xda\xe8\x8b\xe8\x28\x10\xb8\x3e\x0e\x24\x2e\x38\xb0\xeb\x08\x7e\x85\x6e\xf9\x10\x9d\xe7\xe0\xdc\xea\x30\x9f\xc9\x8a\xed\x80\xdd\x15\x49\x12\x09\x3c\xbc\xb2\x6f\x5e\xe4\xd5\xde\x4c\x85\x67\x3c\xbf\x59\x32\x99\x5f\xc8\x86\x97\x55\x69\x99\xeb\x0a\xf9\x5d\x4f\xc5\xdd\x87\x75\x43\xbb\x55\x9f\x37\xe8\x83\x26\x6d\x89\xa2\x18\xa9\x6f\x01\xf3\xa6\x40\xca\x18\x13\x25\xbb\x93\x4c\x5b\xc2\x59\x40\x9d\x6b\x6a\xdd\x9e\x93\x39\x14\x4e\xef\x2a\xe9\x29\xee\x6c\xba\xc5\x56\xfd\x30\xe4\x9f\x12\x7d\x07\xb3\x1b\x3b\xa8\xc2\x17\xf0\xff\x1b\x93\xf3\xb1\xd6\xfb\x72\x81\x21\x68\xbc\xfe\x8c\xbf\x02\x00\x00\xff\xff\xd2\xa6\xb4\x9f\x81\x02\x00\x00")

func dataProxifierWin81ExtraDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81ExtraDomainsTxt,
		"data/proxifier/win81/extra/domains.txt",
	)
}

func dataProxifierWin81ExtraDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81ExtraDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/extra/domains.txt", size: 641, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81ExtraIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xbb\x11\x84\x21\x0c\x03\xe1\x9c\x5e\x6e\xc7\x32\x32\x8f\xa1\xff\xbe\x6e\xc8\xf8\x33\x7d\x81\x56\x9d\x15\x28\x29\x9f\xe6\x40\x5a\x28\x3a\xf3\xd1\x40\x3d\x4e\x1b\xc6\x94\xc9\x7c\x76\xf5\x17\x3e\x6d\x14\x95\x28\x16\xb9\x5f\xd5\x47\xba\x3f\x75\xdd\x00\x43\xc4\xef\x41\x56\x9d\x96\x61\xe6\x46\x7b\x92\x11\xd7\x13\x0f\xb4\x8d\x7c\xfe\x01\x00\x00\xff\xff\x89\x0d\x54\xcc\xb7\x00\x00\x00")

func dataProxifierWin81ExtraIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81ExtraIpsTxt,
		"data/proxifier/win81/extra/ips.txt",
	)
}

func dataProxifierWin81ExtraIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81ExtraIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/extra/ips.txt", size: 183, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81SpyDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xd1\x6a\x03\x21\x10\x45\xdf\xfb\x29\x81\x0c\xd1\xd8\x90\xd0\xaf\x19\x74\x76\x91\xea\x28\xce\x24\x76\xff\xbe\xd0\xd0\xd2\xba\xf6\xf5\x9c\xab\x57\xef\x01\xf0\x98\x85\xc2\x4a\xc0\xa4\x6f\x2f\x07\x50\x4a\x94\x49\xdb\x06\x39\xfa\x56\xa4\x2c\x0a\xbe\xe4\x2f\xd5\x70\x59\xa2\xcf\xc8\xb8\x52\xfb\x3e\x70\xaf\x01\x95\xf6\xe9\x47\x69\x4a\x1f\x10\x50\x71\x2f\xbb\x8c\xec\xef\x3b\x7c\x10\x63\x9d\x83\x54\x18\x52\xe2\xfe\x43\xed\xc9\x9d\x1c\x24\xbf\x0d\xd8\x58\x7b\x9b\xa4\x8d\x7d\xbd\x4c\xf1\xd5\xec\xf1\xf9\x7c\x1b\x6e\x16\x52\x8d\xbc\xca\xb1\x47\x9e\xfe\x44\xea\xc6\xa4\x76\x8e\x31\xe9\x5c\xd0\xbd\x95\xfa\x7b\x32\x7c\xc7\xc0\xf2\xec\x7c\xee\xf6\x6f\x63\x8f\x7c\x85\x58\x1f\x97\x41\x7c\x06\x00\x00\xff\xff\x23\x30\x1c\x41\xca\x01\x00\x00")

func dataProxifierWin81SpyDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81SpyDomainsTxt,
		"data/proxifier/win81/spy/domains.txt",
	)
}

func dataProxifierWin81SpyDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81SpyDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/spy/domains.txt", size: 458, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81SpyIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x41\xae\xe3\x30\x0c\x03\xd0\x7d\x0e\x43\x88\x94\x64\x59\xc8\xfd\xef\x35\x70\xd2\x4e\xed\xbf\x28\xd0\xe7\x18\xa4\x60\xd1\x51\x0d\x79\x63\xf4\x7d\xd1\x31\x89\x44\xfa\xff\xff\x0d\x85\xee\x4b\x8e\x9e\x88\x06\xe3\x45\x3f\x10\xef\x2b\x0c\x55\x90\x06\x14\x7d\x30\xed\xbe\x92\x60\x10\x2e\x24\xef\x2b\x05\x8e\x80\xc2\x90\xbd\x91\x90\xe5\xeb\x9a\x60\xd4\xba\xf2\x73\x12\xa2\x7e\x5e\xbf\xf1\x63\x3b\xb8\x59\x72\xc8\x5f\xce\xc2\x30\xd0\xea\xbe\x46\x20\xa0\xc2\x9a\x6a\x95\xba\x3f\xe5\x9c\x73\xf3\x00\x6d\x39\x91\x09\x72\x05\x1f\xd2\x21\xff\x4a\x29\xc4\xa1\x3e\xc4\xb6\x9d\xb2\x95\x33\x40\xae\x07\x0d\x30\xeb\x8f\xe7\xe9\xd9\xa7\x57\x1c\x2d\x10\x6b\x88\xc2\x18\x1b\x1b\x6b\x2b\x1f\x4a\xf3\xdd\xe6\x8f\x4f\xf9\xd7\x5e\xe0\xbb\xf9\x00\xcb\xe0\xf6\xf9\xbe\xdb\xff\x38\x4e\x3f\x75\x2b\x88\xe3\xa9\x27\xe3\x7b\x50\x90\xe7\xb3\x2b\x66\x3d\xcf\xe6\xfe\x09\x58\x1e\x60\x07\x4a\x27\xfd\xe4\xba\xdc\x7c\x46\x95\x4d\x50\xe3\x7b\xd0\x48\x03\xe7\xc1\xaa\x8d\x02\xcd\x36\x07\x52\xf7\xbf\x00\x00\x00\xff\xff\xf2\xa3\xc1\xaf\xf3\x02\x00\x00")

func dataProxifierWin81SpyIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81SpyIpsTxt,
		"data/proxifier/win81/spy/ips.txt",
	)
}

func dataProxifierWin81SpyIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81SpyIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/spy/ips.txt", size: 755, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81UpdateDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\x2b\x2d\x48\x49\x2c\x49\xd5\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\xd1\x4b\xce\xcf\xb5\xe6\xd2\xd2\x2b\xcf\xcc\x4b\xc9\x2f\x2f\x86\x4a\xc3\x04\x8b\xd1\x15\xa6\xa5\x1a\xe9\x95\x17\xa2\x8b\xc2\xb9\xa8\xa6\xe4\xa5\x96\x58\x73\x61\x31\x18\x22\x04\x15\xc9\x2f\x4a\xb7\x06\x04\x00\x00\xff\xff\x46\x45\x72\x47\x97\x00\x00\x00")

func dataProxifierWin81UpdateDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81UpdateDomainsTxt,
		"data/proxifier/win81/update/domains.txt",
	)
}

func dataProxifierWin81UpdateDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81UpdateDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/update/domains.txt", size: 151, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81UpdateIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\x5b\xce\xac\x30\x0c\x03\xe0\x77\xf6\x32\x56\x9d\x5b\x53\xb1\xff\x7d\x1d\x95\x39\xff\x90\xf4\x8d\xcf\xc1\x52\x1b\xa0\x82\x63\xc2\xe0\xe3\xbe\x64\x43\xc1\x5c\xa0\xf8\xe1\xe8\xf6\x79\x38\xef\x2b\x1c\xee\xa0\x26\xc6\xe7\x7d\x16\xf7\xdf\x28\xf4\x1d\x85\xd6\x91\x98\x40\xdc\xee\x8b\x4a\x88\x2b\x68\xa0\xeb\xb6\x81\x73\xc0\x89\xf1\x29\x78\xba\x3f\x2b\x64\x35\xea\x28\xcc\x5a\xcd\x5e\x25\x1d\x1e\xdd\x31\x0e\x4b\x71\xec\xc3\xe6\x19\xac\x23\x70\x9e\xc1\xbe\x8b\xcf\xef\x5d\x07\x72\x35\x3e\xfb\x2d\x16\x19\xff\x1d\x98\x73\xef\xb1\x73\x35\x5a\x7f\xd9\xd8\xd9\xbb\xf6\x76\x57\xe0\x59\xf9\xab\xac\xa2\x68\xe3\xfe\xe6\x5c\x84\xa8\x20\xf7\x96\x1b\x9f\xa5\x15\xca\x4b\xea\x02\xf3\x08\xa4\xf6\xbf\x81\xfd\x05\x86\x29\x60\xea\xe1\xbc\x2f\xd9\x7f\x6b\x80\xb4\xe7\xb0\x85\xc1\xfb\x5f\x00\x00\x00\xff\xff\x28\xa9\x44\xfc\xce\x02\x00\x00")

func dataProxifierWin81UpdateIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81UpdateIpsTxt,
		"data/proxifier/win81/update/ips.txt",
	)
}

func dataProxifierWin81UpdateIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81UpdateIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/update/ips.txt", size: 718, mode: os.FileMode(438), modTime: time.Unix(1498767412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin10ExtraBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin10ExtraBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin10ExtraBlocklistXml,
		"data/simplewall/win10/extra/blocklist.xml",
	)
}

func dataSimplewallWin10ExtraBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin10ExtraBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win10/extra/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin10SpyBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin10SpyBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin10SpyBlocklistXml,
		"data/simplewall/win10/spy/blocklist.xml",
	)
}

func dataSimplewallWin10SpyBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin10SpyBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win10/spy/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin10UpdateBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin10UpdateBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin10UpdateBlocklistXml,
		"data/simplewall/win10/update/blocklist.xml",
	)
}

func dataSimplewallWin10UpdateBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin10UpdateBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win10/update/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin7ExtraBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin7ExtraBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin7ExtraBlocklistXml,
		"data/simplewall/win7/extra/blocklist.xml",
	)
}

func dataSimplewallWin7ExtraBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin7ExtraBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win7/extra/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin7SpyBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin7SpyBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin7SpyBlocklistXml,
		"data/simplewall/win7/spy/blocklist.xml",
	)
}

func dataSimplewallWin7SpyBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin7SpyBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win7/spy/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin7UpdateBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin7UpdateBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin7UpdateBlocklistXml,
		"data/simplewall/win7/update/blocklist.xml",
	)
}

func dataSimplewallWin7UpdateBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin7UpdateBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win7/update/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin81ExtraBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin81ExtraBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin81ExtraBlocklistXml,
		"data/simplewall/win81/extra/blocklist.xml",
	)
}

func dataSimplewallWin81ExtraBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin81ExtraBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win81/extra/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin81SpyBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin81SpyBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin81SpyBlocklistXml,
		"data/simplewall/win81/spy/blocklist.xml",
	)
}

func dataSimplewallWin81SpyBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin81SpyBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win81/spy/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSimplewallWin81UpdateBlocklistXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\x67\xf2\x14\x87\x57\x70\x6c\x17\x42\xab\x28\x49\x25\x46\x44\x17\x18\x18\x2b\x27\x39\xa8\x85\xed\x8b\x6c\x07\x12\x9e\x1e\x61\x2a\x24\xc6\xff\xee\xbe\xef\xa4\xbf\xb9\xe4\x1c\x9e\x66\x8b\x11\x12\x41\x6f\x69\x78\x87\x17\xe3\x47\xfa\x8c\x10\xa7\x15\x04\x24\xb4\xe8\x30\x85\x15\x38\xef\x8a\x7c\x7f\x4a\x69\x8a\xb5\x10\x6f\x26\x9d\xe6\xbe\x1c\xc8\x89\x21\xe8\xaf\x95\x3b\xbd\x88\x33\xfd\x3c\xad\xf7\x3f\x36\x0c\x99\xfb\x05\x1f\x75\x4c\xfc\x40\xa3\x79\x35\x38\xd6\x70\x20\x7f\x0d\xb2\x82\x87\xd9\xc3\x46\xaa\x2d\xa8\x6d\x5d\xdd\xd5\x72\x07\x57\x52\x4a\x79\x06\xf7\x8b\xb3\xf0\x81\x21\x1a\xf2\x2d\x53\xa5\x64\xfb\xae\x68\x02\x51\xea\x8a\x8b\xc6\x24\x74\xe0\xb5\xc3\x96\xe1\x92\x82\x3e\xaa\x9b\x72\x27\x4b\xb5\x29\xab\x5b\x06\x61\xb6\xd8\xb2\x7f\xa3\xd1\x84\x96\x49\x06\x53\xa0\x44\x03\xd9\x1c\xfe\xf4\x92\x81\x89\xc7\xdc\x43\xcb\x54\x0e\xe8\x75\x6f\x71\xcc\x3b\xd1\x15\x8d\xc8\xaf\xbf\x03\x00\x00\xff\xff\xaa\x9e\x4b\x7c\x39\x01\x00\x00")

func dataSimplewallWin81UpdateBlocklistXmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSimplewallWin81UpdateBlocklistXml,
		"data/simplewall/win81/update/blocklist.xml",
	)
}

func dataSimplewallWin81UpdateBlocklistXml() (*asset, error) {
	bytes, err := dataSimplewallWin81UpdateBlocklistXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/simplewall/win81/update/blocklist.xml", size: 313, mode: os.FileMode(438), modTime: time.Unix(1498770657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4b\x6b\xe3\x30\x10\xc7\xef\xf9\x14\x83\x60\x2f\xa1\x91\xd6\x6e\x9c\xed\xfa\xda\x5e\x0a\xdb\x6d\x20\x2c\x39\x94\x1e\x14\x59\x76\x44\x6d\x8d\x90\xe4\x3c\x58\xf2\xdd\x17\x29\xf1\x0b\x72\x58\x84\x61\xe6\xa7\x99\xff\x3c\xe4\xbf\x33\x00\x72\x90\xd6\x29\xd4\x24\x07\xb2\xa4\x2b\x9a\x90\x87\x40\x0b\xb9\x6b\x2b\x92\x43\xc9\x6b\x27\x23\x31\x16\x4f\xaa\x54\xd2\x92\x1c\x42\x22\x00\xa9\xb1\x5a\x73\xbf\x0f\xa9\xcf\x39\xfb\xe3\xa4\x75\xec\xa3\x75\xd2\x6a\xde\xc8\x4f\xf6\x82\xa2\x6d\xa4\xf6\x8e\xad\xbb\x5c\xf6\x0b\x2b\xea\x4f\x9e\xcc\x00\x2e\x51\xd6\x9d\x5d\x13\xab\xdf\x34\xe5\xc1\x9f\x46\xa2\xdb\xd7\xdf\x2f\xef\xdb\x0d\x73\x67\xe7\x65\xf3\x98\xb2\xa3\xd2\xf2\xe0\x83\x8e\x63\x6f\x4a\x58\x74\x58\xfa\xc5\x56\xe9\x02\x8f\x6e\xb1\x89\x6a\xdf\x96\xef\x46\x5a\xee\x15\x6a\x5e\xd3\xa0\x38\xd4\x3b\x2a\x2b\xdd\x9e\xdb\xaf\xa1\xa4\x11\xdc\xe8\xff\x9c\x64\xdb\xa5\x33\xc1\x0d\xbd\x66\xc6\x8d\x01\x10\xc1\x8d\x6f\xad\xec\x85\x01\x88\xd2\x5e\xda\x92\x8b\x00\x93\x87\x8e\x96\xaa\xf6\x71\x8f\x44\xa3\x07\x6e\x0d\x70\x5d\x80\x41\xeb\x21\x80\xec\x31\xfa\xc1\x54\xa2\x31\x13\x67\xd5\x7b\x3b\x8b\xbc\x10\xdc\xc5\x5d\x02\x5c\xfa\x09\xe5\x49\xd4\x6d\x31\xb4\x41\x94\x71\x24\x87\x8f\xae\xfa\x77\x1a\x0f\xe9\xdb\x49\xd2\x1f\x11\x25\x23\xf4\x33\xa5\xc9\xea\x29\xe0\xc5\x60\xa7\x59\x36\x84\x3c\xd1\x78\xa6\x60\x49\x97\x03\x48\xb3\x8c\x8e\xbe\x6b\x9f\x9f\xb7\x65\xed\xd1\xf9\x49\x5b\x6f\xe7\x67\x6c\x4c\x1b\x16\xd3\x2b\xd4\x28\x78\x1d\x22\xef\x20\x1a\xad\x02\x1b\xae\xf4\x70\x3d\xbf\xe2\x01\x9c\xb1\xb5\xaf\x9b\x35\x15\xd8\x8c\xa3\xee\xe2\xfe\xdf\xa0\x68\xab\x71\xf4\xf4\x62\x32\x07\xda\x6a\x32\xc6\x3c\xbc\xf6\x0e\xf1\x6b\x7e\x8b\x0b\xef\x32\xbb\xcc\xfe\x05\x00\x00\xff\xff\xb6\x5b\x59\x06\x6c\x03\x00\x00")

func appConfBytes() ([]byte, error) {
	return bindataRead(
		_appConf,
		"app.conf",
	)
}

func appConf() (*asset, error) {
	bytes, err := appConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.conf", size: 876, mode: os.FileMode(438), modTime: time.Unix(1497725934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dnscrypt/win10/extra.txt": dataDnscryptWin10ExtraTxt,
	"data/dnscrypt/win10/spy.txt": dataDnscryptWin10SpyTxt,
	"data/dnscrypt/win10/update.txt": dataDnscryptWin10UpdateTxt,
	"data/dnscrypt/win7/extra.txt": dataDnscryptWin7ExtraTxt,
	"data/dnscrypt/win7/spy.txt": dataDnscryptWin7SpyTxt,
	"data/dnscrypt/win7/update.txt": dataDnscryptWin7UpdateTxt,
	"data/dnscrypt/win81/extra.txt": dataDnscryptWin81ExtraTxt,
	"data/dnscrypt/win81/spy.txt": dataDnscryptWin81SpyTxt,
	"data/dnscrypt/win81/update.txt": dataDnscryptWin81UpdateTxt,
	"data/firewall/win10/extra.txt": dataFirewallWin10ExtraTxt,
	"data/firewall/win10/spy.txt": dataFirewallWin10SpyTxt,
	"data/firewall/win10/update.txt": dataFirewallWin10UpdateTxt,
	"data/firewall/win7/extra.txt": dataFirewallWin7ExtraTxt,
	"data/firewall/win7/spy.txt": dataFirewallWin7SpyTxt,
	"data/firewall/win7/update.txt": dataFirewallWin7UpdateTxt,
	"data/firewall/win81/extra.txt": dataFirewallWin81ExtraTxt,
	"data/firewall/win81/spy.txt": dataFirewallWin81SpyTxt,
	"data/firewall/win81/update.txt": dataFirewallWin81UpdateTxt,
	"data/hosts/win10/extra.txt": dataHostsWin10ExtraTxt,
	"data/hosts/win10/spy.txt": dataHostsWin10SpyTxt,
	"data/hosts/win10/update.txt": dataHostsWin10UpdateTxt,
	"data/hosts/win7/extra.txt": dataHostsWin7ExtraTxt,
	"data/hosts/win7/spy.txt": dataHostsWin7SpyTxt,
	"data/hosts/win7/update.txt": dataHostsWin7UpdateTxt,
	"data/hosts/win81/extra.txt": dataHostsWin81ExtraTxt,
	"data/hosts/win81/spy.txt": dataHostsWin81SpyTxt,
	"data/hosts/win81/update.txt": dataHostsWin81UpdateTxt,
	"data/ncsi/ncsi.txt": dataNcsiNcsiTxt,
	"data/openwrt/win10/extra/dnsmasq.conf": dataOpenwrtWin10ExtraDnsmasqConf,
	"data/openwrt/win10/extra/firewall.user": dataOpenwrtWin10ExtraFirewallUser,
	"data/openwrt/win10/spy/dnsmasq.conf": dataOpenwrtWin10SpyDnsmasqConf,
	"data/openwrt/win10/spy/firewall.user": dataOpenwrtWin10SpyFirewallUser,
	"data/openwrt/win10/update/dnsmasq.conf": dataOpenwrtWin10UpdateDnsmasqConf,
	"data/openwrt/win10/update/firewall.user": dataOpenwrtWin10UpdateFirewallUser,
	"data/openwrt/win7/extra/dnsmasq.conf": dataOpenwrtWin7ExtraDnsmasqConf,
	"data/openwrt/win7/extra/firewall.user": dataOpenwrtWin7ExtraFirewallUser,
	"data/openwrt/win7/spy/dnsmasq.conf": dataOpenwrtWin7SpyDnsmasqConf,
	"data/openwrt/win7/spy/firewall.user": dataOpenwrtWin7SpyFirewallUser,
	"data/openwrt/win7/update/dnsmasq.conf": dataOpenwrtWin7UpdateDnsmasqConf,
	"data/openwrt/win7/update/firewall.user": dataOpenwrtWin7UpdateFirewallUser,
	"data/openwrt/win81/extra/dnsmasq.conf": dataOpenwrtWin81ExtraDnsmasqConf,
	"data/openwrt/win81/extra/firewall.user": dataOpenwrtWin81ExtraFirewallUser,
	"data/openwrt/win81/spy/dnsmasq.conf": dataOpenwrtWin81SpyDnsmasqConf,
	"data/openwrt/win81/spy/firewall.user": dataOpenwrtWin81SpyFirewallUser,
	"data/openwrt/win81/update/dnsmasq.conf": dataOpenwrtWin81UpdateDnsmasqConf,
	"data/openwrt/win81/update/firewall.user": dataOpenwrtWin81UpdateFirewallUser,
	"data/proxifier/win10/extra/domains.txt": dataProxifierWin10ExtraDomainsTxt,
	"data/proxifier/win10/extra/ips.txt": dataProxifierWin10ExtraIpsTxt,
	"data/proxifier/win10/spy/domains.txt": dataProxifierWin10SpyDomainsTxt,
	"data/proxifier/win10/spy/ips.txt": dataProxifierWin10SpyIpsTxt,
	"data/proxifier/win10/update/domains.txt": dataProxifierWin10UpdateDomainsTxt,
	"data/proxifier/win10/update/ips.txt": dataProxifierWin10UpdateIpsTxt,
	"data/proxifier/win7/extra/domains.txt": dataProxifierWin7ExtraDomainsTxt,
	"data/proxifier/win7/extra/ips.txt": dataProxifierWin7ExtraIpsTxt,
	"data/proxifier/win7/spy/domains.txt": dataProxifierWin7SpyDomainsTxt,
	"data/proxifier/win7/spy/ips.txt": dataProxifierWin7SpyIpsTxt,
	"data/proxifier/win7/update/domains.txt": dataProxifierWin7UpdateDomainsTxt,
	"data/proxifier/win7/update/ips.txt": dataProxifierWin7UpdateIpsTxt,
	"data/proxifier/win81/extra/domains.txt": dataProxifierWin81ExtraDomainsTxt,
	"data/proxifier/win81/extra/ips.txt": dataProxifierWin81ExtraIpsTxt,
	"data/proxifier/win81/spy/domains.txt": dataProxifierWin81SpyDomainsTxt,
	"data/proxifier/win81/spy/ips.txt": dataProxifierWin81SpyIpsTxt,
	"data/proxifier/win81/update/domains.txt": dataProxifierWin81UpdateDomainsTxt,
	"data/proxifier/win81/update/ips.txt": dataProxifierWin81UpdateIpsTxt,
	"data/simplewall/win10/extra/blocklist.xml": dataSimplewallWin10ExtraBlocklistXml,
	"data/simplewall/win10/spy/blocklist.xml": dataSimplewallWin10SpyBlocklistXml,
	"data/simplewall/win10/update/blocklist.xml": dataSimplewallWin10UpdateBlocklistXml,
	"data/simplewall/win7/extra/blocklist.xml": dataSimplewallWin7ExtraBlocklistXml,
	"data/simplewall/win7/spy/blocklist.xml": dataSimplewallWin7SpyBlocklistXml,
	"data/simplewall/win7/update/blocklist.xml": dataSimplewallWin7UpdateBlocklistXml,
	"data/simplewall/win81/extra/blocklist.xml": dataSimplewallWin81ExtraBlocklistXml,
	"data/simplewall/win81/spy/blocklist.xml": dataSimplewallWin81SpyBlocklistXml,
	"data/simplewall/win81/update/blocklist.xml": dataSimplewallWin81UpdateBlocklistXml,
	"app.conf": appConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.conf": &bintree{appConf, map[string]*bintree{}},
	"data": &bintree{nil, map[string]*bintree{
		"dnscrypt": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataDnscryptWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataDnscryptWin10SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataDnscryptWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataDnscryptWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataDnscryptWin7SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataDnscryptWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataDnscryptWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataDnscryptWin81SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataDnscryptWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"firewall": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataFirewallWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataFirewallWin10SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataFirewallWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataFirewallWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataFirewallWin7SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataFirewallWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataFirewallWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataFirewallWin81SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataFirewallWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"hosts": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataHostsWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataHostsWin10SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataHostsWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataHostsWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataHostsWin7SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataHostsWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataHostsWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataHostsWin81SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataHostsWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"ncsi": &bintree{nil, map[string]*bintree{
			"ncsi.txt": &bintree{dataNcsiNcsiTxt, map[string]*bintree{}},
		}},
		"openwrt": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin10ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin10ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin10SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin10SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin10UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin10UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin7ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin7ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin7SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin7SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin7UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin7UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin81ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin81ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin81SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin81SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin81UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin81UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
		}},
		"proxifier": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin10ExtraDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin10ExtraIpsTxt, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin10SpyDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin10SpyIpsTxt, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin10UpdateDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin10UpdateIpsTxt, map[string]*bintree{}},
				}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin7ExtraDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin7ExtraIpsTxt, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin7SpyDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin7SpyIpsTxt, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin7UpdateDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin7UpdateIpsTxt, map[string]*bintree{}},
				}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin81ExtraDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin81ExtraIpsTxt, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin81SpyDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin81SpyIpsTxt, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin81UpdateDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin81UpdateIpsTxt, map[string]*bintree{}},
				}},
			}},
		}},
		"simplewall": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin10ExtraBlocklistXml, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin10SpyBlocklistXml, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin10UpdateBlocklistXml, map[string]*bintree{}},
				}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin7ExtraBlocklistXml, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin7SpyBlocklistXml, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin7UpdateBlocklistXml, map[string]*bintree{}},
				}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin81ExtraBlocklistXml, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin81SpyBlocklistXml, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"blocklist.xml": &bintree{dataSimplewallWin81UpdateBlocklistXml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

