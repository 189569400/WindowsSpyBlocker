// Code generated by go-bindata.
// sources:
// data/dnscrypt/win10/extra.txt
// data/dnscrypt/win10/spy.txt
// data/dnscrypt/win10/update.txt
// data/dnscrypt/win7/extra.txt
// data/dnscrypt/win7/spy.txt
// data/dnscrypt/win7/update.txt
// data/dnscrypt/win81/extra.txt
// data/dnscrypt/win81/spy.txt
// data/dnscrypt/win81/update.txt
// data/firewall/win10/extra.txt
// data/firewall/win10/spy.txt
// data/firewall/win10/update.txt
// data/firewall/win7/extra.txt
// data/firewall/win7/spy.txt
// data/firewall/win7/update.txt
// data/firewall/win81/extra.txt
// data/firewall/win81/spy.txt
// data/firewall/win81/update.txt
// data/hosts/win10/extra.txt
// data/hosts/win10/spy.txt
// data/hosts/win10/update.txt
// data/hosts/win7/extra.txt
// data/hosts/win7/spy.txt
// data/hosts/win7/update.txt
// data/hosts/win81/extra.txt
// data/hosts/win81/spy.txt
// data/hosts/win81/update.txt
// data/ncsi/github.com.reg
// data/ncsi/msftncsi.com.reg
// data/ncsi/ncsi.txt
// data/openwrt/win10/extra/dnsmasq.conf
// data/openwrt/win10/extra/firewall.user
// data/openwrt/win10/spy/dnsmasq.conf
// data/openwrt/win10/spy/firewall.user
// data/openwrt/win10/update/dnsmasq.conf
// data/openwrt/win10/update/firewall.user
// data/openwrt/win7/extra/dnsmasq.conf
// data/openwrt/win7/extra/firewall.user
// data/openwrt/win7/spy/dnsmasq.conf
// data/openwrt/win7/spy/firewall.user
// data/openwrt/win7/update/dnsmasq.conf
// data/openwrt/win7/update/firewall.user
// data/openwrt/win81/extra/dnsmasq.conf
// data/openwrt/win81/extra/firewall.user
// data/openwrt/win81/spy/dnsmasq.conf
// data/openwrt/win81/spy/firewall.user
// data/openwrt/win81/update/dnsmasq.conf
// data/openwrt/win81/update/firewall.user
// data/proxifier/win10/extra.txt
// data/proxifier/win10/spy.txt
// data/proxifier/win10/update.txt
// data/proxifier/win7/extra.txt
// data/proxifier/win7/spy.txt
// data/proxifier/win7/update.txt
// data/proxifier/win81/extra.txt
// data/proxifier/win81/spy.txt
// data/proxifier/win81/update.txt
// app.conf
// libs.conf
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDnscryptWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xd1\x92\xdb\x30\x08\x45\xdf\xf3\x29\x9e\x31\x0f\xfb\x47\x5a\x84\x64\x26\x06\x34\x82\xc6\x69\xbf\xbe\xb3\x72\x36\x89\xdd\xee\x23\x17\x71\xe0\x5e\x4d\xf0\x21\x59\x41\x29\x2e\x49\x7d\xa3\xee\x20\x8c\xdd\xdc\x4a\x00\x9a\x5c\x52\x6b\x0e\x7e\xfd\xdd\x68\x94\x98\x15\xd0\x34\x48\x03\x5a\xb7\x0c\x28\x0e\xe2\xba\x37\x17\x63\xa4\x13\xe0\x7f\x22\xa8\xa7\xc0\xb1\x15\x57\xfe\x62\x6d\xea\xb0\xb1\x66\xdb\x7c\x9f\x1a\x32\x9a\x16\xae\xd0\x92\x7b\xb3\x1e\x63\x20\x4b\x06\xa1\x48\x4e\xfd\xc6\x48\xe7\x7b\x0b\x51\xfe\x4c\x78\x7d\xc9\xf3\x62\x8b\x1c\x7b\x4e\xa9\xe3\xf2\xd3\xe4\xfb\x1d\x15\x56\xbe\xed\xd6\x59\xea\xec\xb3\xb8\xce\x5f\x0e\xd2\x35\x49\xe2\x3f\x94\xc7\x51\x2b\x23\xa9\xb3\x56\x90\x76\xc2\xae\x56\x59\x5f\x14\x81\xc5\x42\x12\xaf\xa3\x9a\x40\xc8\x9d\xb4\x52\x7f\x3d\x99\x40\xbc\x84\xa2\xf3\x28\xad\x14\x46\x7a\xe4\x74\x64\x9b\x7e\xeb\x5e\xee\x20\x7e\x69\x9d\x91\x56\xf6\x78\xfb\xb2\x6f\xb3\x8f\x4f\xf2\xb0\x4e\x33\x4b\xaa\xe4\xe0\xf3\x11\x38\x9a\x94\x2b\x95\x0c\xd9\xef\xff\xba\x09\x16\x3a\x04\x14\xd7\x0f\x68\x6b\x3c\xf1\xbf\xf8\x6d\xf5\x8d\x69\x83\x14\x59\xe2\x61\xec\x66\x20\x4e\xa8\x7b\x6a\x13\x6c\x94\x62\xa1\x7e\x5a\x32\xc1\xfd\xd3\xee\xcf\x3c\xfe\x06\x00\x00\xff\xff\xbb\x54\x9b\x32\xa4\x02\x00\x00")

func dataDnscryptWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10ExtraTxt,
		"data/dnscrypt/win10/extra.txt",
	)
}

func dataDnscryptWin10ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/extra.txt", size: 676, mode: os.FileMode(438), modTime: time.Unix(1493751050, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x96\x5b\x92\xab\x38\x0c\x86\xdf\xcf\x52\x52\x85\x0a\x43\x9f\x9e\xce\x72\x84\xad\x80\xab\x7d\x1b\xcb\x40\xb2\xfb\x29\x20\x21\xc4\x21\x4c\x9e\xc2\xff\xd9\xba\xd8\x12\xe2\x04\x58\x58\x26\xd5\x12\x38\x4a\x7f\x4e\x80\x8a\x4f\x60\xd9\x81\xf4\xf6\xf9\x88\x8a\x67\x8e\xb2\x5e\x21\xca\xa4\x07\x9d\x6e\x30\x6a\xa7\xfc\xc8\xeb\x0e\x47\xd7\x9e\x57\x73\xee\xba\x12\x3b\xdb\x22\xe9\x1e\x30\x29\x9b\x16\x5b\xbf\x58\x48\xe5\x0a\xc7\x80\x2a\x91\xec\x40\xd1\x9f\x46\xbb\x76\x72\x6c\xb5\x8c\x9e\xfd\x65\x59\xda\x98\xba\x2e\x45\x81\x20\x54\x1c\xb6\x8a\x7c\x53\xda\x8d\xe2\x44\x5d\x7e\x15\x94\x29\xdf\x2f\x76\x16\xe5\x7d\xcd\x8b\x9d\xaa\x29\xa4\x8f\x65\x29\x00\x83\x86\x30\xfd\xd9\xd0\x3a\x1c\xd1\xc7\xde\x7a\x8f\xde\xde\xf2\xba\xbd\xe5\xb5\x28\xdb\x08\x19\x98\xe2\xa0\x5d\x5b\xf0\x6d\x39\x68\xb9\xde\x90\x44\xd9\x11\x28\x4c\x68\x31\xa6\x97\x7b\x92\x9d\xf8\x1c\xe8\x0a\xab\x5d\x98\x47\x75\x57\xe8\x4d\x69\x33\xa5\x7a\xdb\x55\xbd\xec\xf2\x36\x60\xa2\xab\xec\xd0\xb5\x04\xd2\xf8\x5e\x61\x08\x73\xb1\xbc\x32\x01\x29\xe2\xe5\xa2\xa5\x45\x87\x2d\xc5\xfb\x92\x18\x80\x53\x5e\x2f\x32\x88\x52\x14\x21\x7a\x05\xca\x83\xe2\x00\x36\xe4\x4b\x58\xc0\x18\x24\x0c\xa5\x54\x4b\x6d\xaa\xa6\x1e\x1d\x57\xa5\x98\x7e\x30\x3a\x7e\x39\x3c\xd5\xfc\xdd\xd3\x58\x76\xa2\x14\xa2\x2c\xcf\xe2\x9f\x23\x2e\xfe\xee\xdb\x5c\xf9\x59\x7c\x1d\xf3\xfa\x7c\xc0\x45\xf9\x5d\x7d\x1f\xf3\xfa\xc8\xbe\x28\x7f\xaa\xa3\xf8\x26\x5e\x1d\xc6\xf7\x23\xea\x8f\xbc\x9e\xac\x1f\xe4\x3f\xf1\xaf\xf2\x73\xfc\x75\x79\xae\xaa\x72\x37\xff\xd1\xb1\x50\x3b\xe0\x7b\xde\x58\x95\x67\x21\xca\xbd\x8b\x7b\xf2\x2f\xb1\x93\x98\xc6\xd6\x79\x4e\x5a\x32\x70\x1f\x82\x8f\x29\x2b\x1f\xea\x61\xf0\x31\xd1\x75\x6e\xb5\x0c\x5e\x0c\x5d\xd7\x86\x6c\x9f\xff\xc8\x1f\xd7\x64\x4b\x7e\xa0\x78\xbc\xe6\x04\xad\x69\x94\xe3\x2a\xd3\x3b\xb1\xfa\xe9\xaa\xf5\xaf\x2e\xd8\x55\x9f\x9b\x7e\x83\xf7\xda\xfe\x77\xf8\xdf\x36\x32\x8d\x80\x71\x1c\xc1\x32\xe0\x2f\x2a\xb7\xcc\x00\xc3\xd5\x48\x0d\x44\x52\xd6\x3b\x05\x73\x97\xe6\x69\x18\x2f\x31\x69\xef\xc0\xe8\x61\x19\x44\x76\x33\x39\xac\x6f\xb4\x21\x08\x3a\x10\x60\xd4\xf9\x09\xcf\x33\xe5\x31\xc0\x2c\xbb\x44\x9c\xde\x5e\x8a\xcb\x4c\xf2\xd3\x3b\x83\x30\x04\x5e\x3c\xad\x24\xf6\x86\xf6\xb1\x77\xc4\x94\x92\x76\x2d\x17\x27\xb0\x94\xe2\x23\x4c\xe9\x2d\x38\xc6\x24\x67\xc7\x21\x12\x5c\xbc\x4f\x21\x6a\x97\x42\x24\xa5\xe5\x12\x5e\x88\x34\x68\x1a\x37\x33\x35\xa2\x7a\xda\x5f\x1e\x5f\x20\xaf\x8f\x93\x99\x38\x39\xc5\x39\x1f\x49\xf9\xcb\x8d\x65\x47\x16\xb7\xea\xe6\xe4\x99\x64\x3f\x45\x65\x90\xbb\x84\xe6\x57\xbb\xf6\xee\x64\xb5\xc6\x5e\x6a\x34\xb9\xd1\x47\xbe\x8c\x4e\x35\x7e\xb7\xac\xd7\x35\xa3\x76\x47\x7c\x97\xb9\x7c\x82\xdc\x15\x7a\x53\x36\x13\x84\xc3\xcd\x51\xca\x4b\x7d\x51\xd1\xe4\x3d\xb9\xe8\xd4\x47\x1f\xe8\xc3\xe9\xf0\xf8\xbc\x05\x4e\x3e\x92\xc4\x84\xc6\xb7\x91\x86\x47\x39\xce\xf2\xbf\x3d\x9a\xe9\x33\x27\x73\xd0\xc7\x81\x6e\x30\x62\x62\xef\xde\x2a\x32\x91\xa1\xa9\x56\x6e\x80\x21\xd0\x15\xa6\x4f\x99\xfb\x47\xcf\x13\x7d\xde\xf4\x42\x36\x45\xb6\x5d\xd3\xc7\xbc\x18\x12\x5f\xe8\x31\x18\xb9\xc3\x30\xf9\xdc\x6d\xd4\x81\x22\x4f\xe9\x75\xb7\x26\x6a\x35\x37\x7b\x47\xf1\x51\x8f\x83\x8e\xa9\x47\x43\x18\x53\x77\xf7\xba\xbc\xde\x4e\x7b\x97\x99\xc3\x8f\x0d\xb2\x2c\x3b\xec\xa1\xfb\x61\xae\xb7\xb2\x7b\xb8\xa3\x76\xa2\x04\x1d\x86\xef\x0c\xfc\x17\x00\x00\xff\xff\x47\x28\x64\x0e\xcb\x0a\x00\x00")

func dataDnscryptWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10SpyTxt,
		"data/dnscrypt/win10/spy.txt",
	)
}

func dataDnscryptWin10SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/spy.txt", size: 2763, mode: os.FileMode(438), modTime: time.Unix(1493751038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\x90\x8b\x64\x78\x77\x12\x96\x1a\x4c\x6d\xcb\x58\x6a\x4d\x6e\x5f\x68\x5c\xda\x86\x0c\x59\x3f\x7e\xe9\x2d\x60\x49\xf1\x29\x6d\x03\x5b\x45\xae\xc8\x31\x34\x35\xbd\x39\x82\x66\x14\x23\x0f\x28\xe2\xf3\xf4\x93\x1e\xb3\x79\xe2\x68\x35\xd1\x16\xc8\x29\xe9\x7a\x12\x48\xe6\x84\x6e\x47\x5e\xbe\xd0\x63\x61\xed\xf6\xa8\x4c\x2e\x9f\xc9\x7f\x1c\x27\x3b\x0e\xd3\xb6\xbe\xed\xe4\xf5\x28\x2e\x39\xe8\x4e\x5c\x6c\xdf\x7d\x05\x00\x00\xff\xff\xf6\x0b\xac\x88\x16\x01\x00\x00")

func dataDnscryptWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10UpdateTxt,
		"data/dnscrypt/win10/update.txt",
	)
}

func dataDnscryptWin10UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/update.txt", size: 278, mode: os.FileMode(438), modTime: time.Unix(1480308837, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x4b\x0a\xc3\x30\x0c\x05\xf7\x81\x5c\xa4\x0b\x2d\x7a\x23\x57\x56\xcc\x03\x4b\x0a\x91\xea\x5c\xbf\x0b\x53\x28\xfd\x40\x77\x33\x23\x04\xaf\x70\x62\x94\x84\x1b\x45\x0f\x52\xf0\xe1\xe1\x5b\x12\xbb\xae\x0b\xfb\xf5\x6b\x3e\xfa\x7b\xaa\x5a\x49\x25\x4b\xc8\x31\xc0\xf2\xf1\xd2\xe8\x06\x6b\x4f\xee\x18\x32\xb9\x7b\x83\xbd\xf8\x85\x34\xb6\x34\x0e\x4c\x4f\xa8\xd0\x09\xab\x7e\xc6\x2c\xa3\x74\xd4\x9f\x8b\xcf\x60\xb7\xa4\xb2\xef\xff\x9f\x48\x6a\x93\xb8\x23\x85\x4c\x72\x5d\x1e\x01\x00\x00\xff\xff\xf5\x5e\xfd\x87\x14\x01\x00\x00")

func dataDnscryptWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7ExtraTxt,
		"data/dnscrypt/win7/extra.txt",
	)
}

func dataDnscryptWin7ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/extra.txt", size: 276, mode: os.FileMode(438), modTime: time.Unix(1474216641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xd1\x6a\xc3\x30\x0c\x45\xdf\x0b\xfd\x91\xc0\xc4\xe2\x65\x85\x7d\x8e\x66\xdf\x64\x66\xb6\x14\x6c\xb5\x69\xfe\x7e\x8c\x75\x10\x52\x3f\xe4\xf5\xdc\xe3\x83\xe5\x43\xed\xfb\xe1\x8d\x92\x0a\xa5\x24\x0b\x09\xec\x7c\xfa\xa5\xee\xf2\xf1\x4c\xdd\xeb\xe0\x06\x4a\x7e\xdd\x62\xcd\x33\x1b\xee\xfe\x8b\x65\x42\x4f\x56\x78\x1c\xa3\xcf\x2c\x3c\xa1\xfc\x39\xe1\xf3\x9d\x2a\xcc\xa2\x4c\x95\x02\x1b\x53\x8e\xbe\x68\xd5\xd1\xc8\x6b\x26\xfe\xe6\x20\xf5\xd1\x5b\xdd\x61\x17\x57\xba\x69\x31\xdc\x1b\xe2\xf9\x34\x41\x0f\x97\xfe\xbd\x97\x25\x4a\x33\x56\xe7\x55\x60\xae\x8d\x71\x2d\x3a\x63\xb3\x6d\xd3\x1d\x19\x12\x32\xac\xac\xfb\xd7\x86\x82\xa0\x14\xe7\xdb\x65\x3f\x75\x8f\xcb\xba\xe6\x6f\x16\xb6\xaa\xb2\xa7\x3f\x01\x00\x00\xff\xff\xba\x95\x7d\x5e\xce\x01\x00\x00")

func dataDnscryptWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7SpyTxt,
		"data/dnscrypt/win7/spy.txt",
	)
}

func dataDnscryptWin7SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/spy.txt", size: 462, mode: os.FileMode(438), modTime: time.Unix(1492273366, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xc9\x2f\xcf\xcb\xc9\x4f\x4c\xd1\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\xd1\x4b\xce\xcf\xe5\xe5\xd2\x42\x08\x94\x67\xe6\xa5\xe4\x97\x17\x97\x16\xa4\x24\x96\xa4\xea\xe5\xa5\x96\x80\x64\xa1\x3c\x0c\x5d\xa8\x8a\x51\x04\xa1\x62\xf9\x45\xe9\xbc\x5c\x80\x00\x00\x00\xff\xff\x5a\x74\x51\x96\x77\x00\x00\x00")

func dataDnscryptWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7UpdateTxt,
		"data/dnscrypt/win7/update.txt",
	)
}

func dataDnscryptWin7UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/update.txt", size: 119, mode: os.FileMode(438), modTime: time.Unix(1465712165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\x5d\x8a\xf3\x30\x0c\x7c\xff\xe0\xbb\x48\x21\x82\xed\x8d\x5c\x7b\x92\x0a\x2c\xdb\x2b\xa9\x71\x7a\xfb\xa5\x84\x96\xb2\xce\xf6\x4d\xd6\xfc\x79\x14\xa2\xf3\x1a\x9c\x6b\x99\xd6\x33\x59\x36\x12\x8e\x5a\xad\xce\x4e\xb1\xca\xff\x7f\x27\x0a\xad\x61\x9b\x74\x26\xb1\xb2\xef\x92\x24\x12\x78\x30\xe8\xca\x11\x83\x66\xa1\x0b\x97\xe5\x39\x67\x5e\xb1\xcf\x2c\x0b\x99\x5f\xc8\xa6\x97\x55\xae\x0b\x97\x37\xca\x89\xc4\x66\x2f\xd1\x78\x7f\x17\x6c\x3e\xbd\x72\x42\x6b\x43\xd8\xf7\x0d\x7a\xa7\xa6\x35\x51\x14\x23\xf5\xb1\xc1\xbb\x1e\xdb\xdb\xe7\x4e\x64\x12\xd4\x2d\x2a\x50\x7e\xeb\xcc\xab\x02\x69\xc1\x9c\x28\xd9\x46\xd2\x46\x67\xe7\x8c\xc1\xd5\x59\x40\x9d\x4b\xaa\xdd\xf6\xcd\x1a\x32\xa7\x4f\x57\xee\xc1\xad\x16\x72\x64\x08\x5c\xef\x03\x9e\xe2\x41\x7a\x47\xf0\x2b\x74\x20\x5b\xac\xc5\x0f\x8f\xf5\x27\x44\x8f\xa2\x76\x63\x07\x15\xf8\x93\xf8\xf5\xc1\xe4\x7c\x8c\xf5\xfe\xac\x6e\x08\x1a\xaf\x8f\xf5\x4f\x00\x00\x00\xff\xff\x87\x34\x18\x8d\x65\x02\x00\x00")

func dataDnscryptWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81ExtraTxt,
		"data/dnscrypt/win81/extra.txt",
	)
}

func dataDnscryptWin81ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/extra.txt", size: 613, mode: os.FileMode(438), modTime: time.Unix(1492270396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\x51\x6a\x80\x30\x0c\xc6\xf1\x77\xc1\x8b\x08\x06\xac\x30\xdc\x71\x42\x9b\x4a\x59\x9b\x96\x26\xda\x79\xfb\x3d\xb8\x0d\xb7\x75\xaf\xff\x1f\x24\x7c\x13\xe0\x9c\x84\xdc\x4e\xc0\xa4\xe3\x60\x9d\x98\xc5\x6c\x0b\xc4\xcc\x10\x23\xb7\xef\xbc\xae\xaf\x10\xed\xf5\x88\x42\xaa\x81\x77\x99\x5b\x60\x70\xa8\x08\x29\xd8\x9a\x25\x7b\x05\x9b\xd3\x38\x48\xb9\x98\xd4\xf4\x33\x46\xed\x03\x1d\x35\x17\x7a\x18\xbe\xa1\x63\xf9\xfc\xa9\xa8\xe2\xc9\xc0\x51\x1c\x2a\xfd\xb9\xf0\xc5\x4d\x7e\xd3\x04\x4a\x91\x12\x69\xbd\x3a\x54\xd1\xfb\x60\x13\x32\xee\x54\xef\x57\x13\x9c\xb9\x2a\xbd\x77\xa7\xdd\xf4\xef\xf2\x16\x78\x83\x50\xce\x97\x9f\xf0\x11\x00\x00\xff\xff\xe8\xd1\xbf\x4a\x6e\x01\x00\x00")

func dataDnscryptWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81SpyTxt,
		"data/dnscrypt/win81/spy.txt",
	)
}

func dataDnscryptWin81SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/spy.txt", size: 366, mode: os.FileMode(438), modTime: time.Unix(1492270432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcb\xd1\x0a\x02\x21\x10\x85\xe1\xfb\x85\x7d\x91\x2e\x0e\xac\xb4\x0f\xb4\xe9\x28\x42\x3a\xa5\xd6\xbc\x7e\x44\x42\x88\x35\x97\xf3\x9f\xf9\x2e\x01\xcf\x33\x0e\xb8\x2b\xa4\x22\x45\x5b\xb8\xb2\x6f\xb0\x9c\xd6\xe5\x33\x52\xfa\x33\x6e\x2a\xdd\x54\x6b\x54\x6b\x54\xbb\xab\x76\x57\xac\x27\x03\xb9\xff\xac\xd3\xef\xe9\x1b\x24\x66\xc7\x52\x1f\x37\x77\x34\x42\xa6\xf6\x5e\xfb\x35\xa9\xf1\x79\x88\xbd\x71\x09\xeb\xf2\x0a\x00\x00\xff\xff\xf7\xb5\xfc\x7e\x79\x01\x00\x00")

func dataDnscryptWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81UpdateTxt,
		"data/dnscrypt/win81/update.txt",
	)
}

func dataDnscryptWin81UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/update.txt", size: 377, mode: os.FileMode(438), modTime: time.Unix(1478463125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xd0\x3b\x8f\xe2\x30\x10\x07\xf0\xde\x92\xbf\x43\x24\xea\xfc\xe3\x79\xf8\x45\x79\xfd\x55\x57\x5c\x9d\xe3\xc2\x12\x2d\x10\x14\xb2\x02\xf6\xd3\xaf\x1c\x5e\x29\x2c\xcd\x4f\xff\xf1\x8c\xe5\xd5\x6a\x55\x6d\xfb\xb1\xbb\xb4\xfb\x7d\x75\xe9\x8f\xe4\xaa\xee\x3a\x8d\xad\x35\x25\xf9\x3d\x8c\x5d\xd5\x1f\xb7\xc3\xba\xda\x4d\xd3\xe9\xbc\x6e\x9a\x8f\x7e\xda\x7d\xfd\xc3\x66\x38\x34\x9b\xb1\xfd\xbe\xd5\x87\xf6\xda\xfc\xed\x8f\xff\x87\xcb\xf9\xcf\xe9\xf6\x6b\x3f\x6c\x3e\xbb\xd1\x1a\x6b\x48\x90\x1c\x88\xe1\x75\x06\xb9\x08\x01\x71\x7a\x89\x09\xec\x9c\x35\xea\x10\x23\x98\x03\x5c\xfd\xae\xd9\xfb\x39\x22\x4a\x20\x27\x88\xd6\x04\x85\xc2\x2b\x98\xad\x09\x1e\x9e\x41\xae\x34\x2c\x95\xe5\xad\x04\x57\xbf\xeb\x79\x60\xa1\xbf\x53\x9e\x62\xcf\x50\xb1\x86\x9c\x42\x15\x69\xde\x77\x27\x93\x07\x69\xb8\xbf\x93\x84\xc0\x5e\x10\x08\xae\x5e\x60\x1e\x4c\xa2\xa0\xe8\x40\xc9\x23\x96\xe6\x90\x10\x04\x94\x10\xb3\x35\x94\x09\x2c\x0c\x92\x5c\xee\x2e\xc4\xde\x1a\x76\x8a\x98\x41\x39\x96\x53\x2f\xc8\xa4\x25\x8e\xd0\x80\xb2\x61\x5e\xf5\x74\x56\x2c\xe3\xac\x8f\x61\x2f\x8a\xbc\xc8\x2c\xc8\x8f\xe6\x90\x40\xa1\x7c\xb0\x5a\xf3\x13\x00\x00\xff\xff\xb0\xbe\x74\x2d\x01\x02\x00\x00")

func dataFirewallWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10ExtraTxt,
		"data/firewall/win10/extra.txt",
	)
}

func dataFirewallWin10ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/extra.txt", size: 513, mode: os.FileMode(438), modTime: time.Unix(1492271433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x96\x4d\x4f\x6c\x37\x0c\x86\xf7\x23\xcd\x7f\x40\x62\xcd\x8b\x5f\xe7\xfb\x2e\xbb\xef\xaa\x8b\xae\x29\xe5\xf6\xa2\x72\x01\x01\x15\xa5\xbf\xbe\xb2\x4f\x4e\x4e\x32\x8b\x19\x9d\x27\x4e\xec\xc4\xf1\x47\xae\xaf\xaf\xaf\xbe\x3f\xbe\x3d\x7c\xde\x3d\x3d\x5d\x7d\x3e\x3e\x53\xae\xde\x5f\xbf\xce\x27\x1b\xff\xf5\xe5\xed\xe1\xea\xf1\xf9\xfb\xcb\xb7\xab\x1f\x1f\x1f\xaf\xef\xdf\x6e\x6f\xff\x7a\xfc\xf8\xf1\xcf\x1f\xb8\x7f\xf9\x79\x7b\xff\x76\xf7\xdf\xd7\xcd\xcf\xbb\x7f\x6f\x7f\x7f\x7c\xfe\xf3\xe5\xf3\xfd\xb7\xd7\xaf\x5f\x9e\x5e\xee\xff\x7e\x78\x3b\x9f\xce\x27\x06\x94\x0c\x65\x05\x59\x0e\x6c\x60\xe3\x8c\x4a\x71\xa4\x14\x24\xd4\x7a\x3e\x69\x40\x2b\xc8\x04\x43\xd9\x89\xa5\x82\x25\xec\xa8\xd2\xd0\xba\xb0\x81\x02\xf2\x80\x86\x18\x67\xca\x07\x31\xdb\x6f\xa0\x12\x2a\x9b\x1a\x8a\x22\x42\x53\x18\xa4\x44\x1c\xc0\x94\xc0\x28\x9d\x03\x58\x15\xd4\x7c\x3e\x45\x41\x6e\x88\x02\xa6\xe2\x54\x32\x08\x96\x3c\x40\x4d\xcd\xf8\x66\xd6\x8d\x0a\x54\x1b\xe4\xe6\xf8\xd6\x94\x5c\x54\x4d\x7d\x43\x6c\x4e\x64\x40\x1d\x32\xba\xa7\x50\xea\x41\x11\x4c\xc7\x54\x55\xc4\xd2\x29\x82\xb1\x41\x55\x06\x6b\x24\x18\xd9\x39\x81\xee\x2a\x87\x02\x46\x9b\x20\x07\x27\x42\xbb\x66\xa5\x8b\x59\xf5\x7c\x4a\xae\x03\x41\x91\x78\x3e\x25\x3b\x93\x2f\x44\x08\x0b\xda\xae\x06\x9a\xa7\xd3\xc6\x76\x95\xb1\x6c\xa6\x76\x36\x53\xd4\x83\xed\x97\x0f\x6c\x61\xbb\xb7\xce\xaa\x01\xda\x8d\xd5\x82\x2c\x16\x3d\xe7\x53\x8e\x88\xc8\xa0\x48\xff\xd6\x00\xb9\xd9\xbf\xdc\x85\x0e\x29\xee\xc3\x29\xf6\xe1\x84\xd0\xfc\xd0\x1a\xc4\x31\x29\x34\x43\xeb\x0e\x14\xb1\x45\xe3\x7b\x5f\xe6\x07\xa4\xc7\x58\x5f\x65\x31\xed\xbb\x49\x48\x09\x76\xaf\xa1\xee\x64\x46\x64\x87\x18\xdd\x81\x07\xc4\x09\x28\x75\xa1\xb6\x93\x45\x87\x0e\x1d\x1e\x01\x5c\x48\x17\x0a\x83\x82\x20\x1d\xeb\x4a\x46\x1b\xa4\x9b\xa3\xc6\xf7\x38\x5c\x82\x26\x45\x0e\x33\x15\xce\xd4\x74\xa1\x65\x26\xdd\x82\xa5\x5c\xdb\xa2\xc7\x52\x64\xe1\xba\x72\x6d\x2b\x2f\xeb\x0b\x18\x78\x3e\x95\x82\x5c\xcc\xad\x9e\x63\x94\x08\x8f\xad\x02\xab\x0e\x8e\x76\xea\x82\x9c\x27\xb4\x32\x73\x60\x14\x3b\xe5\x60\xd5\x8a\xb4\xa2\x8a\x1e\x1c\x0a\x98\x5b\x67\x73\x2b\xd8\xd2\x40\xb5\x34\xe3\x3e\xdd\x92\x5f\xc9\x41\xa1\x7a\x68\x74\x4a\x96\x49\x7d\xa9\x52\x10\x51\xca\x44\x82\x3a\xa1\x52\xa1\x31\xec\x03\x11\x21\x41\x2d\x5d\x49\x42\xad\x74\x99\x0f\xca\xc2\x5e\xbf\x16\x9e\xe6\x67\x0b\xfb\x1d\xa8\x65\xbb\x66\x06\xda\x32\xab\x23\x72\x33\xc1\x22\xb4\xe4\xf6\x22\x1e\xc1\x22\x08\xd2\x3d\x34\xb1\x3b\xb8\xb3\xdd\x7d\x9a\x98\x92\x5d\xf9\x41\x5d\xfb\x3e\x60\xd5\x60\xe5\x58\x57\x6e\x79\xe6\x7a\x31\xbf\x5e\xcc\xaf\x28\x7a\x31\x7f\x59\x40\xce\xfb\x31\x97\x2c\xfb\x61\x42\x9a\xed\xa9\xac\xf6\x54\x56\x7b\x2a\xab\x3d\x95\x75\xbf\xa5\x7a\xb7\x3a\xb8\x6d\x37\xbd\x73\xb5\xf3\x4c\x0a\x35\x24\x2f\x7f\x16\xc7\xd6\xb3\x2a\xbb\xfd\xd2\x6b\x54\x17\xa7\x62\xa9\x96\xd4\x0e\x33\xbe\xb7\xa3\x74\xcc\x93\x28\x2f\x22\xeb\x8c\x43\x66\xb0\x08\xb5\x67\x4c\xc7\x20\xd3\xdc\x20\xcb\x5c\xdb\xcd\x10\x1a\xac\xc2\x3c\x0b\xe7\x2d\x64\xd8\xff\x80\x62\x21\x27\x03\x1b\xb7\xdc\xd8\xc8\x42\x86\x35\x5e\x70\xba\xe0\x76\xb0\x75\x42\x4e\xeb\x95\x98\xc5\x1a\xb7\x0b\xe8\x68\x5d\xd2\x6d\xe7\x6a\xef\x0e\x8d\x5b\x93\xec\xc8\x68\xdb\x9e\xd0\xf2\xee\xc0\xb2\x95\x44\xc7\xad\x1f\x59\xd1\x75\x0c\xde\x2a\x32\x27\xac\x50\x6b\x93\x6c\x84\x06\xf5\xd2\x24\x37\x33\x6d\x0e\xf2\x81\xec\xcf\x8e\x2a\x3b\xdb\xbb\xa7\x6e\xcf\x8e\x31\x40\x53\xd8\xf6\x81\x66\x1d\x2d\x59\x28\x36\xbb\x28\x7f\x37\xb8\xfe\x83\x5c\xbf\xd5\xcb\x98\x61\x25\x40\x07\x51\xb6\x7e\xbf\xa3\xd5\x81\x69\x32\x5b\x84\xbf\x80\xa4\x20\x5b\x7b\xce\x5b\x79\x51\x6b\x33\xf6\x9a\x2a\x76\x94\x99\xdc\xd4\xff\x01\x00\x00\xff\xff\x43\x99\xc8\xcf\x61\x0a\x00\x00")

func dataFirewallWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10SpyTxt,
		"data/firewall/win10/spy.txt",
	)
}

func dataFirewallWin10SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/spy.txt", size: 2657, mode: os.FileMode(438), modTime: time.Unix(1492271671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\xbd\x92\xe2\x30\x0c\x07\xf0\x3e\x33\x7e\x87\xcc\x50\xa3\x58\x92\xe5\x0f\xca\xeb\xaf\xba\xe2\xea\x1c\x84\x23\xb3\x40\x98\x10\x86\x65\x9f\x7e\xc7\x84\x25\xb6\x3b\x7e\xfa\x5b\x58\x51\xb2\x5a\xad\xea\x7d\x3f\x76\xf7\xf6\x78\xac\xef\xfd\x19\x75\x7d\xbb\xec\xda\xa9\x53\x55\x8c\x7e\x0f\x63\x57\xf7\xe7\xfd\xb0\xa9\x0f\xd3\x74\xb9\x6e\x9a\xe6\x7f\x3f\x1d\x6e\xff\x60\x3b\x9c\x9a\xed\xd8\x7e\x3d\xd6\xa7\xf6\xb3\xf9\xdb\x9f\x77\xc3\xfd\xfa\xe7\xf2\xf8\x75\x1c\xb6\x1f\xdd\xa8\x2a\x55\x21\x03\x6a\x07\x06\x44\xa7\x20\x55\x51\x04\x03\xfa\x00\x48\x36\xb7\xb8\xc2\x5e\x55\x56\x40\x04\x90\x3d\xe8\xf5\xf2\x9b\x44\xde\x91\xe5\x25\xb2\x3c\x47\xc8\x08\x24\x0c\xcc\xaf\x09\x0c\xa0\xd3\x20\x08\xe8\x5d\x61\x9f\x3b\xe4\xe7\xc9\xd8\xc2\xae\x70\xda\xcf\x40\x21\x23\xa7\xff\x16\x9f\x21\xc1\x6b\xd2\xd9\x88\x02\x56\x17\xa6\xc4\x56\xf2\xbb\xe6\x42\x28\x0a\x82\x65\x81\x55\x85\xe2\xe6\xc5\x31\x90\x36\x6f\x93\xd1\xe0\x43\x46\x22\xfd\xb2\x05\xe7\xe2\xaa\x73\x86\x8c\x26\x3f\x6c\x30\x67\xde\x6b\x96\xde\x60\x41\x4c\x26\x9f\x0a\x29\xce\x1c\x10\x88\x09\xbc\x9e\xd3\x85\xcf\x2d\x25\xa4\x1f\x1a\x70\x04\xe8\xb9\xb0\x2d\xec\x73\xc7\xf7\x4d\xf1\xf3\xb4\x80\x68\x9e\x97\x25\xb4\xa8\xaa\xef\x00\x00\x00\xff\xff\x02\x89\x62\x33\x29\x03\x00\x00")

func dataFirewallWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10UpdateTxt,
		"data/firewall/win10/update.txt",
	)
}

func dataFirewallWin10UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/update.txt", size: 809, mode: os.FileMode(438), modTime: time.Unix(1492271406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x31\x8f\x83\x20\x18\x87\xf1\x9d\x84\xef\x40\xe2\x7c\x7f\x78\x11\x15\x1d\x6f\xbf\xe9\x86\x9b\x39\x8b\x95\x54\xc5\x20\x8d\xda\x4f\xdf\x38\x74\x7c\xf2\xfc\x8a\xa2\x10\x43\x48\x7e\x77\xd3\x24\xf6\xb0\x34\xc2\x1f\x39\x39\xce\xae\xf1\x13\x93\x17\x61\x19\x62\x27\xc6\x9c\xd7\xad\x93\xf2\x1e\xf2\xf8\xfc\x47\x1f\x67\xd9\x27\xf7\x3a\xbf\x66\x77\xc8\xbf\xb0\xdc\xe2\xbe\xfd\xae\xe7\xf7\x14\xfb\x87\x4f\x9c\x71\x46\x25\xac\x02\x69\x54\x86\x33\xa3\x40\x64\x41\xaa\x44\xc3\x59\x5d\xa1\xd2\x68\x2d\x74\x49\x9f\x22\x65\x41\x17\xd5\xaa\x81\xa9\x41\xad\x01\x19\xce\xde\x01\x00\x00\xff\xff\xd5\x46\x6e\xf0\xa1\x00\x00\x00")

func dataFirewallWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7ExtraTxt,
		"data/firewall/win7/extra.txt",
	)
}

func dataFirewallWin7ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/extra.txt", size: 161, mode: os.FileMode(438), modTime: time.Unix(1473780303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x3f\xaf\xda\x30\x14\x05\xf0\xdd\x92\xbf\x43\x24\xe6\x9e\xf8\x5c\x5f\xff\x7b\x63\xf7\x4e\x1d\x3a\x53\xca\xeb\x8b\x0a\x04\x05\x2a\x4a\x3f\x7d\xe5\x20\x1a\x87\x21\xc3\xef\x24\xca\xb9\xbe\xde\x6c\x36\xdd\xfb\x30\xed\x6f\xdb\xc3\xa1\xbb\x0d\xa7\xd4\x5d\xce\x77\x6b\x6a\xfc\x65\x9c\xf6\xdd\x70\x7a\x1f\xdf\xba\x8f\xeb\xf5\x7c\x79\xeb\xfb\x9f\xc3\xf5\xe3\xf7\x77\xec\xc6\x63\xbf\x9b\xb6\x7f\xef\x9f\x8e\xdb\x3f\xfd\xb7\xe1\xf4\x63\xbc\x5d\xbe\x9e\xef\x9f\x0f\xe3\xee\xd7\x7e\xb2\xc6\x1a\x75\x48\x09\x22\x11\xa2\x65\xc5\xe0\x66\x92\x19\x74\x11\xf4\xce\x9a\x20\x60\x54\x88\x3a\x84\xd2\x90\x10\x17\x1e\x4e\x19\xd4\x54\x3f\x59\x1c\x08\xa1\x2c\xae\x4f\x5c\x58\x3c\xd8\x58\xc4\x43\xfc\x83\x39\x21\x3a\xd0\x25\x6b\xa2\x42\x11\x14\x12\x7c\x0b\xb5\x26\x06\x84\x00\x55\xd0\xe5\x95\xca\x53\xa4\x47\x1d\xa0\x91\x7f\x4a\x82\x20\xb1\x55\xa9\xef\x22\xc8\x02\xd6\xff\x84\xf4\xe2\xbc\x76\x2e\x6b\x17\x67\x0d\x9d\x42\x6b\x4d\x42\x8c\x0d\x0b\x84\xff\x29\x92\x51\x4f\xd3\x50\x9c\x2c\xf6\x09\x8c\xc5\x1a\x92\x10\x21\xa4\xcc\x73\x37\x9c\x97\x41\xaf\x60\x72\xf0\xae\xc6\x8b\xeb\xda\x35\xbe\x38\xbd\x38\x37\xf6\x90\xda\x56\x6b\x99\x20\x3e\xcc\xd7\xc4\x42\x88\x97\xc7\xf0\x73\xdf\x2a\xd0\x67\x90\x20\x2e\x83\x12\xad\xf9\x17\x00\x00\xff\xff\xdc\xf4\xe0\xde\xae\x02\x00\x00")

func dataFirewallWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7SpyTxt,
		"data/firewall/win7/spy.txt",
	)
}

func dataFirewallWin7SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/spy.txt", size: 686, mode: os.FileMode(438), modTime: time.Unix(1492269054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x3f\x6f\x83\x30\x10\x05\xf0\xdd\x92\xbf\x03\x52\xe6\x3c\x7c\x67\xce\x36\x19\xbb\x77\xea\xd0\x99\x26\xa4\x41\x25\x80\x08\x11\x4d\x3f\x7d\xe5\x4a\x55\xb0\xc7\xdf\x3b\xe9\x9e\xff\xec\x76\xbb\xe2\xdc\xcd\xed\xda\xf4\x7d\xb1\x76\x83\x2f\xee\xd3\xa9\x59\x5a\xad\xe2\xe4\x75\x9c\xdb\xa2\x1b\xce\xe3\xa1\xb8\x2c\xcb\x74\x3b\x94\xe5\x67\xb7\x5c\xee\x1f\x38\x8e\xd7\xf2\x38\x37\x3f\x8f\xfd\xb5\xf9\x2e\xdf\xbb\xe1\x34\xae\xb7\xb7\xe9\xf1\xd2\x8f\xc7\xaf\x76\xd6\x4a\x2b\xb2\x20\xe3\x51\x41\x8c\x56\x1c\x61\x41\xa1\x06\xb1\x64\x76\xa9\xc5\x67\x0e\x5a\x39\x81\x08\xc8\x06\x10\x71\xca\x2a\x61\x5c\xb6\x61\x78\xd2\x59\x30\x53\x4a\x8e\xc7\xac\x40\xde\x40\x08\x54\x9b\x8d\x2d\xec\x96\x01\x66\xbf\x01\x8b\x3c\x87\x44\x02\xb7\xd9\x45\x4e\xc0\x55\xc8\x83\x3a\x0b\x84\xf2\xc0\x6a\x45\xe2\x21\x0e\xb5\x03\x71\x64\x4d\x60\xcb\x08\xb1\x35\xa1\x33\x29\xf9\x9f\x15\x3c\x83\x82\xcd\xec\x32\x87\xd4\xf1\xee\x1c\xff\xcb\xc5\x37\xfd\x2b\xfb\x0d\x00\x00\xff\xff\x3f\x64\x9a\x9f\x1d\x02\x00\x00")

func dataFirewallWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7UpdateTxt,
		"data/firewall/win7/update.txt",
	)
}

func dataFirewallWin7UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/update.txt", size: 541, mode: os.FileMode(438), modTime: time.Unix(1494816164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc9\xb1\x6e\x83\x40\x0c\x06\xe0\xdd\x4f\x81\xc4\x9c\x1f\xdb\x67\x1f\x90\xb1\x7b\xa7\x0e\x9d\x29\x25\xcd\xa9\x84\x8b\x2e\x54\x24\x7d\xfa\xaa\x53\x18\x3f\x7d\x75\x5d\x57\xa7\x54\xa6\x6d\x98\xe7\x6a\x4b\x4b\x27\xd5\x74\x5f\xcb\x40\xff\xf1\x9a\xcb\x54\xa5\xe5\x94\x8f\xd5\x79\x5d\xaf\xb7\x63\xd3\x7c\xa5\xf5\xfc\xf3\x81\x31\x5f\x9a\xb1\x0c\xbf\x8f\xc3\x65\xb8\x37\xef\x69\xf9\xcc\xdb\xed\xed\xfa\x78\x99\xf3\xf8\x3d\x15\x22\x09\xe8\x18\xa2\x70\x23\x63\x88\x74\x10\x0e\x68\x9f\x88\x90\xc0\x14\x0d\x06\x37\xa8\x52\x74\xb8\x42\xb8\x83\xf6\x3b\xf8\x1e\xe2\x81\x24\x08\xd4\x03\xa2\x80\x0f\x3b\xa8\x3b\x29\x1b\xda\x1e\xd2\xb7\x50\x66\x52\x6e\x61\x11\xd2\x1b\xc4\xe8\x2f\x00\x00\xff\xff\xe1\x92\xf3\x89\xec\x00\x00\x00")

func dataFirewallWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81ExtraTxt,
		"data/firewall/win81/extra.txt",
	)
}

func dataFirewallWin81ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/extra.txt", size: 236, mode: os.FileMode(438), modTime: time.Unix(1494527809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd1\x3f\x8f\xda\x40\x10\x05\xf0\x7e\x3f\x85\x25\xea\x3c\xf6\xcd\x9f\xfd\x73\x65\xfa\x54\x29\x52\x13\xc2\xe5\xac\x70\x18\x01\x11\x21\x9f\x3e\x5a\xc3\x61\x5b\x29\x2c\xbd\x9f\xb5\xbb\x33\x9a\x59\xad\x56\xdd\x6b\x7f\xda\x5d\x37\xfb\x7d\x77\xed\x0f\x85\xdd\xf9\x78\x0b\xed\xf7\x97\xe1\xb4\xeb\xfa\xc3\xeb\xf0\xd2\xbd\x5d\x2e\xc7\xf3\xcb\x7a\xfd\xb3\xbf\xbc\xfd\xfe\x8e\xed\xf0\xbe\xde\x9e\x36\x7f\x6f\x9f\xde\x37\x7f\xd6\xdf\xfa\xc3\x8f\xe1\x7a\xfe\x7a\xbc\x7d\xde\x0f\xdb\x5f\xbb\x53\x08\xa2\xa8\x05\x56\x41\x1b\x73\x1d\xb3\x30\x58\x44\xce\x10\x49\x10\xab\x73\x79\x0c\x4e\xd0\x08\x15\x38\x83\x0b\x98\x0c\x62\x11\x5e\x27\x11\x12\x7d\x64\x2e\xa0\xe5\x76\xe0\x49\x27\x84\xf2\x64\xfb\xd2\x53\x55\xc1\x89\x22\x0a\xd1\x51\x25\x23\x45\x30\xe6\x90\x0c\x06\xc9\xf0\x78\x8f\x6e\x10\xd7\x59\xb6\x90\x1c\xee\x20\xdb\x63\x73\xc8\x1c\xfa\x80\xb8\xc0\xe6\xa8\x73\xb0\xc6\x90\x12\xc8\x36\x25\x03\x3d\x2f\x59\x16\x2c\x75\xc1\x3a\xb6\x28\xaa\xe3\x5c\x58\xca\xc4\x04\xc6\x12\x18\x0d\xd6\x7a\xc9\x48\x69\x52\x85\xf0\x43\xa2\x19\x4c\xf5\x49\x29\x70\x9d\x4b\xa2\x04\xaa\x81\x39\x42\xe3\xff\xd4\x25\x6d\xc1\x56\xa7\x15\x60\x1a\xcb\x92\xf6\x70\x86\xa8\xb7\xcd\xd0\xf3\x38\x32\xd5\xfb\xe5\xc6\x04\x56\x43\x96\x85\x74\x21\x0b\xac\x84\xa8\xdc\xdf\x2d\xb2\x70\x5b\xd8\xd2\x1f\xe7\x33\x24\x16\x50\xd2\xc3\x15\x1e\xc1\x32\x57\xce\x93\x04\x8c\x71\xa2\xc1\x25\xfc\x0b\x00\x00\xff\xff\xcf\x19\x8b\xc3\x2d\x03\x00\x00")

func dataFirewallWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81SpyTxt,
		"data/firewall/win81/spy.txt",
	)
}

func dataFirewallWin81SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/spy.txt", size: 813, mode: os.FileMode(438), modTime: time.Unix(1494527809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\x3d\x6f\xb3\x30\x10\x07\xf0\xdd\x92\xbf\x03\x52\xe6\x1c\xbe\xb3\xcf\x2f\x19\x9f\xfd\x99\x3a\x74\xa6\x09\x69\x50\x93\x80\x08\x11\x4d\x3f\x7d\x65\x52\x05\xdb\x1b\xbf\x3b\xfe\xc8\x77\x78\xb3\xd9\x54\xc7\x6e\x6c\xe7\xe6\x7c\xae\xe6\xee\xea\xb1\xba\x0f\x87\x66\x6a\xa5\x88\xad\xff\xfd\xd8\x56\xdd\xf5\xd8\xef\xaa\xd3\x34\x0d\xb7\x5d\x5d\x7f\x76\xd3\xe9\xfe\x01\xfb\xfe\x52\xef\xc7\xe6\xe7\xb1\xbd\x34\xdf\xf5\x7b\x77\x3d\xf4\xf3\xed\x6d\x78\xfc\x3b\xf7\xfb\xaf\x76\x94\x42\x0a\xd4\x80\xca\x81\x01\x56\x52\x50\x84\x06\xf4\x01\x90\xb8\xb0\xcd\xcd\xae\xb0\x97\xc2\x32\x30\x03\x6a\x0f\x6a\xbb\x3e\x13\xf3\xab\x65\xf5\xda\xb2\x3a\x6d\x91\x21\x20\x36\xf1\x44\x08\xc4\x1a\xd0\x00\xb2\x8e\x36\x80\x4e\x01\x23\xa8\x6d\x82\x25\xfb\xb2\x06\x0a\x19\xb5\x4a\xe8\xd3\xa8\xcf\xa3\x88\x0c\x6c\x73\x5b\x55\x98\x12\xdb\x78\x58\x5f\x16\x42\x51\x60\x2c\x0b\x71\x16\x76\xcf\x59\x15\xf8\x90\x71\xd9\x6f\x62\x22\xf5\x67\x0b\xce\xc5\x3d\xe6\x0c\x19\x4d\xfe\xb2\xc1\x9c\x79\xd6\xac\xd9\x60\x61\x59\xf9\x2a\x9f\x0a\x49\x67\x8c\xff\x1c\x03\x02\x69\x02\xaf\x9e\x5b\x4a\x48\x52\x50\xbc\x4b\x16\x10\xcd\xf2\xa9\x84\x16\xa5\xf8\x0d\x00\x00\xff\xff\x84\x2f\x66\xf2\xc9\x02\x00\x00")

func dataFirewallWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81UpdateTxt,
		"data/firewall/win81/update.txt",
	)
}

func dataFirewallWin81UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/update.txt", size: 713, mode: os.FileMode(438), modTime: time.Unix(1492270142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x8f\xdb\x30\x0c\xc5\xf7\x7c\x0a\x03\x99\xcd\xfc\x6b\x0f\xc5\x8d\xdd\x8b\x0e\x1d\x3a\x2b\x12\x6d\x13\xb1\x48\x41\x64\x62\x27\x9f\xbe\x70\x2e\xbd\xab\x1b\x19\x38\x78\xe3\x7b\xd2\x33\x9f\x7e\xeb\xf5\xba\xea\x44\x4d\xab\x81\x78\xb7\xad\x70\xb4\xec\x56\xd3\xf4\x87\x64\xac\x88\x1b\x79\xad\x3a\xb3\xa4\xaf\x9b\x4d\x4b\xd6\x9d\x8f\xe0\x25\x6e\x7c\x76\xb7\x6b\x1d\xdd\xb8\xf9\x4d\x1c\x64\xd0\x5f\xe9\xfa\xbd\x17\x7f\xc2\xbc\x5a\x6d\xe1\xfe\x55\x8e\x75\xc0\xac\x10\xc9\x67\x51\x69\x6c\x3a\xfa\xa1\xa6\xa4\xa0\xa7\x6b\xc2\xf9\xf8\x76\x78\xd9\x7d\xdb\xbd\xc0\x45\x20\x2a\x7a\x0e\xc0\x68\xff\xc8\x5f\x77\xfb\xc3\xe1\xcb\x82\xec\x03\x83\x17\x36\x64\x83\x94\x25\x80\x8f\x0a\x51\x79\x16\xe1\x3b\x21\x8f\x0b\xbf\x55\x12\x81\xd5\x99\x9f\x07\xf5\x34\x65\x0c\xac\x30\xbc\x35\x30\xbf\xe5\x2e\xd7\x0a\xad\x33\x1c\xdc\x15\x22\xaa\x22\xb7\x98\xa1\xa7\x0b\x16\xbc\x5e\xb8\xa1\x16\x92\x53\x4d\x92\x6d\x16\x16\x30\xf5\x72\x05\x35\x67\xe4\xc1\x9d\x5c\x74\x64\xe8\x3b\x96\x5e\x5a\xc2\x79\x74\xc0\xcb\xb4\x80\x3b\x5b\x07\xe3\x51\xc6\xa7\xbc\x10\x03\x44\x34\xa7\x98\x27\xe7\xd2\xfb\x04\x9e\x9a\x6b\x8c\xbd\xd2\x4c\x68\x10\xc3\xd1\xf9\xd3\xc7\xb9\xba\x93\x2e\x96\x3d\x8a\x2e\xfb\x6e\x21\xe2\xdd\x55\xaa\xb0\x7d\x6e\x8a\x62\x5b\x6b\x1d\x95\xeb\xe9\x51\xde\x7a\xb8\xe1\x9c\x80\x9e\x3c\xb2\x12\xb7\x10\xd3\x42\xec\x54\x1a\x3f\xdf\x1e\xa1\x13\x8b\x8e\xfa\xf9\xb4\x54\x81\x34\x0d\x79\x7c\x30\x50\x0e\x11\xfe\xab\x6b\x33\x42\xd4\x77\x21\x65\xf2\xd8\x93\x5a\x01\xfe\x4f\xf1\xa2\x5b\xd8\xc7\xc0\xb3\xad\xf5\x67\x61\xf6\xa8\xfe\x3f\xfa\x15\xcd\x88\x5b\xad\x55\xfb\x32\x20\x0f\xce\x9e\x2f\x34\xc9\x58\x53\x74\x2d\x2a\x68\x5d\xde\xfb\x6e\xc2\xd0\x62\x13\x20\xe8\xb8\xfc\x0a\x46\x3d\xd6\x0f\x06\x61\x40\x67\x1d\xe6\x45\x6b\xc4\x22\x23\x76\xda\x43\xea\xed\x69\xc7\x33\x15\xca\x1d\x86\x61\x0e\xf4\x9f\x00\x00\x00\xff\xff\xbe\x5b\x8e\xc3\xfd\x04\x00\x00")

func dataHostsWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10ExtraTxt,
		"data/hosts/win10/extra.txt",
	)
}

func dataHostsWin10ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/extra.txt", size: 1277, mode: os.FileMode(438), modTime: time.Unix(1493751027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x98\xc1\x72\xdc\x28\x13\xc7\xef\x79\x0a\x57\xe5\x3c\x6d\x21\x39\x93\x4c\x8e\xdf\xfd\x3b\xed\x61\xcf\x08\x7a\x24\x6a\x24\xc0\x34\x23\x8d\xf6\xe9\xb7\xa4\x91\x1d\xcb\x02\x86\x6c\xec\x8b\x8b\xff\x0f\x1a\x9a\xa6\xbb\xe5\xaf\x5f\xbf\x3e\xb5\x86\x3c\x3d\x8d\x4a\xb3\xe2\x89\xec\xf4\x65\x1e\xfb\xbf\x71\xf8\xa4\xf4\xd9\xfc\x7c\x6a\xbd\xb7\xf4\xf3\xf9\xb9\x51\xbe\xbd\xd6\x20\x4c\xff\x2c\x1c\xff\x67\x3a\xf4\xfc\xf6\xfc\xb7\xd2\xd2\x8c\xf4\x97\x9d\xfe\xd7\x19\x71\x41\xf7\xe5\x4b\x01\xcb\xef\x13\x3f\x14\x45\xc1\x80\x1f\x7a\x42\xd9\x20\x68\xf4\x5b\xad\x4c\x68\x55\x42\x7b\x49\x68\xdf\x12\xda\x31\xa1\x7d\x4f\x68\x3f\x12\xda\x29\xae\xb1\x22\xa1\x25\xfc\xc2\xa2\x7e\x09\x0d\x02\x97\xc4\xa0\x27\x3d\x5f\xcc\x76\xb8\x84\x9e\xb8\xa4\x3d\x5f\x06\x78\xc7\xe5\x7e\x54\x54\x81\x31\xaf\x06\xe5\x27\x18\xef\x37\xbf\x15\xa5\xc6\xdb\xf5\x93\x45\xa9\x6f\x9f\x29\xda\x2f\x7b\x3f\xc5\x6e\xbb\xc1\xc3\x29\x69\x09\xb8\x97\xbd\xdf\x8e\x5f\xf8\x41\x48\x7d\xd0\x04\x5c\x7a\x14\x2d\x48\x7c\x17\xeb\xb0\xa3\xea\x98\xa3\xea\xa0\x47\x6a\xa5\x9b\x65\xfb\x4a\x38\x43\xe6\xbc\xdd\x40\xdd\x55\x55\xc1\x0e\x1c\x98\x74\x43\x48\x11\x51\xa5\x09\x28\x9a\x55\xc5\xcb\x01\x23\xca\x31\x68\xe7\xae\xc4\xe7\x04\xed\x94\xf5\x41\x18\xb7\x3c\x56\xab\xc0\xce\x7f\x04\xa8\xca\xe6\x50\x6f\x6b\x55\x29\x6a\x8a\xfa\x69\x8a\xfa\xe9\xae\x84\x4e\x46\x40\xe8\x06\xa5\x9b\x03\x4d\xdb\x48\x13\x81\x28\x11\xbb\x4b\x15\xf7\x44\x25\x45\xe8\x81\x09\x0e\x1e\x3b\xec\xd1\xbb\x29\x72\xed\x82\x8b\x16\x41\x72\xcf\x7b\xee\x7c\xf0\x61\x08\xa9\x43\x5b\x91\x54\x1e\x81\xf7\x74\x82\x9e\x50\xe8\xad\xe1\x96\x3d\xf6\xf7\x3b\x54\x26\xa1\x98\x53\x57\x25\xe0\xd4\x55\x09\x84\xcb\xa2\x94\xd1\xd5\xca\xe0\x6a\xa6\xb7\xdc\xe3\x4d\xb4\x5c\x37\x08\xa2\x33\x57\xc9\xad\xdd\x9e\x77\xc3\x30\xf0\x8e\x9f\xcf\x4a\xf4\x5c\xf3\x06\xdd\x27\xd4\x59\x20\x1f\x7b\x86\xb3\x8c\x37\x0f\x3d\x29\xcf\xe5\x99\xa0\xe9\x6a\xa9\xe7\x57\x1e\xc6\x2d\x2b\xd8\xc1\x3a\x23\x41\x1a\x90\x64\xa1\xb7\x31\x94\x18\x8c\x56\xc0\x50\xcc\x17\xfa\x71\x4b\xb2\xae\xf8\xeb\x35\x70\xc7\xb2\xae\x46\x4d\x65\xc1\xe6\x1f\x18\x35\x05\xe3\x43\xd6\xdf\x52\x1a\x89\x96\x15\x8c\x15\xc5\x89\x7d\xcf\xe1\xd8\xb7\xb4\xad\x77\xee\xc4\x5e\xf2\xb8\xea\x94\xc1\xb1\xe2\x58\x1e\xf3\xb8\x2a\xc7\x2e\x2b\x7e\x94\x39\xe7\x98\xb9\x32\xeb\x1c\x3f\x58\xf5\x90\xab\x66\xab\x19\xfe\x9b\xb9\x97\xe2\xf1\x79\xab\xe2\x54\x96\x45\xd2\x7f\xa3\x26\x26\x13\xc0\x71\x59\xa8\x2c\x4e\x8c\x15\xa9\x40\xf9\xc5\xbd\xb0\x84\x43\x70\x80\x41\x39\x7f\xe5\x1d\x72\xe7\xdb\x6d\x20\x9f\x1f\xe6\x3b\xa9\x78\xa3\x0d\x79\x25\x08\xe8\x6a\xad\x71\x3e\x42\x62\x28\x01\xcf\x89\x2e\xb9\x05\xbc\xc2\x60\x9c\xc7\xdb\x92\x53\x23\x4b\x9f\x3b\xbc\xed\x32\x79\xb3\x1f\x41\x93\xf7\xb4\x1b\x34\x03\xba\x3c\xb6\xdd\xf7\x11\xed\xbe\xa7\x52\x07\xd2\xe5\xe3\x14\xfe\x01\x4b\x25\x71\xc5\xee\x55\x4e\x20\x01\x19\xa1\x78\x17\xd9\xdc\x23\x10\x34\x71\x2f\x36\x0e\x57\xfa\x8c\x0e\xb5\x40\xe8\x8c\xe0\x5e\x19\x0d\x9d\x1a\xb6\x75\xf0\x32\x64\x67\xc9\xae\x66\x30\x8e\x23\xf4\x04\xfc\xc2\xa5\xde\x36\x56\xcb\xca\x2e\xd4\x03\x76\x54\x8e\x58\x83\x43\xd9\x1b\x2d\x61\xc9\xf2\x61\x0b\x3d\xec\xbb\xca\xde\xd4\xaa\x43\xb0\xca\x22\x70\xa7\x62\x71\x13\x28\xf1\x3d\x69\x8f\xe4\xa3\x5d\xc4\xbd\xa7\x35\x73\x35\x42\x6e\x2d\xdd\x9d\xb3\x23\xdc\xb5\xc3\x34\x66\x32\x9a\x89\x04\x13\xb8\x39\xa3\x91\xd0\x7b\xa5\x1b\x3a\xd4\xba\x84\x79\xd6\xdb\xed\x3d\x9e\x21\xa6\xdf\x9d\x31\xd7\xa9\xdf\x9b\xd1\x5e\x72\x6c\x58\x87\x70\x36\xc6\x5b\xa7\xb4\xb7\x0e\xa5\x12\x5b\xb7\x58\x87\x83\xc2\x71\x17\x33\x73\x93\xbe\xf3\x73\xa8\x73\x9f\xd7\x74\xf3\x4e\xf8\xfb\xeb\x08\x5f\x80\xc3\x39\xa1\x11\x8c\x48\x90\x91\x0c\x49\xb4\xd8\xf3\x8f\x8b\x05\x62\x9e\x50\x5c\x1d\x06\x82\x76\x15\xce\x1d\xa7\xd6\xf3\xee\xa2\x74\xf3\x49\x5f\xf7\x9a\xbb\x9b\x37\xb7\x13\xd7\xb2\x36\xc9\x0c\xfa\xce\x8e\x4a\xe7\x70\x77\x26\xdd\x4b\x6d\xd9\x08\xa3\x63\xed\xe8\xaa\x04\x1a\xc8\x55\x09\xb4\xa3\x64\x27\x8d\x3e\xba\x9f\x45\xe5\x5d\xac\x40\xdd\x75\xbc\x3a\x63\xf1\xc1\x15\xbe\xf6\x59\x17\xf0\xda\xff\x09\x13\x78\x1a\x44\xe3\x3e\xc2\xc9\x1b\x87\x82\x7b\xde\x99\xc6\xe1\xf0\x96\xb5\x97\xe1\xd7\x2b\xef\xe6\x0f\xf4\x88\xf1\xab\x1b\x70\x82\x91\x7b\x32\x3a\xc2\xf8\x02\x88\x3a\xe0\x17\x90\x93\xe6\xbd\x12\xe0\xd5\x9c\xdb\xa2\x15\xfb\xd7\x84\x47\x20\x76\x28\x4c\xdf\x73\x2d\x1f\xba\x29\x83\x0d\xb8\xeb\x17\xc9\xad\xc5\x1b\xcc\x5f\xec\x59\xc0\xcf\x97\x97\x2a\x00\xc5\xf7\x76\xd7\xaf\x2e\x96\x48\x3c\x9d\xf1\xed\x2b\x86\x5a\x6e\x67\x3b\xc9\xba\x39\xb0\x62\x6d\x7c\x3e\x3c\xc9\x87\xa9\x33\x38\x2b\xbc\x3e\x3a\x9a\xa3\xa4\x9d\x6a\xa7\xe4\xd2\x6b\xb4\xe8\xb6\x81\xb5\x24\xd9\x7d\xcf\xb6\x1a\xc8\x2b\x31\x2b\x9c\x57\x5d\x56\x38\xaf\xb0\xac\x70\x5e\x4d\x59\xe1\x8c\x4c\xf8\x1f\x9c\x9e\xe7\xf0\x0f\x5d\x6c\x3a\x6f\x6e\xfa\xdd\x4c\xeb\x29\xcb\xeb\xf3\xde\xe5\x8d\xe4\xb3\x5f\x45\x6b\xf1\xe1\xdb\x5c\xd1\x3f\xc3\x02\x27\x9b\xfb\xbf\x8c\xd3\xe5\x15\xc3\xe5\x3f\xda\xa0\xec\x70\x8c\x01\x4b\x93\xfa\xde\x0f\xfe\x1b\x00\x00\xff\xff\x6a\xfe\xeb\x77\x0c\x17\x00\x00")

func dataHostsWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10SpyTxt,
		"data/hosts/win10/spy.txt",
	)
}

func dataHostsWin10SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/spy.txt", size: 5900, mode: os.FileMode(438), modTime: time.Unix(1493751018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6f\x83\x30\x0c\x85\xef\x48\xfc\x07\xa4\x9e\x6b\x02\xad\x26\xad\xc7\xdd\x77\xda\x61\x67\x2f\x09\x34\x6a\x88\x11\x36\x65\xec\xd7\x4f\x5d\xab\x6e\xdd\x06\xa4\xe2\x86\x3f\x3f\xbf\x67\x67\xb5\x5a\x65\x7b\x62\xe1\x6c\x70\xa1\x50\x59\xdf\x1a\x14\x9b\x26\xa7\xff\xcf\xd4\xd9\xcc\x85\x8a\x76\xd9\x5e\xa4\xe5\x5d\x9e\xd7\x4e\xf6\xfd\x1b\x68\x6a\x72\xdd\xe1\xc7\xb8\x6e\xf0\x3d\x7f\x75\xc1\xd0\xc0\x2f\xed\xf8\xe4\x49\x1f\x6c\x97\x26\x69\xa2\xe0\xeb\xcb\x94\x52\xa5\x2a\xd7\x05\x78\x18\xce\xdc\x79\xc4\x49\xe3\x96\xd2\x9b\x18\xaa\x32\xcb\x54\xb1\x7d\xac\x96\xa9\x52\x3d\x2c\xfa\xc2\x1e\x0c\x0d\xc1\x13\x9a\x05\xec\xb8\x8d\x22\xb5\x78\x33\x3b\xd1\x38\x6e\x3d\x8e\x1a\x05\x3d\xd5\xd0\xb4\xd0\x38\xdd\x11\x53\x25\xbf\x40\x0f\xc6\x7a\x77\xb4\xdd\x38\x47\x45\x78\xb2\xcd\xc9\x12\x4f\x49\x54\xb6\x84\x4b\xdb\x9d\x04\xe0\x01\x4d\x60\x08\x56\x7e\xc2\x9b\x6f\xe3\x86\xdb\x3f\xe6\x21\x30\x8a\x9e\x69\x9a\x4e\x5b\xd5\xb1\x77\xb8\x0a\xdc\x32\x37\x43\xd9\xf3\x42\xf0\x29\xe2\xdf\xe0\x2c\x28\x7c\xd7\xaa\x2e\x1d\xc5\xcc\x71\xae\xa2\xd3\x88\xf8\x1e\xe2\x1e\x4b\xe4\xee\x16\x4b\x97\x0a\x75\x75\x9a\x7c\x06\x00\x00\xff\xff\xbb\xc4\x45\xfa\x61\x04\x00\x00")

func dataHostsWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10UpdateTxt,
		"data/hosts/win10/update.txt",
	)
}

func dataHostsWin10UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/update.txt", size: 1121, mode: os.FileMode(438), modTime: time.Unix(1492271481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x4f\xc3\x30\x10\x85\xf7\x48\xf9\x0f\x96\x32\x73\x41\x2c\x48\x1d\xd9\x99\x18\x98\x5d\xfb\x92\x9c\xb0\xef\x22\xdf\x35\x6e\xf9\xf5\xa8\x30\xa0\xa0\x9a\xca\xdb\xf7\x3d\x3f\x9d\xde\x30\x0c\x6e\x11\x35\x75\x95\xf8\xd9\xe1\xd9\x8a\xef\xbb\x2b\x7d\x95\x82\x8e\x78\x92\x83\x5b\xcc\x56\x3d\x8c\xe3\x4c\xb6\x9c\x8e\x10\x24\x8f\xa1\xf8\xcf\xcb\x43\xf6\xe7\xf1\x9d\x38\x4a\xd5\xb7\xf5\xf2\x92\x24\x7c\x60\xe9\xbb\xbe\x7b\x84\xef\xe7\x7c\x30\xda\xbc\x91\x30\x68\x52\xc8\x14\x8a\xa8\x4c\x76\xed\xf8\x4d\x05\x79\xfa\x57\x97\xd4\x52\x31\x47\xc8\x68\x5e\xb1\x6c\x14\xb0\x59\x11\x59\x21\xeb\x64\x1c\x94\xf6\x66\x86\x23\xf1\xfc\x97\x25\xda\x70\xcf\x92\xcc\xc4\x37\xf8\xed\x56\xa3\x8c\x50\x7f\x96\xd9\x9b\xcd\x27\x8a\x77\x17\xa9\xb5\x36\xee\xad\x1a\x84\x0d\xfc\xba\xb6\x3f\xb7\x22\x80\x71\x46\x3d\x91\x21\x30\x5a\xdf\x7d\x05\x00\x00\xff\xff\xee\x11\x3d\xb4\xfd\x01\x00\x00")

func dataHostsWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7ExtraTxt,
		"data/hosts/win7/extra.txt",
	)
}

func dataHostsWin7ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/extra.txt", size: 509, mode: os.FileMode(438), modTime: time.Unix(1473780444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6f\xf2\x30\x0c\x86\xef\x48\xfc\x87\x4a\x9c\x71\xa1\x1f\x1f\xd3\x38\xee\xbe\xd3\x0e\x3b\x9b\xd4\x6d\x23\x1a\x3b\x8b\x0d\x25\xfb\xf5\x13\x9b\xa6\x0d\x44\x99\x50\x6e\x79\x9e\xf7\x4d\xec\xd9\x6c\x56\x74\xa2\xa6\xc5\xe0\xf9\xa1\xd0\x98\xa7\x93\xd3\xdd\xb3\x24\x2a\x3c\x37\xb2\x29\x3a\xb3\xa8\x9b\xb2\x6c\xbd\x75\xfb\x2d\x38\x09\xa5\x4b\xf8\x9e\xe7\x01\x8f\xe5\xab\xe7\x5a\x06\x7d\x89\xf9\xa9\x17\xb7\xa3\x34\x9d\x4c\x27\x0b\xf8\x3c\x85\xab\x75\xb9\x5c\xfd\x83\x5e\x18\xfa\x9e\x07\x60\xb2\x73\x5a\xad\x1f\xc7\x69\xb5\x58\x55\x2b\xe8\x5d\xbe\x86\x25\x44\x34\x3a\xba\x0e\xb9\xa5\x25\x58\xc2\xa6\xf1\x2e\x20\x63\x4b\xe9\xc2\xcd\x15\x28\x99\x79\x6e\x15\x6a\x34\x84\xe0\x5d\x12\x95\xc6\x4e\xd3\x00\xee\xb0\x66\x3d\xcf\xd4\xdb\xff\x77\x67\x68\x0f\x07\x49\x46\xc7\x2b\x81\x1f\xab\x25\xb9\xbb\xf9\xdb\x9f\x0f\x9e\x6f\x96\x6b\xcc\x4c\x56\xdd\xc6\xb4\x4f\x12\xe9\x97\x73\xf5\xc9\xb7\x00\x46\x3d\x05\xb2\x94\xc7\xfa\x8c\x12\xd5\x02\x3e\x1e\xd6\x63\xca\xd7\x46\xfe\xfc\xf8\x80\xa6\xc2\x97\xf4\x23\x00\x00\xff\xff\x70\xdc\x28\xd2\x9e\x02\x00\x00")

func dataHostsWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7SpyTxt,
		"data/hosts/win7/spy.txt",
	)
}

func dataHostsWin7SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/spy.txt", size: 670, mode: os.FileMode(438), modTime: time.Unix(1492273341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3d\x6b\xc3\x30\x10\x40\x77\x83\xff\x83\xc0\x73\x4e\xb2\x29\xa4\x64\xec\xde\xa9\x43\x67\x7d\xda\xa2\xb2\xce\x48\x67\xd4\xf4\xd7\x97\xd4\x21\x4d\x86\x28\x41\xdb\xbd\xa7\x77\xd7\x75\x1d\x9b\x30\x53\x66\xc5\xc7\x3d\x5b\x17\x23\xc9\xb6\xcd\x69\xfc\x8e\xc9\x32\x1f\x1d\x1e\xd8\x44\xb4\xe4\x03\xe7\xa3\xa7\x69\x55\xa0\x71\xe6\x3a\xc9\x9f\xe3\x6e\x96\xdf\xfc\xd3\x47\x83\x25\x7f\x2c\xc7\xb7\x80\xfa\xcb\xa6\xb6\x69\x1b\x01\x7f\x8f\x09\x21\x94\x71\xbb\x1e\x02\x94\xcd\xdb\x56\x9c\x1a\xd7\x56\xff\xfa\xa2\x1e\x5b\xc3\x20\xf7\x8f\x2c\xb9\x82\xc1\x12\x03\x4a\x53\xd3\x34\x05\x53\xed\x5c\x22\xb3\xd7\x09\x33\x3a\xba\xc3\x6b\x8d\xfc\xd4\x2d\xce\x0e\x70\x9e\xdf\x59\xe6\x46\x30\x19\x54\xff\x54\xee\xd2\xb8\x75\xa2\xa5\x7f\xa7\xf2\x7d\x43\x67\x82\x69\xbc\x22\xa5\x54\x0f\xf8\x0d\x00\x00\xff\xff\x6b\x6a\xcd\xb9\x4d\x02\x00\x00")

func dataHostsWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7UpdateTxt,
		"data/hosts/win7/update.txt",
	)
}

func dataHostsWin7UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/update.txt", size: 589, mode: os.FileMode(438), modTime: time.Unix(1492269103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\xdb\x40\x0c\x85\x77\x03\xfe\x0f\x02\x3c\x8b\x6e\x32\x15\x19\xbb\x77\xea\xd0\xf9\x7c\x47\x49\x44\x74\xa4\x4a\xd2\x3a\xa9\xbf\xbe\x50\xd2\x16\x51\xe2\x0b\x0c\x6d\x7c\x1f\x9f\xee\x3d\xf0\x74\x3a\x35\x83\x98\x5b\x53\x88\xbf\x3e\x34\xb8\xb8\x86\xe3\x61\x1b\x7f\x17\xc5\x86\xb8\x93\xa7\x66\x70\x9f\xec\xe9\x7c\xee\xc9\x87\xeb\x05\xa2\xe4\x73\xd4\xf0\x7b\x6d\x73\x58\xce\x3f\x89\x93\x14\xfb\x31\xad\xdf\x46\x89\xcf\xa8\xc7\xc3\xf1\xf0\x05\x5e\xbe\x26\x44\xa7\x39\x38\x09\xb7\xf3\x23\xd8\x68\x90\x29\xaa\x98\x74\xbe\xd9\xbc\x01\xa7\x09\x97\x56\x3b\xc8\xc6\x7b\x25\xe5\x04\x19\x3d\x18\xea\x4c\x11\xab\x0e\x89\x0d\xb2\x75\xce\xd1\x68\xaf\x74\xc4\x81\x23\xc2\x7f\x87\x97\x9f\xc1\x85\xb8\x7f\x07\x8a\xa4\xc0\x29\x29\xf1\x33\x38\x8d\x58\x27\xb5\xed\x14\xea\x8f\xee\x6f\xec\xf4\x30\xd2\x8c\xfb\x19\xe5\x1e\xcc\x2f\x60\xed\x07\x8b\x51\x7a\xe2\x1b\x2b\xb7\x33\x32\x2e\xde\xbe\x0d\x58\xed\xe9\xd7\x15\x75\x85\x49\x25\x41\xcc\x06\xea\x35\xf0\xaf\x1b\x14\x0c\x3e\xa0\x56\x31\x17\x45\x4c\x3d\x76\x09\x92\x2d\x90\xa7\x1a\xe9\x94\x11\xca\xeb\xb9\xec\x95\x39\x8c\x94\xee\x39\x93\xb2\x45\x53\x9c\xc0\x72\x50\xb7\xa8\x88\x5c\x65\x4b\xa9\x1c\x44\x09\x6e\xc2\xe0\x38\x62\x46\xd7\xb5\xea\x90\x62\x35\x4c\xb1\x28\xec\x9f\x36\x5d\x45\x60\xab\xcb\xae\xe4\x08\x8c\xfe\x7e\xe1\xe1\x0e\xd3\xc7\xcf\x99\x52\xfe\xf5\x6c\x18\x34\x0e\xaf\xf2\x9f\x00\x00\x00\xff\xff\xa8\xa5\x1e\x96\xed\x03\x00\x00")

func dataHostsWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81ExtraTxt,
		"data/hosts/win81/extra.txt",
	)
}

func dataHostsWin81ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/extra.txt", size: 1005, mode: os.FileMode(438), modTime: time.Unix(1492270328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x3d\x4f\xc3\x30\x10\x40\xf7\x4a\xfd\x0f\x91\x3a\xc7\xf9\x28\x94\xb6\x23\x3b\x13\x03\xf3\xe1\x5c\x12\xab\xfe\xc2\x77\x69\x1a\x7e\x3d\x0a\x0c\xd0\xd2\x5e\x95\xed\xde\x53\x7c\x7a\xb2\x57\xab\x55\xd6\x07\x62\xca\x46\xe3\xb7\x55\x46\x71\x5a\x2e\xe6\xe1\x4b\x48\x98\x19\xdf\x86\x7d\xd6\x33\x47\xda\x17\x45\x67\xb8\x1f\xde\x95\x0e\xae\xd0\x09\x3e\xa7\xdc\xc1\xa9\x78\x33\xbe\x09\x23\xbd\xc6\xe9\xd9\x06\x7d\xc0\xb4\x5c\x2c\x17\xa5\xfa\xfe\x32\xc8\xcb\xb2\xac\x14\xe4\x8e\xb0\xe9\x50\x79\xe4\x0b\x58\x4b\x70\x2d\xc1\x07\x09\x3e\x4a\x70\x23\xc1\x27\x09\x6e\x25\xb8\x13\x60\x55\x4a\x50\x2a\x54\xdd\x2e\x74\x6d\xaa\x1b\xaa\xab\x7a\x5b\x29\x1b\xbc\xb2\xd6\x8f\xff\xf0\x7a\xbd\x53\x56\x4f\xd7\x60\x70\x11\x18\x4f\xba\x07\xdf\x61\xa5\x38\x41\xdb\x1a\xed\xc0\x43\x87\xe9\xdc\xc5\x41\x1d\x43\x62\x3c\xa9\x06\x18\x94\x33\x3a\x05\x0a\x2d\xcf\xb7\xe3\xd7\x22\x64\x36\xbe\xa3\x7c\x34\x5e\x16\xe3\xe4\x91\x6b\x19\x83\x65\x59\xc0\x21\x85\x88\x7f\x1c\x38\x40\xe3\xe9\x7c\x73\xfa\x70\x8a\xd1\xa2\x43\x4e\xd3\xcd\xff\x31\x30\xb5\x58\xab\x21\x36\xc0\x78\x57\x1b\xe9\x96\x32\x1f\x25\x96\x9c\x05\x1d\x9c\x03\xdf\xdc\xdf\xeb\xa7\xf9\xdd\x9c\xf3\x5b\x56\x26\x1e\x37\x97\xc2\x57\x00\x00\x00\xff\xff\x35\xda\xc5\xce\xef\x03\x00\x00")

func dataHostsWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81SpyTxt,
		"data/hosts/win81/spy.txt",
	)
}

func dataHostsWin81SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/spy.txt", size: 1007, mode: os.FileMode(438), modTime: time.Unix(1492270299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xbf\x4e\xc3\x30\x10\x06\xf0\x3d\x52\xde\xc1\x52\xe7\x3a\x76\x48\x54\xda\x91\x9d\x89\x81\xd9\xf5\x9f\xc4\xc2\xf1\x05\xdb\xc1\x94\xa7\x47\xa1\x15\xa8\x12\xad\x4f\xd9\x7c\x3f\x7d\xf7\x29\xb7\xd9\x6c\xc8\x08\x31\x45\x92\xad\x7f\xe4\x64\x99\x95\x48\xba\xae\xd6\xf7\x67\x08\x9a\x58\x6f\xe0\x40\xc6\x94\xe6\x78\x68\x9a\xc1\xa6\x71\x39\x52\x09\x53\x23\x83\xf8\x3a\x6d\x27\xf1\xd9\xbc\x5a\xaf\x20\xc7\x97\xf9\xf4\xe4\x40\xbe\xe9\x50\x57\x75\xc5\xe8\xcf\x47\x18\x63\x9d\x50\x5b\x4e\x1d\xcd\x67\x77\x5e\xb1\x66\x5c\x29\xc9\x24\x42\x31\xd3\xa2\xd4\xbe\xac\x38\x63\x3b\x84\xe2\x1c\xd1\x8b\xef\x64\x8f\x50\x8a\x1b\x8c\xea\x10\xed\xdb\x87\x7d\x57\x52\x62\xa1\x0a\xb2\x77\x20\x54\x81\x7d\x74\x28\x79\x1c\x56\x29\xa8\x72\x34\x47\x3a\x59\x19\x20\x82\x49\xff\x21\x3d\x15\x10\x47\x45\x71\x54\x56\x8b\xca\x6a\x51\x59\x3d\x2a\xab\x47\x64\xc9\xe4\xd4\xdd\xfb\x60\x7e\xb9\xd1\x2d\xbd\xbc\xdf\x58\xb3\x8a\xfc\x7e\x77\x7a\xb3\xa2\x19\xb0\xa7\xff\x0d\xb8\x36\x5e\xa7\x3f\x13\x5d\x2c\x74\x45\x2e\x2b\x8e\x2e\x13\x08\x43\x5d\x7d\x07\x00\x00\xff\xff\x36\xde\xe8\xca\xc3\x04\x00\x00")

func dataHostsWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81UpdateTxt,
		"data/hosts/win81/update.txt",
	)
}

func dataHostsWin81UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/update.txt", size: 1219, mode: os.FileMode(438), modTime: time.Unix(1492270273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNcsiGithubComReg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd4\x5f\x6f\xd2\x50\x18\xc7\xf1\xcf\xb5\x89\xef\x81\x70\x6f\x61\x26\xf3\x0f\x89\x17\x88\x24\x2c\x6e\x73\x11\xb3\x65\x11\xb3\x40\x69\xb4\x11\xda\xa5\x2d\x6c\xf8\xe2\xd5\xf4\xc0\x24\x5c\x09\x46\xbd\xe8\xc9\x39\xa7\xe7\xf9\xfe\x7e\x7d\xce\xf3\xf4\xc7\xf7\x2b\xa9\xcc\x54\xee\x4e\xa9\xe1\xbd\xc4\x67\xa9\x52\xa5\xb0\xd2\xd0\x37\x95\xaa\xe4\x0a\x0d\x97\x12\x85\x52\x2a\x97\x69\x38\x16\x69\x6b\x7b\xec\x51\x78\x3e\x1a\x78\xab\xef\xda\x8d\x53\xef\xf4\x74\x9d\xba\x71\xa6\xab\x67\xe0\xc4\xb9\xbe\x91\xa1\x6b\x43\x1f\xf4\x9d\x19\xe9\x59\x28\x14\x12\x99\x4a\x2f\xb0\x6b\xfd\xdc\xcc\x50\xa2\x0a\x11\xb5\xf2\x52\x2a\x96\x28\x8d\x9c\x9b\x19\x1b\x5a\x8a\x8d\x5c\x18\x2b\x8c\xcd\xc3\xf9\xb5\xcb\x91\x93\x40\xaa\x57\x59\xd8\xff\x14\x5c\x36\x75\xc5\x2a\xa9\xa5\xc4\x1b\x99\xd2\x45\xd0\x9b\x48\x7e\xe9\xaf\xdd\x34\xbd\xd2\xf4\x54\xdb\x0b\x91\xe7\x9b\xb1\x2d\x72\xe4\x99\xe6\xc1\xbc\xcb\x10\xf5\xc0\x6c\x3b\xd2\x71\x1c\x66\x1d\x2f\xc3\x58\xef\x74\xf6\xa6\x0f\xe4\xe1\xb6\xd6\xcc\xfa\xdd\x91\xc8\x6d\x88\x8f\x4c\xad\xc2\x97\xd7\xf1\xd1\x26\x07\x87\x50\xb7\x6e\xff\x94\x7c\x25\x31\xf9\x4d\x76\x77\xab\x70\xe8\xd6\xca\x6b\x33\xb9\xd8\xd7\x70\x7b\x87\x93\xb7\xce\xff\x0e\x7d\x37\xcf\x75\xa5\xdd\x89\x42\xaf\x54\xbe\x58\x98\x58\x28\x03\x2d\xde\xf1\x11\x85\xf5\xfc\x20\x8d\xad\xf7\x7f\xa3\x53\xf7\x4a\x4d\x5b\x6b\xc4\x41\xe5\x9b\x95\x27\xe6\xc6\xee\xb5\xf6\xc8\x59\x2b\x9c\x2d\x37\xdd\xd5\x32\x0d\xcc\xb1\x96\x4c\x1c\xfe\x10\xdb\x59\xa4\x72\xbf\x67\x7d\x3c\x78\xdb\xe6\xe0\x7f\xfb\xfb\x19\x00\x00\xff\xff\xbb\x37\xd0\xd7\x16\x05\x00\x00")

func dataNcsiGithubComRegBytes() ([]byte, error) {
	return bindataRead(
		_dataNcsiGithubComReg,
		"data/ncsi/github.com.reg",
	)
}

func dataNcsiGithubComReg() (*asset, error) {
	bytes, err := dataNcsiGithubComRegBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ncsi/github.com.reg", size: 1302, mode: os.FileMode(438), modTime: time.Unix(1490051427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNcsiMsftncsiComReg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xef\x6a\xd3\x50\x18\x07\xe0\xe7\xb3\xe0\x3d\x94\x5e\x40\x69\x9c\x9d\x52\xf0\x43\x89\x85\x16\xd7\x3a\x8c\x6c\x0c\x23\xa3\x4d\x53\x0d\xac\x89\x24\xb1\xd3\x9b\x57\xe9\xe9\xb0\x88\x82\xdb\x4a\x08\x21\xff\x9e\xf7\x77\xde\xf7\xfc\xfc\x71\xa9\x50\x5a\xa9\xdc\x6a\x74\xbc\x93\xfb\xa4\xd0\x68\xd5\xbe\xeb\x18\x5b\x29\xb4\x2a\xb5\x8e\x0b\xb9\x5a\xa3\x50\x29\x75\x0c\xf4\xf4\xf5\x3d\xf5\x24\x9c\x1f\x4c\xbc\x31\x76\xe5\xda\x99\xb7\x62\x23\x67\xae\xcd\x8c\xc4\x26\xa6\xe6\xc6\x52\x89\x2b\x89\xf7\xc6\x66\x52\xb1\xaf\x6a\xb5\x5c\xa9\x15\x07\x7b\x57\xbf\x72\x23\x91\x6b\xc3\x1f\xbb\xca\x5b\x85\x4c\xae\x91\x9a\xbb\xb1\x90\xd8\xca\xa4\xce\x2d\xd4\x16\x36\xe1\xfb\x7d\xca\xd4\x34\x48\xbb\xbb\x32\x3c\xff\x18\x52\x76\x8d\x64\x5a\x85\xad\xdc\x6b\xa5\xc6\x79\xa8\xb7\x94\xff\xae\xbf\x4f\xd3\xf5\x4a\x57\xe4\x44\xa4\x27\xd2\xf7\x42\xcf\x33\x83\xb0\xf6\xfd\xb5\xfb\x60\xf5\xc2\xe9\x9d\xbc\xb6\x72\x22\x37\xf4\xdc\xda\xc0\xc2\xd0\xc0\xd2\x4b\x91\xa1\xa1\xe8\x5e\xfa\x44\x15\x66\xb6\x37\x57\xe1\x6d\xcf\x46\x63\xad\x55\xca\xc2\xcc\x7a\x32\x95\xcd\x83\xc4\x43\xd2\xc7\xa8\x97\x72\xcb\xff\xf4\x76\x16\x66\x5a\x87\x7a\x55\x90\x3b\xe6\x62\x89\xe9\x23\xcc\x43\xde\x63\xdd\x3f\x7b\x7a\x1b\x8e\xe3\x56\xff\x77\x4f\x0b\x5f\x6c\x9d\x1e\xe9\xee\xf6\x7e\xeb\xf3\x9d\x79\x10\x5a\xdf\x42\xfe\xfb\x0b\x87\x64\xff\x56\x7e\x05\x00\x00\xff\xff\x0d\x77\x05\xbe\x32\x04\x00\x00")

func dataNcsiMsftncsiComRegBytes() ([]byte, error) {
	return bindataRead(
		_dataNcsiMsftncsiComReg,
		"data/ncsi/msftncsi.com.reg",
	)
}

func dataNcsiMsftncsiComReg() (*asset, error) {
	bytes, err := dataNcsiMsftncsiComRegBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ncsi/msftncsi.com.reg", size: 1074, mode: os.FileMode(438), modTime: time.Unix(1464308045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNcsiNcsiTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xcf\xcc\x4b\xc9\x2f\x2f\x0e\x2e\xa8\x74\xca\xc9\x4f\xce\x4e\x2d\x02\x04\x00\x00\xff\xff\x76\x30\x32\x0e\x11\x00\x00\x00")

func dataNcsiNcsiTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataNcsiNcsiTxt,
		"data/ncsi/ncsi.txt",
	)
}

func dataNcsiNcsiTxt() (*asset, error) {
	bytes, err := dataNcsiNcsiTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ncsi/ncsi.txt", size: 17, mode: os.FileMode(438), modTime: time.Unix(1464301454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x6f\xdb\x30\x0c\x85\xef\xfd\x15\x05\x7a\x36\xd5\x34\x5b\x31\x0c\xd8\x65\x7f\x60\x87\x1d\x76\x66\x24\xda\x26\x62\x51\x9a\xc8\xc4\x4e\x7e\xfd\xe0\x34\x5b\x16\x57\x1e\x76\x8c\xde\x8b\x3e\xf3\xf1\xe9\xe9\xd1\x91\x79\x17\x44\x23\xea\x4f\xf0\x49\xda\x87\xa7\xc7\xde\x2c\xeb\x67\xe7\x3a\xb6\xfe\xb0\x03\x9f\xa2\xf3\x05\xcf\xa7\x26\xe2\xe4\x7e\xb0\x84\x34\xea\xf7\x7c\xfa\x3a\x24\xbf\xa7\xe2\xac\x10\xb9\x88\x6a\x54\x5c\x40\x43\xd7\x27\x35\x75\x23\xcb\xe6\xd9\xd1\x64\x05\xc1\x26\x7b\x78\x50\x2a\x47\x2a\x5f\x1c\x8a\x8e\x54\x14\x22\xfb\x92\x34\xb5\x76\x21\xdc\xe4\x9c\x15\x74\x7f\xca\xb4\x38\x3f\x6f\x5f\x37\x9f\x36\xaf\x70\x4c\x10\x95\xbc\x04\x10\xb2\xbf\xf5\x8f\x9b\x97\xed\xf6\xc3\x9a\xee\x83\xcc\x03\x1a\x89\x41\x2e\x29\x80\x8f\x0a\x51\xe5\x9e\xe2\xfb\xc4\x9e\xd6\xbe\xad\xa6\x82\x28\x9a\x5f\xb0\x06\x9e\x31\xa3\x28\x8c\x6f\x79\x2d\xee\xb9\xe8\x8d\x42\x87\x46\x23\x9e\x20\x92\x2a\x49\x47\x05\x06\x3e\x52\xcd\x3c\xef\x86\x3b\xc8\xa8\x9a\x53\xb1\x7b\x5e\xa0\x3c\xa4\x13\xa8\xa1\xb1\x07\xdc\x63\x44\x36\xf2\xbd\xa4\x21\x75\x4c\x0b\x7a\xa0\xe3\x3c\x05\x1e\xac\x87\x69\x97\xa6\xf7\xc8\x10\x03\x44\x32\x9c\x7f\xb3\xa7\xd5\x5d\x05\x99\x23\x6c\x4d\xbc\xf2\xbd\xd2\x12\x85\x1d\xfa\xfd\xed\x9f\x4d\x9f\xfa\xb8\x62\x52\xc2\xe2\xfb\x35\xca\x1f\x5b\x35\xcb\xae\x12\x19\xc7\xae\xd1\x26\xaa\x34\xf3\x82\xde\xf2\x38\xd3\xa2\x10\x03\x7b\x12\x65\xe9\x20\xe6\x35\xf4\x1c\x9f\x54\x00\x11\xfa\x64\x11\x79\x58\x1c\x57\xb3\x48\x6d\xcb\x9e\xae\x9d\x58\x01\x25\xf9\x6d\xd0\x76\x82\xa8\x37\x25\x17\xf6\x34\xb0\x5a\xed\x51\xfc\x5f\x83\xf4\x19\x5e\x62\x90\xfb\xf1\xf5\x5b\xed\xf0\xba\x88\xe5\xb3\x50\x32\x63\xe9\xb4\x51\x1d\x56\x3a\x73\x2d\x5f\xe5\x4e\x4b\x85\x1a\x8e\xd8\x91\x82\x36\x2b\x01\x5c\x5c\x14\x3a\x6a\x03\x04\x9d\xfe\xb1\x13\xe3\x81\x9a\x6b\x33\x61\x24\xb4\x9e\xca\xba\x37\x52\xbd\x36\xb6\x7f\x81\x3c\xd8\xfb\x51\x0f\x5c\x0b\x7a\x1c\xc7\x45\xd3\x7f\x05\x00\x00\xff\xff\x16\x8e\x07\xd5\x3c\x05\x00\x00")

func dataOpenwrtWin10ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10ExtraDnsmasqConf,
		"data/openwrt/win10/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin10ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/extra/dnsmasq.conf", size: 1340, mode: os.FileMode(438), modTime: time.Unix(1493751070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\x3f\x6f\xdb\x3c\x10\xc7\xf1\x5d\xaf\xe2\x00\xcf\xfc\x91\x77\x24\xf5\xe7\xd9\x9e\xd6\x6e\xe1\x25\x0e\x94\x14\x99\x15\x99\x69\xdc\xda\x96\x40\xd1\xb0\xd3\x57\x5f\x28\x28\x8a\x6c\x62\x07\x0d\x82\x3e\xfc\xe2\x4e\x5c\x91\x0e\xa9\xd7\x2f\x87\x18\xae\xdd\xf1\x88\xcb\x14\x62\xb1\xa2\xd7\x94\xc6\xe9\x3f\xad\xbf\x1f\xd2\xeb\xe5\x19\xfd\x70\xd2\x7d\xec\x7e\xbd\xa9\x53\x77\xd3\x4f\x87\xf3\x7e\xb8\x4e\x0f\xe3\xdb\xa7\xe3\xd0\xff\x0c\x51\xa7\x18\x82\x3e\x75\x53\x0a\x51\xef\xbb\xd4\xfd\xed\xe9\xeb\xe1\xcc\x46\x87\x5b\x8a\x1d\xd2\x2d\x15\xc5\x8a\xc2\xf9\x65\x88\x7d\xa0\x38\x5c\x52\x88\xb4\xbe\x7b\x28\x0e\x63\xea\x9e\x8f\x61\x22\x95\xe8\xdc\x25\x52\x5b\xba\x6f\x37\xed\xee\xdb\xe3\xf6\xee\x2b\xa9\x91\x52\x3f\x92\x52\xfb\x71\x88\x89\xbc\x25\xf5\x83\xda\xcd\x7a\xdb\x6e\x3e\x3f\x92\x52\x69\x50\xf3\x87\x89\xbc\x5d\x2e\x5d\xf6\x99\xa5\x62\x45\xf1\x72\x0c\xd3\x87\xe4\x96\xbe\xec\xda\xa7\xff\xdb\xf5\x7c\x6c\xdd\xee\xee\x49\xed\x89\x2d\x6a\x03\x16\x78\x97\x41\xd9\x54\xb0\x60\xa9\x33\xad\x30\xc4\x98\x25\xec\x0c\xaa\x0a\x22\x25\x8c\x96\xc5\x31\x9c\x01\x73\x0d\x36\x16\xd5\x92\x2d\x1d\x1c\xbc\x83\xc8\xa2\xf4\xf0\x02\x36\x73\x3c\xdf\x36\x36\xd7\xd6\x59\xbb\xcd\xda\xbf\x6b\xc9\x2a\x7b\x88\x17\xb8\x45\xcb\xc6\xc1\x39\xd4\xef\xbf\x2d\x07\x0b\x7b\xb0\x2b\x73\x6e\x8f\x2d\x43\xbc\x45\xc9\x59\x2b\xb2\x75\xe0\xca\x80\x6b\x8f\x6a\x39\x5e\xd6\x28\x2d\xb8\x46\xd5\x2c\xda\x86\x21\x56\xc0\xb6\xc9\x9a\x44\x8c\x43\xd5\x80\x9b\x6a\x7e\xd4\x87\x57\xe1\x8c\xc3\x15\x5c\x89\x79\x1b\xf1\x3e\x57\x37\x0e\xf9\xe9\x66\x4e\xff\x03\xb6\x8b\x37\xfb\x07\x8b\x58\x34\x59\x63\x94\x35\xb8\x2c\x21\xde\x15\xbf\x03\x00\x00\xff\xff\x65\x0b\x65\x69\x6b\x05\x00\x00")

func dataOpenwrtWin10ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10ExtraFirewallUser,
		"data/openwrt/win10/extra/firewall.user",
	)
}

func dataOpenwrtWin10ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/extra/firewall.user", size: 1387, mode: os.FileMode(438), modTime: time.Unix(1492271894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x98\xcb\xb2\x9b\x38\x10\x86\xf7\x79\x8a\x54\x65\xed\x06\xc1\x89\x13\x4f\xd5\x6c\xe6\x15\x66\x31\x6b\x21\xb5\x41\x65\x74\x39\x6a\x19\xec\x79\xfa\x29\x30\xe7\x62\x2c\x61\x65\x92\xd5\x29\xfe\x4f\x6a\xa9\xd5\x37\xe7\xdb\xd7\x02\x83\x28\xa4\x21\xcd\xe9\x15\x84\x35\xc7\x2f\xdf\xbe\x76\x21\x38\xfa\xa3\x28\x5a\x15\xba\x73\x03\xc2\xea\x42\x78\xfe\xef\x75\xa7\xf9\xa5\xf8\x47\x19\x69\x47\xfa\xdb\x5d\xff\xea\xad\x38\xa1\x2f\x82\x47\x2c\x34\xa7\x80\xbe\x90\x3c\xf0\xa2\xb3\x14\xa8\x18\x95\x61\x65\x41\xee\x0a\xe1\x12\xbe\x7c\x21\xf4\x03\xfa\x3f\x0b\xbe\x2b\xcb\x92\x01\xdf\x69\x42\xd9\x22\x18\x0c\xc5\xbd\x58\x6d\x89\xf5\x96\xf8\xb2\x25\x7e\xdf\x12\xf7\x5b\xe2\x8f\x2d\xf1\xe7\x96\x78\xd8\x10\x59\xb9\x25\x6e\x79\x88\xa5\x3d\x14\xfd\x0a\x5c\x12\x03\x4d\x66\x7e\xca\xfb\xef\x15\x68\xe2\x92\x22\x2b\xaa\xd8\x0a\xcf\x65\xe4\xb3\xa8\x63\x1f\x83\x1a\x54\xb8\xc2\x78\x0b\x98\x95\x2a\x0d\x5e\xce\x6b\xb3\xd2\x5c\x1e\x38\x8a\x6c\x7d\xbb\xce\xe3\xb1\xe3\xd7\x54\xd2\x11\xf0\x20\x75\x58\x09\x27\xbe\x13\xd2\xec\x0c\x01\x97\x01\x45\x07\x12\x3f\xd4\x26\xe1\xb5\x26\xe9\xb5\x26\xee\x9d\x46\x99\x76\xbe\x86\x12\xde\x92\x3d\xae\x4e\xd1\xf4\x75\x5d\xb2\x1d\x07\x26\xfd\x10\x95\x44\x5a\x6a\x63\x92\x61\x75\xf9\xb2\xc3\x94\xb4\x8f\xdb\xba\x49\x1b\xab\xe2\xb6\xaa\x66\x27\xac\x9f\x33\xda\x29\x70\xd3\x1f\x31\xac\x76\x59\xd8\xdb\x6e\xf5\x26\x76\x4d\x7b\xec\x9a\xf6\xd8\x4d\x8a\x5e\x90\x60\xfa\x53\x99\x76\x47\xd7\x55\x00\x8a\x58\xe4\x88\xc7\x57\x16\xb7\xb2\x26\x45\x34\x05\x05\x87\x80\x3d\x6a\x0c\xfe\x9a\x0a\x04\xc1\x45\x87\x30\x15\x50\xcd\x7d\x88\xa7\x8d\x90\x26\x7a\x1e\x49\xd5\x1e\xb8\xa6\x03\x68\x42\x61\x56\xc6\x3b\x96\xe1\xfc\x77\xaa\xda\xa6\x92\x0e\x5e\xa4\x98\x83\x17\x29\x16\x41\xb3\x54\xa5\x37\xac\xe2\x1b\x5a\xed\x78\xc0\x8b\xe8\xb8\x69\x11\x44\x6f\xcf\x92\x3b\xb7\xba\xf7\x1d\xc4\x20\x78\x7e\x3c\x2a\xa1\xb9\xe1\x2d\xfa\x35\xeb\x1d\x50\x48\x66\xe9\xa4\xe3\x25\x80\x26\x15\xb8\x3c\x12\xb4\x7d\x23\xcd\x54\x07\x12\xbc\x63\x25\xdb\x39\x6f\x25\x48\x0b\x92\x1c\x68\x97\x64\x89\xc1\xe8\x04\x0c\xe5\xf4\xbc\x77\xc7\x92\x4d\xcd\x5f\xcf\xb1\x27\x97\x4d\x3d\x1a\xaa\x4a\x36\xfd\x83\xd1\x50\x3c\x60\x64\xf3\x7d\x53\x24\xd1\xb1\x92\xb1\xb2\x3c\xb0\x1f\x59\x20\xfb\xfe\xc4\xdc\x3b\x78\x60\x2f\x99\x60\x7d\xc8\x01\x59\xb9\xaf\xf6\x99\x60\x9d\x65\x9a\x95\x3f\xab\xac\xcb\x4c\x60\x95\x77\x99\x9f\xac\x7e\x0e\xd6\x93\xe1\x1c\x3f\x4e\xe0\x4b\x99\x71\xeb\xba\x3c\x54\x55\xb9\xed\xc7\xd1\x10\x93\x5b\xc4\x7e\xde\xaa\x2a\x0f\x8c\x95\x9b\x61\xf3\x01\xbe\xb0\x2d\xbf\xe0\x00\x83\xf2\xe1\xcc\x7b\xe4\x3e\x74\xab\xd8\x3e\x3e\xaf\x89\x52\xf1\xd6\x58\x0a\x4a\x10\xd0\xd9\x39\xeb\x43\x0a\xc5\x68\xa5\x9e\x8a\xe1\xf6\x31\xf0\x0c\x83\xf5\x01\x2f\x73\xe9\x4d\xed\x7e\xec\xf1\xf2\x58\xf4\xdb\xc8\x27\xb4\x99\x69\xdf\xa2\x1d\xd0\x67\xc2\x5d\x64\x12\xe9\x22\x13\x9a\xda\x91\xa9\x32\xaa\xfd\x27\x6e\xb3\xde\x2b\x76\x6b\x8d\x02\x09\xc8\x0a\xc5\xfb\xd4\x09\x9f\x91\x60\x88\x07\x71\xef\x7b\x65\x8e\xe8\xd1\x08\x84\xde\x0a\x1e\x94\x35\xd0\xab\x61\xd5\x3b\x4f\x43\x7e\x29\xed\x1b\x06\xe3\x38\x82\x26\xe0\x27\x2e\xcd\x6a\x42\x9b\x37\xf7\xd1\x99\xb2\xa7\x6a\xc4\x06\x3c\x4a\x6d\x8d\x84\xb9\x1f\x24\x8c\x68\x88\x0c\xaa\xda\x36\xaa\x47\x70\xca\x21\x70\xaf\x92\x81\x14\x9b\x0e\x34\x99\x80\x14\xd2\x43\xc8\x6d\x56\xb6\x53\xf7\x42\xee\x1c\xdd\xbc\xf4\x88\xf8\x73\x8f\x4f\x38\x9b\x33\x8a\x6c\x40\xb1\x67\xb4\x06\x09\x43\x50\xa6\xa5\x5d\x63\x2a\x98\x96\xbd\x3d\x65\xc6\x12\x71\xfd\xe5\x25\x53\x5b\xfb\xc5\x25\xdd\x29\xcb\x8a\xf3\x08\x47\x6b\x83\xf3\xca\x04\xe7\x51\x2a\xb1\x72\x8e\xf3\x38\x28\x1c\x1f\x43\x68\x9a\xfe\x1f\x1d\x1e\xfd\x4d\x30\xed\xeb\xa7\xe3\xf0\xf7\x9c\x49\x3c\x85\xc7\xa9\xe8\x11\x8c\x48\x90\x53\x31\x49\x74\xa8\xf9\xe7\xed\x62\x89\x40\x28\xce\x1e\x63\x71\xbc\x28\xc7\x9e\x53\x17\x78\x7f\x52\xa6\x5d\x03\xcb\x81\xb3\x4f\xf4\xf6\x02\xc4\x8d\x6c\xec\x76\x9d\x7d\x87\x47\x65\xb2\xc0\x1b\xf4\x64\x1a\xbb\x87\x53\x90\x49\x8e\xb6\x8b\x14\x9b\x44\x17\x29\x36\xda\x92\xbb\x1a\x0c\xe9\x43\xcd\x32\xef\x93\x1d\xed\x06\xe0\xd9\x5b\x87\xcf\xde\xf3\x55\xe7\xbd\xc5\xab\xfe\x2d\x28\x96\x31\x44\x63\x24\xec\x29\x58\x8f\x82\x07\xde\xdb\xd6\xe3\xf0\x56\xde\xe7\xcf\xaf\x67\xde\xab\x90\xb6\x7f\xf6\x03\x5e\x61\xe4\x81\xac\x49\x41\xa1\x04\xa2\x1e\xf8\x09\xe4\xd5\x70\xad\x04\x04\x35\x15\xbf\x74\xa3\xff\x58\xf1\x94\xc4\x1e\x85\xd5\x9a\x1b\xf9\xdc\x5b\x19\x70\xcc\x6b\x1f\x28\x77\x0e\x2f\xd0\x4c\x89\x96\x20\x36\x2c\xdf\x80\xb3\x4f\xd6\x8f\x40\x47\x7c\xfb\xe5\x43\x1d\x77\x93\x99\xed\x1e\x3a\xb0\x72\x99\x88\x3e\x25\xe1\xf3\xc2\x19\x5d\x96\xb0\x80\x9e\xa6\x60\xe8\xae\x8d\x57\x72\x1e\x3f\x3a\xf4\xab\x00\x9a\x6b\x6c\x64\xa2\x5b\x6c\x64\xf6\x99\x85\xce\x6c\x31\x0b\x9d\xd9\x5d\x16\x3a\xb3\xb1\x2c\x74\x4e\x11\xfc\x3f\xde\xcf\xf4\xfc\xa7\x49\xf7\x49\xcd\xbc\x1b\x8a\x73\x0f\xb0\x69\x7c\x49\xe8\xc7\x5a\xb1\x9d\xe9\x8b\xea\x1c\x3e\x4f\xc6\x85\xfd\x4d\x2e\x76\xbf\x69\x38\xcc\xb9\x63\x66\x53\x9c\xff\x73\x1c\x94\x1b\xf6\x49\x62\x1e\x63\x3f\x86\xc5\xff\x02\x00\x00\xff\xff\xc5\x34\x4c\x10\xab\x17\x00\x00")

func dataOpenwrtWin10SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10SpyDnsmasqConf,
		"data/openwrt/win10/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin10SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/spy/dnsmasq.conf", size: 6059, mode: os.FileMode(438), modTime: time.Unix(1493751059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x99\xcf\x72\xdb\x46\x0c\xc6\xef\x7e\x0a\xce\xf8\xac\x8f\x0b\xec\xff\xde\xda\x3a\xed\xf8\x92\x64\x94\x74\x72\x56\x64\xa6\x71\xeb\x58\x1a\x89\x9e\xc4\x7d\xfa\x0e\x96\xa4\xad\x9c\x00\x1e\xe8\x8b\x7f\xc6\x60\xbf\x05\xb0\x00\x7c\xdd\xf5\xc3\xb8\xef\xbf\xdc\x9f\x86\xef\xbb\x87\x07\x3c\x9d\x87\xd3\xd5\x75\xf7\x75\x1c\x8f\xe7\x5f\xfa\xfe\xef\xfb\xf1\xeb\xd3\x67\xec\x0f\xdf\xfa\xfd\x69\xf7\xdf\xf3\xe6\xdb\xee\x47\xff\xe9\xfe\xf1\xee\xf0\xfd\xfc\xe1\xf8\xfc\xdb\xc3\x61\xff\xef\x70\xea\xc7\xd3\x30\xf4\xdf\x76\xe7\x71\x38\xf5\x77\xbb\x71\xf7\x62\xaf\xff\x7e\xff\x48\xae\x3f\x1f\x9f\x31\xfe\x18\xaf\xae\xae\xbb\xe1\xf1\xcb\xe1\xb4\x1f\xba\xd3\xe1\x69\x1c\x4e\xdd\xcd\xdb\x0f\x57\xf7\xc7\x71\xf7\xf9\x61\x38\x77\x9b\xb1\x7b\xdc\x8d\xdd\xe6\xb6\x7b\xbf\x7d\xb3\x7d\xf7\xd7\xc7\xdb\xb7\x7f\x76\x9b\x63\x37\xee\x8f\xdd\x66\x73\x77\x3c\x9c\xc6\x2e\xfa\x6e\xf3\x4f\xb7\x7d\x73\x73\xbb\x7d\xf3\xfb\xc7\x6e\xb3\x19\x0f\x1b\xf9\xc5\xb9\x8b\x5e\xb7\xf4\x74\x67\xb4\x74\x75\xdd\x9d\x9e\x1e\x86\xf3\x85\xc9\xdb\xee\x8f\x77\xdb\x4f\xbf\x6e\x6f\xe4\xcf\x6e\xb6\xef\xde\x77\x9b\xbb\x8e\x3c\x72\x02\x53\x01\x51\xb6\xc2\x15\x54\xc9\x0e\x33\x39\x03\x4c\x2e\x23\xa2\x14\x0d\x65\x8f\x9a\x91\x08\xe4\x55\x87\x27\x96\x72\x01\x65\x6f\x83\xd9\x55\x54\x93\xe1\x0a\x72\x20\x55\x87\x05\xad\x08\xc1\xce\x26\x2b\x4b\x49\x3e\x23\xcc\x04\x76\x96\xc3\x91\x63\x04\x70\xb4\x88\x26\x2c\x13\x2c\x0e\x0b\x4a\x31\x82\x82\x1a\x11\x8d\xf6\xa0\xc2\x20\x56\xcf\x17\x1c\x52\x45\x70\xa0\xa8\x1e\x2f\x38\x09\x4c\x02\x65\x8b\x59\x41\x59\x3f\xdc\x0b\x49\x89\x2d\x6c\x06\x73\x85\xeb\xd9\x62\xb9\x88\x0e\x15\xa1\x1a\x58\x22\x8f\x02\x8e\xd1\xc8\x92\x43\x56\x73\x6e\x61\x03\x28\x5a\x9d\x60\x46\xb0\xdc\x05\x89\xd5\x50\xc1\xac\xc6\xc4\x4c\x73\x20\x50\x50\x13\xaf\xd1\x11\x64\xc8\xbb\x86\x66\x50\x10\xe3\x36\x37\x32\x28\x12\xd8\xa4\x06\x53\x33\x4d\x45\x0d\x8d\xd8\x4e\x06\xcf\x88\xea\xf9\xa2\x04\x5b\x73\x18\x5e\xcd\xd3\x0b\x58\xbf\xc1\x17\x58\xca\x85\x1a\x48\x42\x4b\x85\x0d\xd9\x22\xde\x42\x8b\x78\xa4\xeb\x31\xd3\xf2\xa9\xd9\xba\xc0\xd5\x5b\x4a\xe2\x4c\x33\x7b\xb0\x49\xbe\x92\x91\x9c\x3c\x53\x1a\x9c\x02\x02\x12\xc8\xa9\x62\x34\x92\xbd\xa9\x0e\x34\x36\x06\x1b\x1b\xe1\x6b\x0b\x52\xf6\xba\x13\x11\x91\xc1\x09\xac\xd6\x81\x09\x25\xe7\xac\x5e\xb4\x48\x22\xc3\x6b\x36\x3b\x21\xdd\x82\x41\xe0\x88\x18\xc1\x15\xec\x4d\x2e\x4f\x6a\x98\x84\x88\x08\xc1\x90\x7b\xaf\xa8\xe9\x64\x0d\x25\x67\x74\xb6\xb1\x6a\x92\x4e\xac\x3c\x0d\x7a\xe1\x9c\xd8\x56\xc2\x8d\x47\x6b\xac\x9a\x9e\x17\xac\x9a\x42\x33\xeb\x1d\xa2\xd5\xdf\x9c\x50\x8d\x2c\x5b\xb3\x68\xa2\x23\x23\x19\x3d\x16\x36\x1b\x55\x13\xb6\x1a\x55\x6b\xec\x0a\x1f\xc8\x20\x85\xf4\x82\x75\x7a\x6b\xf4\x3e\xe8\x27\x5a\x0f\xcd\x0b\xba\xe8\xc1\x79\x41\xaf\xf0\x3b\x83\xbc\x2a\x75\xce\x48\x59\xb2\xdf\xd0\xc0\x91\x0b\x68\xaf\x58\x86\x3e\x00\x34\x58\x42\x39\x23\xd9\x2c\x0b\x2c\xf3\x8d\x15\x0e\x4e\x02\xd5\x48\x33\x17\xe8\x0d\xf8\x05\xcc\x4e\x0d\xbd\x85\xf6\x19\x94\xd4\x5b\x6c\xb4\xe4\x37\xa8\xaa\x6d\xc0\x0c\xb3\xb4\x73\x7a\xe5\x68\xb4\x74\xe1\xac\x57\xa4\x99\xf5\xc5\xf0\x8e\xcc\x6c\x94\xae\xcb\xe4\x32\x93\x43\x40\xd6\x67\xdf\x85\x75\x28\x66\x98\x89\xc1\xc1\x74\x87\xa2\x9b\x8f\x60\xbd\x59\x25\x22\xb0\x4c\x72\x92\x01\xba\x2b\xaf\xb4\x61\x9c\xfb\x89\x36\x7b\x92\x6c\x5d\x09\x79\x12\x1f\x64\x8c\x58\x83\x4b\x7f\x6b\x58\x4d\x04\x50\x76\xf0\xce\x94\x06\x17\xb4\x21\x7b\x67\x5a\x8a\xb0\xde\x1a\x2c\x34\xb9\x64\x3c\xe6\xc2\x4b\xff\xbc\x86\x0e\x6a\xd1\xbe\xa4\xab\x5e\xd2\x5e\xe8\xb2\xca\x93\xb2\xca\x93\x82\x6c\xbe\x9f\xe6\xc9\x0a\x57\x88\xd6\x49\x4e\x11\xd1\x2e\x0b\xbb\x35\xb2\xb0\x5b\x23\x0b\xbb\x35\xb2\xb0\x5b\x73\x9d\xb9\x18\x36\x5a\xaf\x74\xb5\x14\xb8\x85\x2e\x12\x2a\xe6\x63\xb2\x8f\x86\x39\x4e\x1e\x60\xa2\x84\x42\x26\xbd\xf3\x3c\xe8\x98\x4c\xc7\x2c\xfd\x54\x64\x5b\x9c\xcc\xb4\x31\x91\x27\x9a\x9c\x6d\xaf\xb3\xe0\x6c\x6a\x20\x66\xd8\xdb\x26\xaf\x19\x17\x4d\x56\xe1\x2b\x0e\x9a\x20\x3f\x8d\x68\x0e\x60\xbd\xeb\x9f\xe1\x4a\x96\xe7\x78\x62\xa5\xc8\x52\xb1\x7a\x3c\xd1\x56\xa7\x27\x5a\x6f\x92\x66\x9a\x3c\xd8\xb0\x42\x9f\x69\x26\xd8\x4d\x73\xb0\xa4\xe4\x0c\x87\x6a\xd2\x3a\x15\x24\xc9\x2f\xcb\x26\x6d\x86\x29\x24\x18\x9a\xaa\x05\x96\xf6\xc4\x0a\x67\xcb\x8c\xd5\xe0\x69\x11\xa3\x8f\x9b\x0d\xf6\x6d\x57\x91\x6c\x96\xfd\xf4\xdc\xe8\xbb\x34\xaa\x04\xf6\xdc\x7a\x7f\x53\xbe\x34\x3e\xb5\xcd\x77\xd1\x6f\xa6\xd1\x19\xec\x8a\x65\xf3\xfd\x82\x93\xf8\xae\x87\x54\xc3\x2b\x62\x40\xd4\xdf\x9b\x2a\x25\xa7\x6d\x93\x4d\x07\x95\x31\x2b\x24\x64\x99\x57\x8d\x2c\x39\xcb\x12\x75\x81\xa5\x79\xd4\x37\xdb\x0b\x5d\x03\x0c\xff\x67\x70\x19\xa9\x80\x52\xb2\x74\xbc\x4c\x1e\x54\x6b\x7b\x25\x9b\x22\xff\x07\x00\x00\xff\xff\xfa\x24\x41\x13\x80\x1c\x00\x00")

func dataOpenwrtWin10SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10SpyFirewallUser,
		"data/openwrt/win10/spy/firewall.user",
	)
}

func dataOpenwrtWin10SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/spy/firewall.user", size: 7296, mode: os.FileMode(438), modTime: time.Unix(1492271991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd2\x4b\x6e\xe3\x30\x0c\x06\xe0\xbd\x4f\x11\x20\xeb\x90\xb6\x13\x0c\x30\x03\xcc\x66\xae\x30\x8b\xae\x59\x89\x76\x8c\xe8\xe1\x8a\x74\x1c\xf7\xf4\x45\x50\x23\x6d\xda\xfa\x91\xb5\x3e\x92\x3f\x25\x6d\x37\xc8\x6a\xd0\x06\xf1\x24\x2f\x60\x62\xa8\xb2\xed\xe6\xa8\xda\xca\x1f\xc4\xba\xd1\x63\xf7\x0c\x26\x7a\x34\x89\x5e\x87\x9d\xa7\x0b\x3e\x35\xc1\xc6\x5e\xfe\xb7\xc3\x3f\x17\xcd\x89\x13\x6a\x62\x46\x4f\xa2\x9c\xd0\x92\x12\x1e\xa3\xa8\x60\xdf\x84\x22\xc7\xae\xb5\xa4\x0c\x7a\xd1\x2c\x13\x4e\x67\x4e\x7f\x31\xcf\xf3\x32\x2f\x77\x05\x38\xe8\xdf\xbb\x8d\xea\x3a\xe9\x4e\x99\xfd\x1a\x55\xd9\x65\x55\x1c\x7e\x57\xcb\xaa\xcc\x7f\x2d\xe6\xa2\x0e\x6c\xec\x83\x8b\x64\x17\xd8\xf9\xb0\x4a\x1a\x75\x76\x76\xa2\x6d\xa4\x75\x34\x18\x52\x72\xb1\x06\xdf\x82\x6f\x4c\x8a\x12\x2b\xfd\x02\x1d\x58\x76\xcd\x99\xd3\x30\xa7\x56\x64\x62\x7f\x8d\x24\x53\x2d\x2a\x2e\x61\x2c\x7b\x50\x00\x9d\xc8\x06\x81\xc0\xfa\x19\xef\x3f\x82\x5b\x69\xbf\x85\x87\x20\xa4\x66\xa6\x68\x7a\xdb\xaa\x5e\xfb\x0e\xb7\x06\xf7\xe6\x6e\xa8\x38\x59\x58\x7c\x4a\xfc\xb8\xb8\x28\xa9\x3c\x74\x55\x63\x45\x31\xf3\x38\xb7\xa6\xd3\x44\x5d\x07\xeb\x3e\xcb\xca\xbb\x5b\x3c\x1a\x4f\x62\xaa\x31\x7b\x0b\x00\x00\xff\xff\xa4\x6f\x05\xfc\x76\x04\x00\x00")

func dataOpenwrtWin10UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10UpdateDnsmasqConf,
		"data/openwrt/win10/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin10UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/update/dnsmasq.conf", size: 1142, mode: os.FileMode(438), modTime: time.Unix(1492272216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\xc1\x72\x9b\x30\x10\x06\xe0\x3b\x4f\xb1\x33\x3e\x6b\xc5\x4a\x48\x40\x6f\x6d\xed\x76\x7c\x89\x33\x24\x9d\x9c\x09\x28\x8d\x5b\x6c\x18\x21\xc6\x49\x9f\xbe\x83\x69\x13\x72\x92\x74\xf6\xe7\x9d\x7f\x77\xbd\xf2\x06\xb8\x71\x0d\x7f\x3a\x5a\x73\xa9\xbb\x0e\xa7\xd1\xd8\x64\x03\xcf\xce\x0d\xe3\x27\xce\x7f\x1e\xdd\xf3\xf4\x88\x4d\x7f\xe2\x8d\xad\xff\xbc\xb2\x53\xfd\xc2\x1f\x8e\xe7\xb6\xbf\x8c\x77\xc3\xeb\x97\xae\x6f\x7e\x1b\xcb\x9d\x35\x86\x9f\xea\xd1\x19\xcb\xdb\xda\xd5\x6f\xf5\xf8\xe5\x78\xa6\x94\x4f\x43\x5b\x3b\x83\xee\xc5\x25\xc9\x06\xcc\xf9\xa9\xb7\x8d\x01\xdb\x4f\xce\x58\xd8\xde\xdc\x25\xc7\xc1\xd5\x8f\x9d\x19\x81\x39\x38\xd7\x0e\xd8\x1e\x6e\xab\x5d\x75\xf8\x71\xbf\xbf\xf9\x0e\x6c\x00\xd7\x0c\xc0\x58\x3b\xf4\xd6\x81\x92\xc0\x7e\x41\xb5\xdb\xee\xab\xdd\xd7\x7b\x60\xcc\xf5\x6c\xfe\x60\x04\x25\xfd\x95\xa6\x36\xb0\x52\xb2\x01\x3b\x75\x66\x5c\x95\xdc\xc3\xb7\x43\xf5\xf0\xb9\xda\xce\x5f\xdb\x56\x87\x5b\x60\x2d\x90\x44\x4a\x73\xcc\x50\xa5\xe1\x54\xf8\xa8\x98\xa9\x44\x2a\x4a\x24\xa1\x63\xb4\xca\xa3\x74\xe1\xd3\x5a\xa1\x52\x48\xb2\xc0\x94\x8b\x2c\x50\x6b\x19\xa4\x49\x12\x0a\x25\x51\xca\xa0\xe9\x65\x48\x79\x8a\x8a\x90\x0a\x6f\x93\x1f\xb4\xb7\xc9\xb5\x2e\x63\x92\x88\xcc\xbb\x9c\x0f\x3a\x26\xb7\xc8\xc2\x73\x4b\x14\x65\x04\x96\xe1\x3d\x86\xed\xfd\x3f\x27\x52\xa8\x83\x8b\x5f\xb5\xf7\x16\xde\xb4\x56\x31\x33\x59\x78\xf0\x54\xae\x5c\x51\x1c\x97\x5e\xae\xf2\xe5\x7c\x24\x8a\xd4\x3f\xc5\x45\x8b\x2c\xc5\xc2\x1f\xfc\x1d\x0b\xe1\x1f\xf9\xac\x35\xe6\xf9\x7c\xca\x31\x38\x2c\xc7\x82\xb3\x98\x18\x99\x7f\xd6\x2b\x1c\x93\x39\x60\xe9\x0b\x2e\x35\xaa\xb0\xa5\x2c\x36\x34\x44\xa9\x91\x84\xff\xb7\x51\x12\x0a\x29\xb0\x48\x43\x2a\xbf\xe3\x80\xfb\x5a\x61\xff\x79\x5d\x71\x86\xb9\x40\x2a\x02\x43\xff\xd3\xfe\xb7\x6f\xad\x03\x7b\x5c\xb4\xff\x15\x16\xf3\x5f\xa9\x46\xa2\x2c\x60\x7c\x2b\xac\x29\xf9\x1b\x00\x00\xff\xff\x36\xd8\xcc\x57\xf7\x08\x00\x00")

func dataOpenwrtWin10UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10UpdateFirewallUser,
		"data/openwrt/win10/update/firewall.user",
	)
}

func dataOpenwrtWin10UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/update/firewall.user", size: 2295, mode: os.FileMode(438), modTime: time.Unix(1492272154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4a\x34\x41\x0c\x84\xef\xf3\x14\x0b\x7b\xfe\x13\xf8\x2f\x82\xe0\xc5\x57\xf0\xe0\x39\xdb\x9d\x9d\x09\x76\x27\x63\x27\x3b\x3d\xeb\xd3\x8b\x0a\xc2\xc8\x8e\x1e\x53\x5f\xa5\x12\xea\x78\x40\x8e\x84\x59\xbd\x92\xbf\x42\x32\x3d\x0f\xc7\xc3\x14\x31\xfb\x3d\xe2\x28\x31\x5d\x4e\x90\xac\x62\x6a\xf4\x76\xfd\x57\x69\xc5\x67\xd1\x6c\xdd\x9f\xe6\xeb\x63\xb1\xf4\xc2\x0d\xa3\x31\x63\x25\x0f\x6e\x98\x29\x08\x27\xf3\x70\xec\xa2\x77\xc8\x6b\x34\x82\x58\x63\x18\x9c\xdb\xc2\xed\x01\x29\x85\x2c\x14\x62\x0a\x5e\x1c\xaa\xa4\x66\x6e\xe7\xf8\xbc\xf3\xed\x4a\xf6\xff\x57\xdc\xca\x1e\xca\x35\x43\xe5\xa0\x8f\x59\x12\xef\x46\x64\x75\xa8\x7e\x0e\x4d\x2e\x5b\x32\xc2\x49\x74\xfc\xa9\x15\x59\x78\xab\x15\x1b\x45\x6f\xe8\xb7\x53\x43\x2a\x43\xff\x6a\x6f\x4b\x16\x2a\x92\xff\x6c\xa4\xf7\xbe\xf3\x6f\xf7\x64\x1a\x40\xf3\xbc\xbf\xbc\x67\x01\xce\x23\xfb\x45\x82\x41\x39\x70\x78\x0f\x00\x00\xff\xff\x21\x28\xcf\xab\x12\x02\x00\x00")

func dataOpenwrtWin7ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7ExtraDnsmasqConf,
		"data/openwrt/win7/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin7ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/extra/dnsmasq.conf", size: 530, mode: os.FileMode(438), modTime: time.Unix(1480340409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xbf\x6e\xc2\x30\x10\xc7\xf1\x3d\x4f\x71\x52\x66\x9f\xe3\xfc\x81\xd0\xad\x6d\x68\x95\x05\x90\xa1\x62\x36\xc9\x51\xd2\x86\xd8\xb2\x2f\x02\xfa\xf4\x15\x4b\xd5\x2d\xcc\xf7\xbd\x8f\x7e\x31\x48\xe2\x46\x1e\x3b\x4f\x17\xd3\xf7\x38\x06\xf2\x51\x0c\x27\x66\x17\x9e\xa4\xfc\xec\xf8\x34\x1e\xb0\xb1\x67\xd9\x78\xf3\x73\x13\x67\x73\x95\xfb\x6e\x68\xed\x25\x6c\xdd\xed\xa5\xb7\xcd\x37\x79\xc9\x9e\x48\x9e\x4d\x60\xf2\xb2\x35\x6c\xfe\x3c\x79\xe9\x86\xb9\xa4\x2b\x7b\x83\x7c\xe5\x28\x8a\x81\x86\xa3\xf5\x0d\x81\xb7\x23\x93\x87\x6a\xb5\x8d\x3a\xc7\xe6\xd0\x53\x00\xc1\x30\x18\x06\x51\xc3\x46\x2f\xf5\xfa\x63\x57\xaf\xde\x41\x38\xe0\xc6\x81\x10\xad\xb3\x9e\xa1\xc8\x40\x7c\x81\x5e\x56\xb5\x5e\xbe\xee\x40\x08\xb6\xe2\x7e\x08\x50\x64\xd3\xd2\xd8\x3e\x28\x45\x31\xf8\xb1\xa7\xf0\x8f\xac\xe1\x6d\xad\xf7\xcf\xba\xba\xbf\x55\x7a\xbd\x01\xd1\x82\xca\xb0\x4c\x50\xa5\x58\xe4\x53\x69\x9e\xa0\x52\x25\xaa\x24\xc3\xf9\x54\x3b\x2b\xb0\x48\x71\x51\x62\x9a\xa9\xc7\x5a\x95\x94\xa8\xa6\x47\xa4\xc9\x1c\xf3\x19\xaa\x45\x8e\x2a\x8f\x7e\x03\x00\x00\xff\xff\xdf\xca\x9e\x80\xff\x01\x00\x00")

func dataOpenwrtWin7ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7ExtraFirewallUser,
		"data/openwrt/win7/extra/firewall.user",
	)
}

func dataOpenwrtWin7ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/extra/firewall.user", size: 511, mode: os.FileMode(438), modTime: time.Unix(1470170803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x6e\xe2\x40\x0c\x86\xef\x3c\x05\x12\x67\xec\x25\xcb\xb2\xda\x95\x7a\xe9\x2b\xf4\xd0\xb3\x99\x38\xc9\x88\x8c\x1d\xc6\x86\x64\xfa\xf4\x15\xaa\xaa\x16\x04\x54\x9c\xbf\xef\xff\xe7\x1f\x2f\xe6\xc8\x1e\xb0\x16\x4b\x64\x7b\x08\x2a\xcd\x6c\x31\xef\xdc\x07\xfb\x8f\xd8\x46\xef\x0e\x5b\x08\x9a\x30\x64\x7a\x2b\xcb\x44\x13\xbe\x46\xa9\x75\xb4\x97\xa1\x3c\xf7\x1a\x76\x9c\xd1\x33\x33\x26\x32\xe7\x8c\x35\x39\x61\xa7\xe6\x86\x63\x94\xbf\x68\x43\x01\x9f\x7c\x36\x33\xce\x47\xce\x4f\x18\x6a\x5b\xad\xd6\xbf\xa1\x57\x81\xbe\x97\x11\x84\x1d\xcf\x68\xb5\xf9\x77\x9b\x56\xbf\xd6\xd5\x1a\xfa\x50\xae\x61\x4d\x03\x39\x4f\xa1\x23\x69\x79\x05\x9e\xa9\x69\x62\x48\x24\xd4\x72\xbe\x70\x4b\x05\xc6\xee\x51\x5a\x83\xd3\x68\x48\x31\x64\x35\x6d\xfc\xf4\x5f\xa0\x1d\xd5\x62\xe7\x99\x7a\xfb\xe7\xe1\x0c\x1f\xe0\xa8\xd9\x79\xba\x12\xf8\xb2\x5a\xd6\x87\x9b\x3f\xfd\xe5\x18\xe5\x6e\xb9\x0d\x45\xd8\xab\xfb\x98\x0f\x59\x07\xfe\xe6\x5c\x7d\x72\x9f\xc0\xb9\xe7\xc4\x9e\xcb\xad\x3e\xe7\xcc\xb5\x42\x1c\x8e\x9b\x5b\xca\xc7\x45\x7e\x1c\x3e\x92\x9b\xca\x25\x7d\x0f\x00\x00\xff\xff\x6e\x7b\xc3\xae\xb3\x02\x00\x00")

func dataOpenwrtWin7SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7SpyDnsmasqConf,
		"data/openwrt/win7/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin7SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/spy/dnsmasq.conf", size: 691, mode: os.FileMode(438), modTime: time.Unix(1492273356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd4\xc1\x72\xda\x30\x10\x06\xe0\xbb\x9f\x42\x33\x9c\xb5\xd2\xae\x24\xcb\xee\xad\x2d\x69\x87\x4b\xc8\x38\xe9\xe4\xec\x18\xa5\xa1\x05\xec\x91\xc5\x10\xfa\xf4\x1d\x97\x96\x3a\xa7\x55\x0e\x9c\xf8\xb4\x83\xfe\xfd\xd1\x42\xa8\x90\x3a\xf5\xbc\x8d\xe1\xd4\xee\x76\x70\x1c\x43\x2c\x16\xe2\x25\xa5\x61\xfc\xa0\xd4\xf7\x6d\x7a\x39\x3e\x41\xd7\xef\x55\x17\xdb\x5f\x67\xb9\x6f\x5f\xd5\xe3\xf6\xb0\xe9\x4f\xe3\xfd\x70\xfe\xb4\xeb\xbb\x9f\x21\xaa\x14\x43\x50\xfb\x76\x4c\x21\xaa\x4d\x9b\xda\xeb\x3c\x75\xda\x1e\xbc\x1a\x87\x33\xa4\xd7\x54\x14\x0b\x11\x0e\xcf\x7d\xec\x82\x88\xfd\x31\x85\x28\x96\xb7\xf7\xc5\x76\x48\xed\xd3\x2e\x8c\x42\x26\x71\x68\x93\x90\x2b\x71\xd7\xdc\x34\xeb\x6f\x0f\xab\xdb\xaf\x42\x0e\x22\x75\x83\x90\x72\x33\xf4\x31\x09\x67\x84\xfc\x21\x9a\x9b\xe5\xaa\xb9\xf9\xfc\x20\xa4\x4c\xbd\x9c\xbe\x18\x85\x33\xfc\xa4\xe3\x26\x73\x52\xb1\x10\xf1\xb8\x0b\xe3\x6c\xe4\x4a\x7c\x59\x37\x8f\x1f\x9b\xe5\x74\x6c\xd9\xac\xef\x84\xdc\x08\xab\xc1\x7b\x20\x2a\x81\x6c\xfd\x0e\xec\x74\x06\x46\xac\x00\x75\x09\x68\x58\xed\x08\xb0\xb4\x40\x56\x83\x63\x7f\xc7\x15\x23\x90\x76\x39\xda\x57\x80\xd6\x4f\xe3\x73\xb5\x43\x20\xa4\x5c\x3d\x7d\xca\x5c\x5c\x1b\xc0\x6c\x4d\x64\x80\x4c\x0e\xae\x3c\x94\x1a\x50\x7b\x0e\x97\x16\x2c\x38\x0b\xe4\xd8\xb9\xff\xa9\x65\xa9\x03\xe7\xc0\x5a\x40\x5d\xbd\xc3\xb2\xcb\xbe\x58\x44\x03\xfc\x3a\x66\x96\xbf\xda\x1f\x4b\x8e\xc0\x63\xbe\xad\xf9\xb9\x25\x20\xd6\x80\xd3\xed\x1c\xbf\x8b\xb9\xe6\x73\x9b\xe9\x8a\x4f\x6e\xa6\x6b\xb6\xf8\xa8\x2d\xd8\x29\x38\x0f\x25\x5b\xce\x2b\xae\x81\xd8\xf4\xfe\x62\xa2\x0a\xf8\xc6\xcd\x30\x69\x76\xe1\xff\xb4\xf1\x80\x25\x1b\x08\x22\x02\x11\x02\xd5\x19\xfd\x98\xe1\x8c\x3f\x0a\x1a\x0b\xe8\x35\x18\x3d\x1d\xca\xd5\xd3\x23\x63\xf9\xb0\xe7\x9a\x6d\xd4\x1b\xcd\x36\xea\xaa\x0d\x10\x9f\xdf\x14\x33\x7a\x20\xe3\x32\x9e\x3b\xac\x11\xc8\xd0\xa5\x24\x19\x09\xbe\xe1\xec\x73\x73\xe1\x1e\x48\x57\x80\x54\x16\xbf\x03\x00\x00\xff\xff\x67\x94\x07\x41\x08\x08\x00\x00")

func dataOpenwrtWin7SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7SpyFirewallUser,
		"data/openwrt/win7/spy/firewall.user",
	)
}

func dataOpenwrtWin7SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/spy/firewall.user", size: 2056, mode: os.FileMode(438), modTime: time.Unix(1492269426, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\x45\xa5\xce\xf5\x25\x11\x52\x11\x12\x0b\xaf\xc0\xc0\x7c\xb1\xcf\x49\x44\xec\x0b\xbe\x0b\x6e\x79\x7a\x84\x1a\x95\x76\xa8\xdb\xd5\xdf\xe7\xef\xfe\xed\x06\x48\x2d\xb8\x28\x01\xe5\xcb\x58\x8e\xbe\xda\x6e\x06\xd5\x59\x5e\x00\xfa\x51\x87\xa5\x33\x96\x03\xd8\x84\x3f\xc7\x5d\xc0\x03\x7c\x8c\xd1\x71\x96\xf7\xf9\xf8\x36\xb1\xfd\xa4\x04\x9a\x88\x20\xa0\x28\x25\x70\xa8\x08\x03\x8b\x0a\xe4\x31\xee\x61\x99\x1d\x2a\x19\x3d\x68\x55\x09\xa5\x6f\x4a\xaf\x50\xd7\x75\xe7\xfc\xae\x31\x93\xc9\xa7\xd8\x6a\xfd\x1d\xba\xb0\x9a\xe7\xa7\xee\xbe\xd5\xb6\xb8\xbf\x67\xe1\x62\x1c\xe7\x38\x31\xba\x92\x66\x75\x72\xc5\xce\x39\x12\x46\x9b\x58\xd8\xeb\x0d\x5e\x6a\xc8\x43\x5b\x3c\xb5\x66\x7d\xbf\x71\xcc\xf7\xc6\x89\xe9\x9a\x87\x72\xe7\xc6\xb5\x13\x49\xff\x9d\xc2\xf7\x13\x5a\x09\xa7\xfe\x82\xe4\x5c\x1c\xf0\x1b\x00\x00\xff\xff\xf4\xa0\x70\xeb\x62\x02\x00\x00")

func dataOpenwrtWin7UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7UpdateDnsmasqConf,
		"data/openwrt/win7/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin7UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/update/dnsmasq.conf", size: 610, mode: os.FileMode(438), modTime: time.Unix(1492269468, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd4\xcf\x72\x9b\x30\x10\x06\xf0\x3b\x4f\xb1\x33\x3e\x6b\xe5\x95\x90\x80\xde\xda\xda\xed\xf8\x12\x67\x48\x3a\x39\x2b\xa0\x34\xb4\x18\x18\xb1\x8c\x93\x3e\x7d\x87\xfe\xf1\xd8\x27\xc1\x99\x1f\xdf\x68\xbf\x15\x6c\x40\x7a\xae\xe4\x4b\x13\xfc\xd9\xb5\x2d\x4e\xa3\x0f\xc9\x06\x5e\x99\x87\xf1\x83\x94\xdf\x1b\x7e\x9d\x9e\xb1\xea\x4f\xb2\x0a\xee\xd7\xbb\x38\xb9\x37\xf9\xd4\x74\x75\x7f\x1e\x1f\x86\xf7\x4f\x6d\x5f\xfd\xf4\x41\x72\xf0\x5e\x9e\xdc\xc8\x3e\xc8\xda\xb1\xbb\xe4\xc9\x73\xd3\x65\x72\x1a\x6a\xc7\x1e\xf9\x8d\x93\x64\x03\xbe\x7b\xe9\x43\xe5\x21\xf4\x13\xfb\x00\xbb\xbb\x87\xa4\x19\xd8\x3d\xb7\x7e\x04\xc1\xd0\x39\x06\x71\x80\xfb\x72\x5f\x1e\xbf\x3d\x1e\xee\xbe\x82\x18\x80\xab\x01\x84\xa8\x87\x3e\x30\x18\x0d\xe2\x07\x94\xfb\xdd\xa1\xdc\x7f\x7e\x04\x21\xb8\x17\xf3\x83\x11\x8c\x8e\x27\x4d\xf5\xc2\xa4\x64\x03\x61\x6a\xfd\x78\x15\x79\x80\x2f\xc7\xf2\xe9\x63\xb9\x9b\x5f\xdb\x95\xc7\x7b\x10\x35\x90\x46\xda\x66\x98\xa2\xd9\xc6\xa8\x9a\xa9\x46\xca\x0b\x24\x65\x56\x69\xbb\x46\x9b\x6c\x95\xce\x63\xda\x1a\x34\x06\x49\xe7\x48\xa4\xd6\xe0\x74\x05\x8e\x8f\x78\x85\xf3\xa5\xd8\x6a\x54\x8a\xd6\xe0\xe8\x80\xa4\x53\xa4\x6c\x8b\x86\x90\x8a\xe8\xce\x2f\x5a\xa3\x5e\x8e\x73\xdc\x4a\x15\x6d\xef\x3f\x27\x32\x68\x17\x9f\x9b\xac\x41\x95\x46\x97\x7e\xcb\x8b\x55\xdc\x44\x1b\xbf\xe5\x3a\xca\x4d\x86\xc6\x62\x61\x91\x54\x1c\x17\x84\x4a\x2b\xcc\xe7\x22\x57\x60\x1b\xdf\xcf\x15\x8e\xf7\xfd\x07\xa7\x98\x29\xa4\x7c\xe1\xa1\xff\xe9\xe8\xed\xbe\xd1\x0b\x67\xfc\xab\xe3\x37\x56\xcd\x7f\x33\x3b\x7f\xbd\x73\x7d\xbf\x03\x00\x00\xff\xff\x9b\x89\x10\x77\x21\x06\x00\x00")

func dataOpenwrtWin7UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7UpdateFirewallUser,
		"data/openwrt/win7/update/firewall.user",
	)
}

func dataOpenwrtWin7UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/update/firewall.user", size: 1569, mode: os.FileMode(438), modTime: time.Unix(1478460893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x8e\xdb\x30\x0c\x84\xef\x79\x8a\x05\xf6\x6c\x0a\xbb\xa7\xa2\x40\x2f\x7d\x85\x1e\x7a\x66\x24\xda\x26\xd6\xa2\xbc\x24\x63\xd9\x7d\xfa\x22\x9b\xfe\x39\x8d\x82\x1c\xed\xf9\x38\xd4\x0c\xf8\xfc\x14\xc8\x63\x48\x62\x19\xed\x1d\x62\x91\xfe\xf0\xfc\x34\xba\xcf\xf6\x39\x84\x81\x7d\x3c\x1d\x21\x96\x1c\xa2\xe2\x8f\xad\xcb\xb8\x86\xef\x2c\xa9\x54\xfb\x36\x6f\x5f\xa7\x12\xdf\x48\x83\x2b\x51\xc8\x68\x4e\x1a\x12\x3a\x86\xb1\x98\x5b\xa8\x2c\x9f\x5e\x02\xad\xae\x08\xbe\xfa\xe1\x60\xa4\x0b\xe9\x97\x80\xd1\x79\x41\xe7\x22\xdd\xf2\x0a\x36\x19\x64\x8e\x5a\xac\xf4\xfe\xb1\xeb\x2f\x38\xcf\xb4\x76\xda\x43\x36\xd9\x2b\x29\x27\xc8\xe4\x78\xfe\xe6\x48\x4d\x87\x24\x06\xd9\x7a\x97\x68\xbc\x57\x7a\x16\x94\x48\xf0\xc7\xe1\x63\x19\x1c\x59\x86\x2b\xb0\x94\x84\x92\x92\xb2\xbc\x81\xf3\x44\x6d\x52\xbb\x5e\xa1\xfd\xe8\xe1\xc6\xcc\x00\x13\x2f\xb4\xff\xc7\x79\x00\xf3\x23\x58\xf7\x9f\xc5\x54\x06\x96\x1b\x23\xb7\x33\x0a\xad\xde\xfd\x1b\xb0\xd9\xd3\xfb\x89\x74\x83\x59\x4b\x82\x98\x0d\xd4\x5b\xe0\x2f\x37\xa8\x84\x3e\x92\x36\x31\x2f\x4a\x94\x06\xea\x13\x24\x5b\x21\xcf\x2d\xd2\x39\x13\xd4\xcb\x4d\xed\x95\x05\x27\x4e\x8f\x9c\x49\x3d\x47\x53\x9a\xc1\x32\xaa\x5b\x54\x22\x69\xb2\xb5\x36\x0e\xa2\xa2\x5b\x11\x70\x9a\x28\x93\xeb\xd6\x74\x48\xb1\x19\xa6\x5a\x2c\xe2\x77\x9b\x6e\x22\x70\xae\xcb\x4e\xec\x04\x42\x7e\x3d\xf0\xf2\x80\xe9\xeb\x7d\xa6\xd6\xdf\x3d\x1b\xa1\xc6\xf1\x22\xff\x0c\x00\x00\xff\xff\x70\xc2\xc2\x34\x02\x04\x00\x00")

func dataOpenwrtWin81ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81ExtraDnsmasqConf,
		"data/openwrt/win81/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin81ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/extra/dnsmasq.conf", size: 1026, mode: os.FileMode(438), modTime: time.Unix(1492270504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\x31\x6f\xf2\x30\x10\xc6\xf1\x3d\x9f\xe2\xa4\xcc\x3e\xc7\x8e\x1d\xc2\xbb\xbd\x6d\x68\x95\x05\x50\xa0\x62\x36\x89\x29\x69\x43\x1c\xd9\x17\x01\xfd\xf4\x15\x4b\xd5\x0e\x55\xe8\xec\x9f\xff\xc3\x73\x31\x70\x4b\x35\x3f\xb4\xde\x9e\x4d\xd7\xe1\x18\xac\x8f\x62\x38\x12\x0d\xe1\x1f\xe7\xaf\x2d\x1d\xc7\x3d\xd6\xee\xc4\x6b\x6f\x3e\xae\xec\x64\x2e\x7c\xd7\xf6\x8d\x3b\x87\xcd\x70\x7d\xe8\x5c\xfd\x6e\x3d\x27\x6f\x2d\x3f\x99\x40\xd6\xf3\xc6\x90\xf9\xea\xf1\x73\xdb\xe7\x82\xdb\x0b\x79\x83\x74\xa1\x28\x8a\xc1\xf6\x07\xe7\x6b\x0b\xde\x8d\x64\x3d\x14\xcb\x4d\xd4\x0e\x64\xf6\x9d\x0d\xc0\x08\x7a\x43\xc0\x4a\x58\x57\x8b\x6a\xf5\xb2\x2d\x97\xcf\xc0\x06\xa0\x7a\x00\xc6\x9a\xc1\x79\x02\x9d\x02\x7b\x83\x6a\x51\x94\xd5\xe2\x71\x0b\x8c\x91\x63\xb7\x87\x00\x3a\x9d\x2e\x8d\xcd\x9d\xa5\x28\x06\x3f\x76\x36\x7c\x4b\x96\xf0\xb4\xaa\x76\xff\xab\xe2\xf6\xad\xa8\x56\x6b\x60\x0d\x88\x14\xf3\x04\x85\x44\xad\xa6\xa8\x4a\x50\x88\x1c\x45\x92\xe2\xec\x6e\x9b\xa1\x48\x93\x29\x9d\x29\x54\xa8\x15\x4a\x39\x29\x35\x6a\x89\x22\xc9\x51\xce\xef\xb7\xfa\x0f\x56\xfc\x38\xc3\x2f\x9b\x09\x94\x3a\xc5\x4c\x60\xc2\xe5\xe4\x6e\x32\x99\xa1\xca\x50\xcc\x15\x0a\x15\x7d\x06\x00\x00\xff\xff\xa9\x54\x26\x22\xb3\x02\x00\x00")

func dataOpenwrtWin81ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81ExtraFirewallUser,
		"data/openwrt/win81/extra/firewall.user",
	)
}

func dataOpenwrtWin81ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/extra/firewall.user", size: 691, mode: os.FileMode(438), modTime: time.Unix(1494527809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xcd\x6e\xab\x30\x10\x86\xe1\x7d\xae\x22\x52\xd6\x8c\x81\x9c\x93\x26\x95\xba\xe9\x2d\x74\xd1\xf5\xd4\x1e\xc0\x0a\xfe\x89\x67\x08\xd0\xab\xaf\x68\xa5\xaa\x69\x13\x67\xcb\xf3\x0a\xac\x4f\x66\xb3\x56\x24\x5a\x19\xcf\x0e\xf9\x04\x3a\xf8\x66\xb5\x59\x77\x22\x91\x1f\x95\x6a\xad\x74\xc3\x1b\xe8\xe0\x94\x4e\xf8\x3e\x17\x0e\x27\xf5\x6a\xbd\x09\x23\xbf\xc4\xf9\xb9\x0f\xfa\x48\x49\x49\x22\x52\x0e\x59\x28\x29\x83\x82\xaa\x0b\x2c\xac\x46\xeb\xf7\x95\xe2\x38\x83\x4c\xb2\x5a\x31\xa5\x33\xa5\x27\x85\x45\x59\x96\x15\x60\xe1\x98\x4c\x4b\xe0\x49\xd4\x25\xd6\x39\xdc\xe6\xf0\x5f\x0e\xff\xe7\x70\x97\xc3\x87\x1c\xee\x73\x78\xc8\x60\x55\xe6\x30\xb7\x50\x75\x7b\xa1\x6b\x4f\xb5\xe1\xba\xaa\xf7\x15\xf4\xc1\x43\xdf\xfb\xf1\x0f\x6f\xb7\x07\xe8\xf5\x7c\x0d\x83\x8b\x28\x34\xe9\x0e\x7d\x4b\x15\x48\xc2\xa6\xb1\xda\xa1\xc7\x96\xd2\x65\x4b\x03\x9c\x43\x12\x9a\x60\xb9\x05\xe0\xac\x4e\x81\x43\x23\x9f\x17\xe8\xbb\x62\x12\xb1\xbe\xe5\x62\xb4\x3e\x1f\xc6\xd9\x93\xd4\x79\xc6\x5e\xf2\x01\x0d\x29\x44\xfa\xd1\xe0\x11\x8d\xe7\xcb\x93\xf3\xc9\x81\x50\x4f\x8e\x24\xcd\x37\xdf\x27\x28\xdc\x50\x0d\x43\x34\x28\x74\x37\x1b\xf9\x56\xb2\x7c\x2a\xbb\xe4\x12\xe8\xe0\x1c\x7a\x73\xff\x5c\x5f\x9b\xdf\x9d\x73\xf9\x1d\xc1\xc6\xf3\xee\x77\xf0\x11\x00\x00\xff\xff\x11\xe1\x72\x9f\x04\x04\x00\x00")

func dataOpenwrtWin81SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81SpyDnsmasqConf,
		"data/openwrt/win81/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin81SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/spy/dnsmasq.conf", size: 1028, mode: os.FileMode(438), modTime: time.Unix(1492270527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\x31\x6f\xdb\x30\x10\x05\xe0\xdd\xbf\x82\x80\x67\x3d\xf1\x8e\xa4\x28\x75\x6b\xeb\xb4\xf0\x92\x04\x4a\x8a\xcc\x8a\xcd\x34\x6e\x1d\x4b\x90\x68\x24\xe9\xaf\x2f\xa4\x34\x8e\x3a\x1d\x3d\x78\xf2\x67\xe2\xe1\x91\x77\x5e\xaa\x3c\xc4\x4d\xfe\xb0\xeb\xc3\x73\xb3\xdf\xe3\x38\x84\x7e\xb1\x54\x8f\x31\x76\xc3\xa7\x3c\xff\xb9\x8b\x8f\xc7\x7b\x6c\xda\xa7\x7c\xd3\x37\x7f\x5e\xb3\xa7\xe6\x25\xbf\xdb\x1d\xb6\xed\xf3\x70\xd3\xbd\x7e\xd9\xb7\x9b\xdf\xa1\xcf\x63\x1f\x42\xfe\xd4\x0c\x31\xf4\xf9\xb6\x89\xcd\xe9\xbc\xfc\x79\x77\x28\x29\x1f\xba\x57\xc4\x97\xb8\x58\x2c\x55\x38\x3c\xb4\xfd\x26\xa8\xbe\x3d\xc6\xd0\xab\xd5\xe5\xcd\x62\xd7\xc5\xe6\x7e\x1f\x06\x95\x45\x75\x68\xa2\xca\xd6\xea\xba\xbe\xa8\xaf\x7e\xdc\xae\x2f\xbf\xab\xac\x53\x71\xd3\xa9\x2c\xdb\x76\x6d\x1f\x95\x33\x2a\xfb\xa5\xea\x8b\xd5\xba\xbe\xf8\x7a\xab\xb2\x2c\xb6\xd9\xf8\xc5\xa0\x9c\x91\x4f\x3a\x6e\x13\x4f\x5a\x2c\x55\x7f\xdc\x87\x61\x76\xe4\x5a\x7d\xbb\xaa\xef\x3e\xd7\xab\xf1\x67\xab\xfa\xea\x5a\x65\x5b\xc5\x06\x55\x09\x5b\x81\x6c\x0a\xad\x26\xca\x24\x59\xab\xe1\x3d\x98\x0b\xb0\xad\xce\xc0\x4e\x4b\xd8\x11\xc8\x12\x0c\xc3\x89\x29\x1c\x83\x0a\x0b\xb6\x1a\x4e\x4c\x71\xc2\x04\xd6\x2e\x45\xfb\x12\x64\xfd\x78\x7c\xaa\x76\x04\x26\x4e\xd5\xe3\xa7\x48\xc5\x95\x01\x25\x6b\x66\x03\x36\x29\xb8\xf4\x28\x34\x48\x7b\x09\x17\x16\x16\xec\x21\xdf\xe0\x24\x9d\x05\x3b\x31\xc1\x07\x15\x5f\x67\xe1\xe0\x1c\x88\xc6\x1a\xce\xb0\xe2\x65\xcc\xac\x1c\x77\xb2\xec\x18\xf6\x0c\x5b\x9d\x61\xa9\x92\xeb\x2d\x40\x34\xce\xb3\x05\x39\xf9\xda\xe6\xba\x3c\x47\x97\xe2\x44\xcd\x75\x42\x6e\x0b\x36\x66\x9a\x41\x2a\xe5\x24\xef\xba\x00\x69\x51\x93\xb6\xb0\xe3\x0d\x7a\x14\xe2\x8c\x9c\x70\x05\x79\xd1\xfd\xc3\x6c\x3c\xa8\x10\x1b\x79\xd7\x5c\x42\x7e\xfc\x33\xcc\x5a\x7c\xa7\x64\x2c\xc8\x6b\x18\x7d\xb6\x96\x93\xcc\xb5\x38\x89\x73\x9d\x50\xe0\xd8\x1c\x15\x53\xdd\x24\xff\x09\xbd\x71\x0f\x36\x2e\x61\x39\x92\xf3\xd3\xf4\x1a\x93\x14\x7c\xd4\x05\xa8\xb2\xf0\x72\x83\x33\x2c\x17\x38\xc3\x72\x8c\x8a\xc0\x86\xdf\x1a\x29\xe5\x20\x33\x9e\xb0\x52\xff\xe7\x89\x61\x3c\x58\x97\x20\x96\x0b\x9f\x78\x05\xa7\x41\xf2\x54\x7e\x60\x2f\x2e\xaa\x13\x66\x90\x16\x97\xc9\x49\x5b\x38\x5e\xfc\x0d\x00\x00\xff\xff\x8e\xcd\xee\x78\x25\x0a\x00\x00")

func dataOpenwrtWin81SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81SpyFirewallUser,
		"data/openwrt/win81/spy/firewall.user",
	)
}

func dataOpenwrtWin81SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/spy/firewall.user", size: 2597, mode: os.FileMode(438), modTime: time.Unix(1494527809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x4b\x6e\xc2\x30\x10\x80\xe1\x3d\xa7\x40\x62\x8d\xc7\x4e\x83\x28\x95\xba\xe9\x15\xba\xe8\xda\xf8\x11\xa2\xfa\x01\x9e\x01\x43\x4f\x5f\xa1\x46\x7d\x48\x05\xcf\x36\xf3\xe9\x9f\x51\xbc\x98\x83\x23\x03\x36\x61\xd4\x78\x10\x26\x27\x3f\x5b\xcc\x77\x44\x7b\x7c\x02\x18\x46\xda\x1d\xb7\xc2\xe4\x08\xa6\xe8\x8f\xcb\x32\xea\x33\xbc\x8d\xc9\xe6\x8a\xaf\xfb\xcb\x4b\xc8\xe6\xdd\x15\xa0\xe2\x1c\x44\x8d\xe4\x0a\x58\x4d\x1a\x76\x19\x09\xa1\x8e\xe9\x51\xc1\x71\x6f\x35\x39\x41\x67\x9a\xcd\xd0\x95\x93\x2b\xcf\x20\xa5\xec\xb5\x5d\x2a\x11\x44\xfd\xaa\x4d\xea\xba\xe9\xb7\x32\xd2\x30\x94\xf4\x1d\x4b\x6d\xda\x4a\x49\xb9\x66\x28\xa5\x18\x77\xa9\xb5\x59\x31\x94\x55\x9e\xa3\x7a\xc6\xf5\xdd\xc3\xa6\x6f\x29\x7d\x14\x36\xd7\x14\xb2\xb6\x0d\x76\xea\x59\x72\x3b\x5c\xa5\x16\x36\x88\x8a\x22\x8e\xa6\x64\xcc\x9e\xfe\x43\x2e\x36\x90\x62\xa5\x14\xab\xd5\xb1\x5a\x1d\xab\xb5\x62\xb5\x56\x8c\x96\xa1\x60\xef\xbe\x0f\xe7\x97\x7b\xd7\x89\xe9\xfb\x8d\x35\x57\x51\x0f\x77\xa7\x37\x4f\xf4\x03\xf7\xe9\xbf\x03\x7f\x4d\x72\xf4\x63\x30\x60\xe3\x56\xe6\xb2\xe6\x68\x9a\xe4\x32\xc0\x67\x00\x00\x00\xff\xff\xd0\x20\xb7\x2a\xd7\x04\x00\x00")

func dataOpenwrtWin81UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81UpdateDnsmasqConf,
		"data/openwrt/win81/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin81UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/update/dnsmasq.conf", size: 1239, mode: os.FileMode(438), modTime: time.Unix(1492270548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\xcf\x6f\x9b\x30\x14\x07\xf0\x3b\x7f\xc5\x93\x72\xf6\x33\xcf\xc6\x06\x76\xdb\x96\x6c\xca\xa5\xa9\x68\xa7\x9e\x29\xb8\x2b\x1b\x09\xc8\x18\xa5\xdd\x5f\x3f\xd1\x68\x29\x3d\x4c\xb6\xcf\xf9\xe4\xe9\xcb\xfb\x01\x1b\xe0\xc6\x35\xfc\xa9\xb3\xe6\x5c\xf7\x3d\xce\x93\xb1\xc9\x06\x9e\x9d\x1b\xa7\x4f\x9c\xff\xec\xdc\xf3\xfc\x88\xcd\x70\xe4\x8d\xad\xff\xbc\xb2\x63\xfd\xc2\x1f\xba\x53\x3b\x9c\xa7\xbb\xf1\xf5\x4b\x3f\x34\xbf\x8d\xe5\xce\x1a\xc3\x8f\xf5\xe4\x8c\xe5\x6d\xed\xea\x6b\x3d\x7e\xee\x4e\x05\xf1\x79\x6c\x6b\x67\xd0\xbd\xb8\x24\xd9\x80\x39\x3d\x0d\xb6\x31\x60\x87\xd9\x19\x0b\xdb\x9b\xbb\xa4\x1b\x5d\xfd\xd8\x9b\x09\x98\x83\x53\xed\x80\xed\xe1\xb6\xda\x55\x87\x1f\xf7\xfb\x9b\xef\xc0\x46\x70\xcd\x08\x8c\xb5\xe3\x60\x1d\x28\x09\xec\x17\x54\xbb\xed\xbe\xda\x7d\xbd\x07\xc6\xdc\xc0\x96\x1f\x26\x50\xd2\x5f\x69\x6e\x03\x2b\x25\x1b\xb0\x73\x6f\xa6\x55\xc9\x3d\x7c\x3b\x54\x0f\x9f\xab\xed\xf2\xb7\x6d\x75\xb8\x05\xd6\x02\x49\xa4\x34\xc7\x0c\x55\xea\xa3\x62\xa1\x12\xa9\x28\x91\x84\x8a\xd2\x3a\x46\xab\x3c\x4a\x17\x3e\xad\x15\x2a\x85\x24\x0b\x4c\xb9\xc8\x02\xb5\x96\x11\x5a\x64\x02\x85\xf2\x62\x92\x84\x42\x49\xa4\x0c\xe9\xc3\xb0\xff\xa3\x33\xa4\x3c\x45\x45\x41\x49\xae\x5c\xa2\x28\x23\xb0\xf4\xce\xfd\x8a\xc3\x1a\xf8\x8f\x13\x29\x54\xde\xc1\xaf\xb5\x0e\x8e\xf2\xa6\x45\xb0\xd6\xcb\x88\xbc\x7b\xf2\x91\x07\xf7\xf0\x8d\x2b\x8a\xe3\xfe\xe9\xab\xfc\xb2\x59\x29\x16\xfe\x28\xef\x38\xe0\xd6\x56\x5a\x08\x7f\xcb\x17\xad\x31\xcf\x97\x0b\x8a\xc1\x61\xa9\x2f\x38\x8b\x89\x91\xf9\x7b\xbd\xc2\x31\x99\x03\x86\x7e\xc1\xa5\xc6\x80\x73\x7f\xb7\xa1\x21\x4a\x8d\x24\xc2\x76\xe3\x82\xfd\xef\x4a\x2a\x09\x85\x14\x58\xa4\x21\xf7\xb5\xc2\xde\xf3\x12\xcb\x77\x43\x23\x51\x16\xf0\x80\x2b\xac\x29\xf9\x1b\x00\x00\xff\xff\x7c\x99\x08\x9d\xb9\x07\x00\x00")

func dataOpenwrtWin81UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81UpdateFirewallUser,
		"data/openwrt/win81/update/firewall.user",
	)
}

func dataOpenwrtWin81UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/update/firewall.user", size: 1977, mode: os.FileMode(438), modTime: time.Unix(1492270651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xdb\x8e\xb3\x38\x10\x84\xef\x79\x94\x48\x94\xf0\x81\x93\x78\x1a\x8f\x69\x88\x15\x6c\x23\xda\x9b\x64\xf7\xe9\x57\x1c\x32\x61\xf2\xcf\x7f\x81\xc4\xe7\x72\x57\x75\xb7\x2f\x90\xbe\x0f\x08\x94\xba\xcc\x04\x7e\xd0\xc2\xf0\xce\x2e\x91\xe3\x90\x60\xa3\xef\x32\x33\xcf\x0c\xbe\xfd\x3b\xd3\xce\xb6\x0f\xb0\x31\x24\x0a\x09\xf3\x12\x7b\x58\xcf\xf0\x1c\x0e\xf5\x1a\x9d\xa5\x4f\x8f\xdf\x4e\x11\xd8\x24\xbb\x47\xdb\xc9\xad\x76\x8f\xc0\x78\xb8\xd0\xc7\x07\x1f\x75\xdb\xb9\x8d\x61\x70\x23\x66\xc3\x3c\xc7\x25\xed\x25\xbd\xef\xe1\x29\x19\xa6\xe5\xee\x2c\xfd\xd1\xf6\x40\xd4\x7f\x19\x7b\x7b\x9f\xe7\xd7\x78\xf5\x1f\x22\x93\x59\xec\xf5\xaf\xb5\x3f\x9a\x19\x31\xb9\xfb\xb1\x04\xe7\xc7\x9c\x73\xcf\x21\x5f\x27\x31\x37\xe3\x8d\xfb\x8f\xfa\xbd\xb5\xc9\x59\x0a\xec\xc2\x08\x3f\x7f\x5a\x4f\x71\x74\xe1\x64\xe4\x71\x8d\xc9\x1b\x37\xed\x78\x81\x27\x66\x0a\x23\x2d\xa7\x4b\x17\x78\x1e\x52\xb0\xec\x76\x8e\xc3\xe0\x2c\x1d\x4b\xfb\x08\x88\xe1\x25\xf0\xf0\x84\xe7\x2e\x9b\x17\x67\x69\x72\x9c\xce\xaf\xf8\x1a\xfc\xf5\x6e\x9c\xe2\x42\xb9\xf3\x66\x24\x06\xe7\x1f\xa6\x9b\x4a\xfd\x48\x43\x8f\x9e\x9f\xbf\xcc\x95\x9c\xa7\x9f\xeb\x4a\x37\x89\x79\x4a\xef\x88\x7f\xdc\xb9\x81\xbb\xa3\x07\x4c\xea\x7d\x7a\xcd\x78\x8f\xf0\x4c\x36\x1c\x5b\xbc\xe0\x41\x26\x5d\x69\xf9\x8c\xba\xe0\xf9\x15\x9f\xef\xed\x08\x85\xa6\x80\x90\x28\xf5\x06\xa2\xa8\xa1\x20\x64\xf3\x4d\x52\x40\x16\x45\x97\xe9\x02\x75\x0d\x29\x2b\x14\xf9\xfb\x5f\x96\xe5\x26\x09\xd1\x40\x14\x0a\x75\x97\x55\x1a\x1a\xa5\x86\x94\x5d\x56\x95\x28\x25\x44\xb1\x5e\x38\x53\xab\xde\xd4\xa0\xc8\xdf\xff\x9b\xe1\x8a\xe5\x8e\xea\x45\xb2\x94\xd0\xaa\xcb\x44\xa1\xa1\x35\x9a\x2d\x6f\x47\x29\x4a\x08\x5d\xed\x7d\x0a\x25\x20\x4b\x85\x4a\xa0\xc8\x4f\xb0\x19\x0b\xa5\x21\xea\x02\xa2\x29\x51\xaf\x97\xab\x06\x95\x82\x68\x50\xb7\x5d\x26\x5a\x01\xa9\x24\x84\x6a\xd7\xda\x13\xc9\xb2\xcb\x64\xa1\x51\xb7\x10\x6d\xbd\x7e\xf9\x09\xa5\xd0\xab\x5c\x43\x57\x58\x13\xb6\xa8\x17\xb7\x1a\x67\xb9\xd5\x87\xd9\x37\x2a\xf5\x8d\x52\x2a\xb4\xc7\xe5\xaa\x81\xa8\xd6\x05\xeb\x2e\xfb\x3f\x00\x00\xff\xff\xcd\x2b\x01\x6b\x6a\x04\x00\x00")

func dataProxifierWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10ExtraTxt,
		"data/proxifier/win10/extra.txt",
	)
}

func dataProxifierWin10ExtraTxt() (*asset, error) {
	bytes, err := dataProxifierWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/extra.txt", size: 1130, mode: os.FileMode(438), modTime: time.Unix(1493751084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x96\xf9\x6e\xfa\x3e\x0c\xc0\xff\xdf\xa3\x4c\xc2\x8a\x9d\xab\xd5\x9e\x26\xb4\x19\x54\xdf\x5e\xbf\xa6\xc0\x78\xfb\x9f\x9c\x5e\x29\x30\x36\x89\xa9\x1f\xdb\x89\x73\xf8\xc8\x27\xb8\x43\x13\x7c\x79\xf2\xd0\xfa\xf1\xeb\xe3\x13\x5c\x19\x3e\xa1\x09\x2d\x14\x5d\x93\xb0\x2b\xc3\x64\xe1\x0a\xb9\xa9\x5d\x31\x56\xd7\x6a\xbc\xc3\xad\x6a\xcb\xee\x16\xb6\x41\xad\xff\xb9\x84\x6d\xce\xf6\x67\xd3\x35\x71\x42\x5f\xb4\xab\x7a\x2c\x9b\x71\x9e\xf0\x9f\x3b\x14\x65\x7b\x68\x03\xb8\x72\xf4\xc5\x19\x4a\xff\xf5\x71\xac\xda\x13\x2f\xa0\xa9\x8a\xa1\x0b\xdd\xf7\x6c\x7c\xac\xa5\x14\x78\x70\x80\xe5\x70\xdd\x89\x8a\x67\xd1\x29\x15\xb5\x28\x85\x3a\xf8\x47\x91\xd9\xcf\x35\x89\x5e\x58\xed\xe7\xa2\xe3\xa1\xe8\x06\x21\x10\x5c\x5f\x41\xcf\x1f\xa9\x5a\xf6\x6f\xd5\xcb\x68\xf9\x52\x7d\x7f\xde\xe1\xfd\x79\x87\x93\xc8\xff\x61\x15\x20\xf8\xe1\x5a\xb5\xa7\x43\xb8\xcf\xb7\x51\x6c\x57\x59\xb8\xe2\xec\xa1\x74\xa3\x6b\xdc\x30\xee\x2f\xb4\x38\xe3\x9b\x3d\xac\x5a\x7a\xad\x7d\x5a\xc9\x2c\xf2\xcf\xa2\xd3\xa3\x88\x92\x81\x8b\x64\x37\xae\x6b\x7a\x37\xfa\x9f\xe2\xec\xda\x93\x87\xa2\xee\x2e\xa5\xeb\xfb\x29\xb2\xf6\x4a\x84\x71\x70\xdf\xdf\x55\xd1\xb8\xd6\x9d\xfc\xb0\xd8\x0c\x3d\x84\xf1\x29\xb6\x8a\x1e\x05\x1e\xfa\xa1\x2b\xa1\xec\xa0\x0c\x3d\x34\xfd\x93\x4d\x40\xb8\xf5\x05\x5c\x45\x51\xce\xc1\x5c\x1e\xe5\xad\x0d\x24\x90\xff\xe0\xd6\x86\xfd\x41\x96\x47\xfd\x52\x18\x8a\x33\x0a\x44\x21\x72\xb4\x6f\x0d\x50\xff\x32\xed\x6a\x90\xa3\xfa\xc3\x40\xe6\xef\x0c\x50\x18\x32\x7f\x18\xc8\xb7\x2e\x50\x64\xf4\x76\x91\x6c\x40\xef\x17\x99\xa1\xfc\xdd\x40\xb2\x83\x77\xe7\xc0\x06\x4a\xbc\xd9\x85\x14\x39\x91\x78\x7d\x0e\xb7\x36\x60\xf9\x4a\x63\xe2\x50\x12\x39\xa2\x78\x79\x8d\x9b\x81\xc2\x57\xfb\xab\xdc\xa9\xed\xc2\x58\x15\x01\xc2\xa5\xef\xbb\x61\x7c\x8c\x28\x7f\x81\x6b\x37\x8c\xfe\x27\x26\xe2\xa3\xf6\xbb\xf6\x3f\x5b\xc2\x9e\x92\x4f\xdf\xfd\x11\xaa\x27\xdf\x5d\xfd\xf0\x87\xd1\x27\x9c\xea\x63\xd9\x06\x7a\x54\x9c\x71\xf3\x75\xa6\xed\xbb\x3a\x84\x96\xde\x54\x86\x44\xff\xb2\x36\xfc\xbb\xfe\x9d\x64\xf5\x11\xe1\x76\xbb\x41\x13\xc0\xfd\x73\x65\xbb\x36\x95\xba\x2b\xdc\x58\x75\x2d\xd4\xd5\x75\xee\x5e\x75\xa0\x9b\x3f\xc2\xe0\xcb\xa6\x6b\x4b\x88\xb9\xfd\x30\x5d\x93\x36\xa3\xa6\x3b\x56\xb5\x87\xbe\xea\x3d\xb8\xa1\x7a\x3a\xf0\xd8\xa7\xd6\xde\xd8\x84\x76\xf4\x61\x7c\xae\xa2\xb1\xd7\x0d\x97\xda\x07\xe8\xb8\xc0\x78\xd7\xf7\x61\x5a\x56\xd4\x77\xad\x0f\x7e\x1c\xab\xf6\x14\x0e\x9f\xd0\xf8\x71\x58\x56\x5d\x74\x0d\xb4\xc1\x8d\xc5\xe4\xa1\x1f\x3c\x7c\x77\xdd\xd8\x0f\x55\x3b\xf6\x83\x2f\xab\x62\x5e\x49\x3f\xf8\x6b\xe5\x6f\x69\x63\x1e\x5c\x99\xf8\x98\x78\xaf\x0e\x1b\xf3\x5c\x03\xbb\x76\x71\xf5\x85\x7f\x2a\x78\xa1\x38\xfb\xc6\xa5\xe2\xf4\xb8\x83\x2f\x2e\xbc\xb8\xda\x85\xf3\xe8\xea\x7f\x55\x7b\x5a\x1c\xad\x13\x86\xae\xa8\x5c\xfd\x34\xef\xb2\xf3\xe0\xda\xf2\xd8\xbd\x8e\xec\xd5\xe8\x56\xb5\x6f\x0d\x5e\x2b\xdb\xa7\x16\x33\x8b\xfc\xb3\x28\x6d\x31\xa1\xbf\xb7\x7e\x7c\x0a\xf7\x49\xec\xea\xa7\xf4\x9c\x14\xfe\x32\x74\xbd\xff\xed\xa0\xc2\x2d\xb9\x95\x30\x76\x83\x2f\xdc\xe8\xea\xee\x34\xf8\xeb\x12\xb1\x51\xfc\xdf\xc5\xd5\xfc\x74\x7a\xf4\x71\x19\xae\xfe\x0e\x37\x37\x86\xae\x7d\x0e\xc8\xd1\xd7\x9e\x23\xe8\x0e\xae\xef\xfd\x0f\xf0\xd3\x68\xc9\x88\x4d\xf7\x66\xd8\x4e\x95\x06\x5f\x6a\x74\x19\x9e\xe2\x63\x0c\xdf\x7e\xe9\xa0\xe1\xec\x7a\xf6\xfb\x3a\x63\xaf\x7e\x08\xbc\xcb\xf3\xfd\x38\x54\x65\xcc\xfb\xb3\x1f\xd6\x38\xbd\x56\xc3\x78\x71\xb5\x77\xc3\x78\x5e\x3c\x4f\x45\xef\xf3\xe5\xed\x3e\x6a\x7f\x4f\x9f\xc9\xee\x7d\x8a\xcd\xe7\xba\x5d\xd1\xeb\x83\xbe\x55\x2d\x0a\xa8\xfa\xab\x79\xd4\xa0\x04\x6b\x80\x30\x03\x44\xbb\x61\x0e\x98\x63\x8a\x84\x22\x22\x0a\x0b\x1a\xb2\xec\xeb\x83\x24\xe4\x16\x0c\x02\x4a\xbb\x10\xda\x0c\xd0\xca\x05\xb9\x27\xe5\xb3\x32\x07\x14\x80\xb8\x41\x0e\x4a\xa5\x64\x36\x42\xc3\xbf\x15\x09\x81\xc4\x34\x0d\x0a\x02\x05\xa4\xe5\x4a\x84\xa0\x56\x40\xad\x01\x95\x98\x59\x02\x66\x04\x48\xe6\xeb\x43\x09\x30\x39\x28\x01\xa8\x6d\x24\x6b\x00\x01\xad\x59\x81\x78\x9a\xf5\x1b\x0d\x4d\x64\x81\x28\x07\x71\xd8\xbe\x49\xeb\xa8\xca\x78\xfa\x1c\x54\x1e\x09\x51\x42\xb6\xea\x30\x9e\x14\xd8\x6c\x23\x05\xa8\x37\x53\x22\x50\x76\x26\x05\xa8\x72\x20\x12\x2b\x93\x42\x40\x85\x33\x6b\xc0\x78\x54\x11\x2c\xa0\x62\x03\xb1\xb1\x46\xa0\x79\x66\xc2\xa8\xc6\x8c\xbe\x3e\x74\x9c\x03\x24\x81\xc6\xaf\x0f\xcd\x7b\x8a\x03\x41\xca\x1d\xf2\xaa\x56\xe4\x93\xd6\x13\xf3\x55\x2a\x3b\xb9\x5a\x98\x5d\x21\x6d\xcc\x3f\xb3\x61\x2e\xa7\x7b\x9b\x99\x48\x02\xcd\xce\x32\x0b\x46\x70\xf4\x7c\x7d\x18\x05\x0a\x0c\xa0\x10\xf3\x37\x49\x10\x87\xe5\x2b\x1e\x61\x04\xad\x16\xb1\x56\xb3\x58\x83\xcc\xe3\xa6\x49\x8a\x88\x9a\x80\x0c\x50\xb6\x00\x0a\xc1\x83\xd6\xef\x65\x58\xdc\x20\xc6\x18\x9b\x47\x71\x4c\xc7\xd5\x68\xd0\x1a\xf8\x5e\x65\xb6\x10\x3b\x11\x0b\x28\x15\x0f\x70\x03\x95\x00\x8a\x6c\x47\xf9\x42\x1c\x1d\xb4\xce\x11\x23\x00\x77\x44\x3b\x92\x2b\x49\x01\x7a\x1b\x67\x0d\xe4\x2b\xd1\x74\x50\xeb\xf7\xba\x39\x0d\xa4\x09\x8c\x4c\xc9\x62\x4a\x39\xed\x68\x67\x89\xd1\x03\xa7\x5c\x3e\x45\x0f\xa7\xc8\x8e\xb3\x3d\x67\xf9\x9e\x77\xe3\x2d\xa0\xc4\xaf\x0f\x6b\xc1\x58\x3e\xd6\x98\x63\x28\x14\xc4\xd8\xb2\xc0\xd5\x21\x22\xef\xda\x82\x31\x09\x72\x99\xd9\x50\x09\xde\xe5\xca\x44\x19\xe8\x3d\x92\xa0\x8d\xa5\x05\x34\xf9\xcc\x7c\xac\x80\xb9\x5e\x91\x38\xcd\x70\x31\xe7\xe4\x27\xc4\x95\x64\x16\x43\x63\x26\xcd\x99\x34\x0f\x25\x14\xa0\xc0\xda\x84\x04\x64\x09\x12\x12\x90\x92\x8b\x40\x81\xd4\x40\x9c\xae\xfc\xa4\x27\x2e\x5d\x7c\x06\x76\xc7\xb1\x7e\xed\x38\xb1\x37\x1c\xf6\x0b\x20\xd9\xe9\x9a\x51\x22\x0f\xe3\x3a\x22\x0e\x09\xec\x94\x9c\xdc\xb1\x88\x2b\x40\x2b\x40\x8a\xf9\x84\x12\x8e\x07\x3c\x33\xdf\xbd\x4e\x18\x85\x89\x93\x6f\x34\xcf\xbe\x08\xb8\x1a\xec\x59\x65\x7b\xce\x4d\xca\xd9\x83\x7d\xf6\x60\x9f\x81\xa5\x07\xfb\xdd\x00\xc4\x74\x3d\x7c\x24\xbb\xf5\xa0\x06\x9d\xfa\x23\xb1\xf7\x47\x62\xef\x8f\xc4\xde\x1f\x89\xfd\x7a\x6d\x16\xbb\xd5\xc6\xf9\x74\xd3\x0b\x67\xbc\x9f\x64\x42\x92\x3a\x96\x3f\x8e\x63\xee\x59\x19\xce\xfe\xed\x5c\xa3\x66\xb5\xb6\x9c\x6a\x9a\x78\x33\xeb\xf7\xb4\x95\x19\x4d\xa2\x32\x3b\x15\x77\xc6\x55\xc7\xb0\x53\xd2\x9c\x31\x33\x4a\x91\xd8\x4a\xb1\xb3\xe5\xd5\xac\x4a\x86\xbd\xd2\xa4\xca\x74\x09\x06\xf8\xff\x0a\x96\x43\x4e\xac\x98\xe3\x94\x1b\x13\x71\xc8\x60\xa6\x1e\x58\x3f\x70\xbe\x31\x77\x42\x4c\xc6\x13\x42\xaa\x26\x35\x5d\xc0\x8c\xdc\x25\xa3\x6f\x93\xf1\xbb\x83\xd4\xd4\x24\x67\x44\xc5\xcb\x4e\x90\xf3\x6e\x43\x3b\x95\xc4\x88\x53\x3f\xe2\xa2\x1b\x51\xc6\x56\x61\x30\xc1\x0c\x88\xdb\x24\xe6\x08\x24\x29\x96\x26\x71\x48\x69\x3a\xa0\x28\x30\xf1\xd9\x91\x89\x85\xf9\xdd\x93\x4d\xcf\x8e\x55\x80\x3c\x61\xbe\x08\x72\xee\x68\x9a\x43\x31\xe7\x8b\x8a\xef\x86\x38\xff\x46\x71\x7e\xae\x97\xca\x00\x97\x00\x5a\x09\xc5\xd4\xef\x17\xe4\x3a\x90\x18\x63\xae\x20\xbe\x80\x84\x05\xc3\xed\xd9\x4c\xe5\x85\xb8\xcd\xf0\x6b\xca\xf2\x56\x52\x8a\xae\xfe\x0f\x00\x00\xff\xff\xb9\xc2\x9f\x22\x3a\x15\x00\x00")

func dataProxifierWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10SpyTxt,
		"data/proxifier/win10/spy.txt",
	)
}

func dataProxifierWin10SpyTxt() (*asset, error) {
	bytes, err := dataProxifierWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/spy.txt", size: 5434, mode: os.FileMode(438), modTime: time.Unix(1493751076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5b\xaa\xa3\x40\x10\x86\xdf\x05\x37\x72\x60\x7e\xba\xaa\xef\xb8\x1a\x51\xe7\x20\xe3\x8d\xe8\x4c\xc8\xee\x07\xa3\x46\xbb\x92\x87\xf3\xe6\xf7\xd5\xd5\xa2\xbf\x50\x37\x5d\xfb\xaf\xb9\x3d\x50\xcf\x13\xfa\x09\x7d\x5b\xdd\xc6\x79\xfc\xbd\xa0\x1a\x7b\x0c\x73\xb9\x54\x18\x9a\xa5\xc8\xb3\x4b\xae\xcc\x2b\xf2\xac\x6e\xe7\xa9\x2b\x1f\x55\xb9\x94\xdd\xf8\xfd\x29\xa3\xe9\xeb\x0e\xf7\xf9\xcd\x7f\x9d\xe6\xde\x0e\xf5\x78\x9f\xff\x4e\x75\xb9\x34\xaf\xb1\xa9\x3d\x8a\x36\xbb\xcb\xf1\xf6\xbd\xc9\x4f\xed\xf7\x9c\x9f\x05\x50\xfe\x29\xeb\x61\xde\x87\x93\x06\x29\x0f\x03\xab\x12\xe2\x22\xcf\x78\x25\x0d\x0a\x11\xc4\x4e\x08\xeb\xa5\x08\x45\x9e\x39\x0b\x6b\x41\x3a\x40\xfd\x3a\xbf\xd9\xda\x33\xe6\xf4\x19\x73\x7a\x8f\x91\x26\xb0\xd5\xd0\xfa\x58\xc4\x80\xbc\x82\x25\x50\xf0\x52\x04\x21\xa2\x28\x61\xe3\xa4\xf0\x52\x24\x3d\x34\x38\xa6\xac\x93\x96\xeb\xef\x5c\xe0\xd8\x79\x13\x44\x16\x4e\x49\xc1\x57\xe1\xac\x98\xb8\x99\x28\x8d\xa5\x37\xa3\x57\x63\xfd\x76\x4a\x0d\x56\xe6\x14\x6c\x14\x42\x4c\x99\x59\x1d\xc2\xc1\xfb\xf5\xfe\x82\x63\xca\x46\xe4\x1b\x12\x2c\xea\xcd\xa5\x3e\x3a\x58\x93\x62\x48\x90\xf8\xb9\x7f\x24\xb0\x66\x04\xb5\xc7\x4f\xde\x0e\x77\x61\x7e\xb1\x81\x67\x50\xd0\x52\x38\x29\x82\x10\xcf\xe7\xc0\xeb\x3b\x76\x20\x32\xdb\xcc\x0b\xbb\xf5\x0f\xff\x07\x00\x00\xff\xff\x93\x10\x15\x6d\x19\x04\x00\x00")

func dataProxifierWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10UpdateTxt,
		"data/proxifier/win10/update.txt",
	)
}

func dataProxifierWin10UpdateTxt() (*asset, error) {
	bytes, err := dataProxifierWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/update.txt", size: 1049, mode: os.FileMode(438), modTime: time.Unix(1492272375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\x4d\x6a\xc3\x40\x0c\x86\xe1\xbd\xc1\x17\xe9\xe2\x63\x34\xb6\x13\x07\x9f\x66\x3a\xa3\x18\xc1\xfc\x04\x4b\xb5\xaf\x5f\x5a\x4c\x28\xa4\x5d\x74\xf9\x3e\x92\x40\x21\x9a\xec\xc1\xa4\x55\x68\x56\x14\x89\x5b\xd3\x76\x37\xc4\x56\x96\xbe\x8b\xcd\xff\xee\x5b\x7e\xb1\x54\x12\x0a\x5b\x50\xde\x76\x89\xfc\x7a\xb4\xe2\x5d\xea\xfa\x8c\x2c\x3b\x9f\x91\xdb\x2a\xf5\x27\xbc\xa1\xe8\xdd\x6a\x54\x39\xc1\xa4\x30\x0e\xa9\xa9\x1d\x7a\xd2\x1e\xb2\xa4\xbf\x5f\x3f\x34\xb6\x6a\x08\x8f\xc7\x3f\x66\xe0\xb4\xb2\x7e\x88\x31\x2a\xdb\xd2\x77\x34\x60\x76\x20\x8f\x69\x5c\xfa\x6e\x74\x20\x9a\x41\x6e\xc0\x75\xe9\xbb\xcb\x84\xc9\xe3\x36\xc3\x0f\xf4\x4c\x72\x33\xe8\x7b\xdb\xbb\x2b\xc6\x0b\xe8\x36\x82\xbe\xfa\x33\x00\x00\xff\xff\x69\xb7\xf1\x04\x6c\x01\x00\x00")

func dataProxifierWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7ExtraTxt,
		"data/proxifier/win7/extra.txt",
	)
}

func dataProxifierWin7ExtraTxt() (*asset, error) {
	bytes, err := dataProxifierWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/extra.txt", size: 364, mode: os.FileMode(438), modTime: time.Unix(1473781259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x5d\x8e\xe2\x3a\x10\x85\xdf\x91\xd8\x08\xd2\x3d\x72\x95\xff\x62\xb1\x1a\xdf\xc4\x30\xd1\x24\x36\x4a\xdc\x4d\xb3\xfb\x91\x09\xcd\x38\x81\x91\xfa\x21\x0f\xdf\x57\x27\x55\x2e\xbb\xed\x66\x22\x25\x31\xa4\x88\x61\x88\x57\xc4\x90\x8f\xfb\x5d\xd1\x6c\xdc\x1b\xcd\x42\xb1\xc2\xd0\xde\x56\x3e\x8d\x17\x9f\xc3\x57\xfb\xcb\xc7\x73\x20\xe4\xc9\x9f\x4e\x7d\x3b\xfa\xe8\xcf\x61\xfa\x0e\xdd\x18\x73\xc8\xb9\x8f\xe7\x19\x9d\xcf\x1e\x63\xdf\x4e\x69\x4e\xa7\x8c\x36\x8d\xf0\xbf\x7d\x17\xe7\x47\xb8\xfb\x5f\xff\x3c\x1c\x3e\xf0\x99\xa6\x1c\xbe\xde\x24\x8f\xfb\xdd\x39\xa4\x9f\xf7\xfa\x0e\xfe\x77\xed\xe3\xfb\x76\xf3\xe5\x16\x43\xe6\x7f\xf8\xf0\x31\xa5\x4b\xa8\x8a\xab\xee\x07\xe4\x30\x84\x31\xe4\xe9\xf6\xf2\x7f\x0e\x53\xe8\x12\xfa\xcb\xa7\x79\xa9\x1d\x1e\x0b\x1e\xde\x1f\xe9\xea\xf3\x9c\xe2\x8b\x56\x02\xd6\x82\xd9\x80\x95\x5b\xb3\x16\x0b\x13\x35\x20\x61\x40\xb2\x08\xcd\x20\xa3\xc0\x4a\x40\xbb\x9a\x09\x2c\xf4\x43\xd8\x06\xa4\x6c\x09\x55\x42\x13\x98\xb8\x12\xe5\x33\x15\x3b\x09\xaa\x05\xb3\x04\xcb\x07\x37\x16\x46\x80\x84\x3d\xee\x77\x46\x41\x41\x2b\xb0\x96\x2b\x52\x85\x34\xb4\x86\x52\x20\xd1\xac\xd1\x3d\x91\x48\xe2\x7e\x92\x0a\xe5\x13\x59\x33\x2c\xad\xd0\xdd\xab\x06\x44\x0e\x54\x9a\x69\xbb\x15\xcd\x46\x34\x6e\x23\x5c\xb9\x0b\x12\x0a\xaa\x4c\xb3\x30\xa6\x66\x07\xa6\xbf\xcc\xdc\xe0\xbe\x5b\xc5\x2c\xb8\x12\xd2\x82\x4c\x19\x41\x44\x60\x26\xb0\x5b\x76\xa8\x78\xb9\x1e\x92\x0a\x64\x05\xa4\x28\xbe\x12\xe5\x3d\x94\xd9\x0a\xbb\x15\x4d\x2d\x24\xf8\x3e\xb4\x8c\x27\x0b\x96\x7a\x79\x42\x72\x04\x96\xbc\x2c\xb2\x8c\x5d\x19\xf5\x34\x16\x2c\x1a\x10\x97\xbf\xfe\x04\x00\x00\xff\xff\x6c\x1f\xff\x63\x5a\x04\x00\x00")

func dataProxifierWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7SpyTxt,
		"data/proxifier/win7/spy.txt",
	)
}

func dataProxifierWin7SpyTxt() (*asset, error) {
	bytes, err := dataProxifierWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/spy.txt", size: 1114, mode: os.FileMode(438), modTime: time.Unix(1492273373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd1\x51\x6a\xc3\x30\x0c\xc6\xf1\xf7\x40\x2e\x32\xd8\x87\x25\x47\xb2\x4d\x4e\x53\x9a\x6e\x14\xd6\x78\xb4\x19\xb9\xfe\xb0\x57\x56\x5b\x79\xfc\xff\x9c\x58\x41\x59\xf2\xbe\x7e\xe5\xd3\x82\xdb\xf5\x7c\xcf\x8f\xfc\xb1\xe1\x9c\x6f\xf3\x38\xbc\xbd\x64\xbf\xae\x4b\xde\x1f\x3f\xdf\xcb\x69\xbb\x60\xbd\x6c\xf5\xf8\x99\xc7\xf7\xfa\xc7\x7b\x7d\x62\xbe\x7f\xce\xe3\x40\x1e\xe4\x02\x26\x88\x9b\xc7\x81\x4b\x79\x50\x4c\x20\x16\x0b\x6a\x40\x82\x85\x38\x8f\x83\x0a\x44\x40\x3e\x82\x88\x4d\x4f\x7d\xd7\x1b\x9b\x8e\x4d\xab\x07\x33\x99\xe6\xfa\xc5\x13\x28\x38\x08\x81\x92\x6b\xc1\xc3\x77\x1d\xe1\xde\x9b\x60\x91\xe6\x94\x48\xa0\xed\x7d\xa4\x02\x9e\xe2\x41\x92\x15\xa1\x83\xf8\x22\x12\x20\x8a\xa4\x20\xae\x9d\x08\xec\x19\xb1\x0c\xef\x5b\x9d\x69\xfe\xef\x09\x81\x41\xd1\x5b\x50\x0b\xd1\x40\x5d\x05\x97\x5f\xa9\x65\xd1\x7f\x33\x7f\x03\x00\x00\xff\xff\x85\x1a\xc3\x25\x5a\x02\x00\x00")

func dataProxifierWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7UpdateTxt,
		"data/proxifier/win7/update.txt",
	)
}

func dataProxifierWin7UpdateTxt() (*asset, error) {
	bytes, err := dataProxifierWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/update.txt", size: 602, mode: os.FileMode(438), modTime: time.Unix(1478460942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xe1\x6e\xeb\x20\x0c\x85\xff\xe7\x51\x2a\xe5\x28\x10\x48\x5b\xe5\x69\x18\xb8\x19\x52\x80\x5c\xec\x25\xdd\xdb\x5f\x55\xd5\xa6\xdc\x9b\x6e\xff\xf8\x6c\x9f\x73\xb0\x9d\x97\xb8\x3a\x89\x25\xb7\xab\x06\xcf\x8c\x14\x7d\x2d\x5c\x6e\x02\x5f\xd2\xd8\x9c\xe0\x96\x85\xee\x6d\xbd\x21\x71\x7e\xd6\x42\x0a\x48\x24\x8e\xa9\xae\xd1\xd3\x41\x33\xe1\x2d\xe6\xe9\xeb\x3d\xc7\x95\x9e\xef\x98\x26\xb0\xbc\x81\xdb\x6f\xab\xb9\x4c\x31\xef\x46\x4e\x48\x7c\x93\xec\x39\x3e\x39\xd3\x5d\xda\xef\x1c\xb7\x2c\x87\xb0\x3f\x1f\x54\x3f\xb1\xd4\x12\xe0\x13\xa3\xca\x71\x83\xbd\x9e\xee\xbb\xcf\x9d\xc0\xc9\x55\x61\x5f\x89\xf2\xff\x3a\x96\x52\x89\xc2\x44\xb7\x80\xc0\x77\xa4\xe5\xe8\x2c\x71\xa6\x83\xeb\xea\xe6\x18\x7e\xbb\xe9\xe6\x84\x4b\x86\xd0\x4c\x89\xa4\x7e\x1e\xfa\xc1\xbf\xc8\xda\xc8\xc9\x3b\xd5\xc3\x30\xfb\x92\xe5\xe5\x69\x7e\x6c\xe1\xb1\x16\x7f\x44\x21\x64\x92\xaf\x41\xf5\x8b\x89\x7e\xdd\xdb\x36\x6c\x31\x87\xb2\x31\x93\xab\xfe\xfd\x59\x56\x3d\x2e\x1d\x94\x86\x35\x63\x63\x3a\x28\x75\x81\xea\x7a\x9c\x77\x34\x40\xf5\xdd\xd8\x0c\x06\x06\xd6\x40\xeb\xb1\x19\x2c\xac\x86\xea\x2e\xd0\xd7\x3d\xd9\x7f\x48\xd9\xfe\x91\xa0\xa0\x6d\x8f\x41\xa1\x6b\x77\xa0\xad\x1d\x1b\xdd\x19\x9c\xaf\x50\xd7\x33\x74\xd7\x3d\xf8\x0c\x33\x40\x5d\x0d\x94\x19\x9b\xbf\x01\x00\x00\xff\xff\xe0\x22\x61\x94\xf3\x02\x00\x00")

func dataProxifierWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81ExtraTxt,
		"data/proxifier/win81/extra.txt",
	)
}

func dataProxifierWin81ExtraTxt() (*asset, error) {
	bytes, err := dataProxifierWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/extra.txt", size: 755, mode: os.FileMode(438), modTime: time.Unix(1494527809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd1\x5b\xae\xda\x30\x10\x06\xe0\xf7\x2c\x05\xe9\xfc\xf2\x8c\xc7\x37\x65\x35\x16\x18\x84\x1a\x12\x94\xf8\x94\xb2\xfb\xca\x09\x1c\x6c\x4a\x1f\x90\xf8\xfe\x71\x66\x7c\xd9\x21\x7e\x5d\x96\x74\x38\x25\x8c\x29\xf7\xdd\xfe\xb0\x30\xb1\x27\x0c\xd3\x88\x61\x18\x6f\x3f\xb1\xd6\x01\xc3\xfe\x5e\x85\x4b\xca\xf9\x3c\x9e\x96\xaf\xdb\x79\xc4\x21\xe6\x88\xcb\x79\x3f\x4f\xcb\x74\xcc\xd8\x4f\x97\xbe\x5b\xae\xf7\x31\x65\xfe\x1c\xc7\x21\x7f\x2e\xa4\xef\x79\xba\xa6\xaa\x16\x7f\xc5\xc3\xb8\x3c\x66\xe6\x98\x97\x63\x62\x7c\x5f\x0f\x31\xa7\x7f\x3a\x3c\xcb\xb7\xe5\xbd\xb4\x43\x4e\x43\xba\xa4\x3c\xdf\x3f\x94\xe6\x78\x3c\x9e\xf7\x97\x38\xc6\x53\x9a\xb7\x51\x3b\xfc\x9e\xe6\x9c\xfe\x7c\x3c\xda\x56\xfa\xef\xc9\x59\x23\x78\x48\x00\xc9\x86\xb0\x82\xa9\xef\x44\xc1\x39\x30\x5b\xb0\x84\x86\x46\xf5\x9d\x21\x90\x10\x34\xc3\x50\xdf\x19\x06\x59\x01\x8b\x82\x09\x15\x09\xac\xcc\x66\xe7\x41\xe2\xca\x92\x97\x0d\x81\x89\x5f\x2e\x3f\xfb\x62\xd0\xa0\xca\xcc\x1a\xac\x37\x7a\x07\xab\x40\xca\xf5\x9d\x15\x08\xd8\xa1\xec\x6a\xfd\x6f\x04\x6c\x74\x0d\xe9\x3b\x6b\x60\x0c\x88\x4a\xcb\x46\xdc\x48\x3f\xc5\x86\x21\x8d\x42\x23\x0a\x65\x9c\x05\x51\xb9\x3b\x01\x19\xf7\x66\xdf\xda\x87\xd6\x61\xdb\x2e\x6b\xbd\xde\x15\x79\x5f\xd9\x82\x94\xef\x3b\x52\x02\x29\xbb\x72\xb0\xb6\x62\x40\x79\xa0\x07\x59\x3b\x90\x0d\x2f\xb3\x47\x39\x7e\x45\x56\xdc\x77\xa4\x05\xe4\x14\xb4\xfa\x60\xfd\x66\x69\xbd\x8e\x2b\x73\xc8\xae\xe3\x89\xe4\x19\x38\xb0\x36\xeb\xb3\x91\x71\xeb\x3d\x6a\xfd\x68\x50\x6c\x41\x41\xe0\xb8\xa5\x6e\x59\x16\x07\x02\x6b\xde\xba\x7b\x6e\x83\xf5\x39\xdb\xe0\xe7\x13\x07\x56\x1e\xc4\xf6\x19\x04\x18\x05\xf2\x0d\x9d\xab\xc8\x20\xa5\x2a\x0b\x0c\xf7\xdd\xdf\x00\x00\x00\xff\xff\xc2\x1b\xc7\xaa\x61\x04\x00\x00")

func dataProxifierWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81SpyTxt,
		"data/proxifier/win81/spy.txt",
	)
}

func dataProxifierWin81SpyTxt() (*asset, error) {
	bytes, err := dataProxifierWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/spy.txt", size: 1121, mode: os.FileMode(438), modTime: time.Unix(1494527809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xd1\x6e\xea\x30\x0c\x86\xef\x91\x78\x11\x24\x7e\xc5\x4e\x9c\x26\xe2\x69\x38\x14\x8e\x90\x80\x6e\x83\xad\xaf\x3f\xa5\x61\x6b\x62\xba\xdc\xf5\xfb\xec\xbf\x72\x9c\xfc\xfb\x8f\x2f\x87\x3d\xfa\x0b\xc6\x3b\xae\xe7\xc3\xc7\x70\x1f\x4e\x0f\x1c\x86\xeb\x6e\xbd\xca\xd5\xe3\xf5\xaf\x2a\xb5\xc3\xd4\x4e\x73\x3b\xcd\xed\xb4\xb4\xd3\xd2\x4a\x9f\x8e\x8c\xf1\x7d\x59\x2f\x74\x4f\x5b\xe8\x87\xf1\x76\x19\xf6\x3d\xc6\xf3\xad\x1f\xc6\xfb\xe7\x5b\xbf\x7f\x1c\x9f\x2d\x1b\x3c\x51\x67\x37\x8b\xed\x64\x41\xa6\x83\x83\x98\xdd\x7a\xc5\x89\x2c\x28\x44\x10\x8b\x16\x5e\x09\xe9\xb4\x08\xbb\xf5\xca\x0b\x44\x40\x36\xc0\x6c\xe7\x6f\x16\x99\x6b\xde\xce\x35\x6f\xab\x1a\x3b\x06\x8b\x9b\x26\x23\xb0\x58\x90\x03\x89\x9d\x84\x03\x75\x06\x42\x30\xdb\x02\x72\xfc\x57\x58\x70\xac\xd9\x9a\x92\x43\x99\x0e\x2a\x4d\x24\x10\xaf\x84\x37\x5a\x70\x29\x7c\x9a\x3a\xbc\x98\xa8\x8d\xd0\x8b\x99\x8e\x25\x5d\x3e\xb8\x41\x88\x35\xe7\x95\x17\x82\xd9\xfc\x08\x8f\xae\x4b\x9b\x55\x1c\x6b\x76\xaa\xdf\x91\x62\x95\x77\x45\x3e\x7a\xe4\x8b\x98\x31\x54\x48\x6c\x6b\x9e\x1e\x04\x45\x02\x5b\x46\x30\xcf\xc5\x15\x9c\xf6\xc6\xe9\xb9\x79\x10\xb9\xfc\xbf\x82\x7d\x9a\xee\x3b\x00\x00\xff\xff\x83\x5c\x18\xcd\x08\x04\x00\x00")

func dataProxifierWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81UpdateTxt,
		"data/proxifier/win81/update.txt",
	)
}

func dataProxifierWin81UpdateTxt() (*asset, error) {
	bytes, err := dataProxifierWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/update.txt", size: 1032, mode: os.FileMode(438), modTime: time.Unix(1492270979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\xeb\xda\x30\x14\xc7\xef\xfd\x2b\x42\x60\x17\xf9\x99\xcc\xce\x6e\xae\x8c\x5d\xf4\x22\xcc\x29\xc8\xe8\x61\xec\x10\xd3\xd7\x1a\x6c\xf3\x4a\x92\x6a\xcb\xf0\x7f\x1f\x8d\x73\x69\xc1\xc3\x08\x85\xf4\xf3\xbe\xef\x93\x3c\xf2\x3b\x22\x84\xe6\x70\x6a\x4b\x9a\x92\x42\x54\x16\xde\x06\xd2\x18\xec\x54\xa1\xc0\xd0\x94\x0c\x11\x42\x68\x85\xe5\x41\xb8\x33\x4d\x09\x5d\xa7\xfc\x87\x05\x63\xf9\x97\xd6\x82\xd1\xa2\x86\xaf\x7c\x83\xb2\xad\x41\x3b\xcb\x0f\xcf\x5e\xfe\x0d\x4b\xe6\x3a\x47\x23\x42\xee\x5e\x6b\x7b\x5b\xa3\x0e\x4e\xb8\xba\x6e\x24\xcd\xb6\xdf\x37\xfb\xec\xc8\x6d\x6f\x1d\xd4\x1f\x62\x7e\x53\x1a\xae\x6e\xf0\x58\xbe\x53\xd2\xa0\xc5\xc2\xcd\x33\xa5\x73\xbc\xd9\xf9\xd1\xdb\xde\x2d\xf7\x0d\x18\xe1\x14\x6a\x51\xb1\xc1\x18\xce\xbb\x29\x03\xf6\x2c\xcc\x25\x1c\xd9\x48\xd1\xe8\xff\x9c\x24\x7b\xb6\x73\x29\x1a\xf6\xe8\x0c\x72\xe8\x64\xd5\xe6\x10\xd4\xaa\xb1\x34\x25\x3f\xfd\x0f\x21\xf4\x3d\xf3\x8b\xbe\x3d\xc1\x22\xfe\xe4\xd1\x62\x84\x3e\xc7\x6c\xf1\x71\x35\xe0\x79\xd8\xc7\x49\x12\x22\x2b\xe6\xd7\x14\x2c\xd9\x32\x80\x38\x49\xd8\xe8\xa3\x9e\xff\x7a\x94\xe9\x19\xad\x9b\x5c\x6b\xd7\xaf\xb1\x6e\x5a\x07\x26\x18\x2a\x94\xa2\x1a\x92\x2f\x10\xf3\xbb\x1c\x6b\xa1\x74\x28\xcf\x1e\x38\x80\x1e\x5b\xb3\x3d\x1e\x98\xc4\x7a\x9c\x7a\x89\xff\x3d\x0b\x43\x53\x8e\xd3\xd3\xc2\x64\x0e\x34\xe5\x64\x8c\x59\x21\x24\x9c\x10\x2f\xb3\xbf\xb9\xe1\x5d\xa2\x7b\xf4\x27\x00\x00\xff\xff\x3c\x3e\x3c\xc6\xd1\x02\x00\x00")

func appConfBytes() ([]byte, error) {
	return bindataRead(
		_appConf,
		"app.conf",
	)
}

func appConf() (*asset, error) {
	bytes, err := appConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.conf", size: 721, mode: os.FileMode(438), modTime: time.Unix(1494706832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libsConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd0\xc1\x8a\xdb\x30\x10\xc6\xf1\xbb\x9f\x42\xe8\xdc\xb5\xa5\x91\x25\x8d\xf2\x0c\x3d\x2c\xf4\xd0\xf3\x68\xa4\xd9\x84\x75\xe2\x20\x3b\x94\xa4\xe4\xdd\x4b\x9c\x43\xa1\xd0\x3d\xe4\x3a\x30\x7f\x7e\x7c\xbf\x3b\xa5\xf4\x34\x7f\x9c\xa9\x2d\xb5\xe9\x9d\x7a\x1c\x94\xd2\x97\x36\xe9\x9d\xd2\xfb\x75\x3d\x2f\xbb\x61\x28\x53\x9f\x0f\xa7\xb5\xd1\xb5\xe7\xf9\x38\x70\xa3\xdb\x75\x58\xe7\x79\x5a\x86\xef\xf3\xc7\xfb\xf6\xfc\x06\x3d\xf4\xd6\xf4\xb7\xc3\x59\x7f\x7b\x56\x78\x5f\xf9\x73\xb9\x1c\x1f\x29\x00\x20\x8f\xb1\xfa\x4c\xde\x14\x46\x0c\x29\x18\x0e\xc5\x63\x29\x9c\x91\xd9\x5b\x8e\x36\x48\x32\x52\x32\xe3\xe8\xd9\xa2\x83\x64\x52\x8e\xc4\x26\x89\xee\x94\xba\x3f\xba\x7a\xb9\x2e\xc7\xf9\xf4\x8a\xf5\xc7\xf6\xf9\xe6\xbe\x60\x8e\x42\x79\x14\x87\x46\xd0\xd5\x14\x0a\x81\x8c\x12\x7d\x36\x1c\xd1\xf8\x71\x0c\x89\xa1\xd8\xe8\x83\x8b\xc2\x16\x3d\x86\x51\x90\x11\x88\xad\x38\xca\xf0\x97\xf9\xeb\xd0\xea\xb2\xa7\xf6\xf9\x3e\xb7\x95\xf2\x54\x5f\x11\xff\xfc\x37\xb2\xad\x1c\xfe\xa7\x77\x41\xc0\x83\x40\xb2\x5c\xc8\x42\xdc\x96\x8c\x12\xad\x15\x11\x02\xef\xa0\x78\x1f\x24\x61\xb0\x94\x62\xa4\x52\xa5\x20\xc4\x1a\xa2\x14\xe2\xf8\xd4\x77\xf7\xee\x4f\x00\x00\x00\xff\xff\x4a\x39\x52\x11\x17\x02\x00\x00")

func libsConfBytes() ([]byte, error) {
	return bindataRead(
		_libsConf,
		"libs.conf",
	)
}

func libsConf() (*asset, error) {
	bytes, err := libsConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "libs.conf", size: 535, mode: os.FileMode(438), modTime: time.Unix(1494436853, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dnscrypt/win10/extra.txt":           dataDnscryptWin10ExtraTxt,
	"data/dnscrypt/win10/spy.txt":             dataDnscryptWin10SpyTxt,
	"data/dnscrypt/win10/update.txt":          dataDnscryptWin10UpdateTxt,
	"data/dnscrypt/win7/extra.txt":            dataDnscryptWin7ExtraTxt,
	"data/dnscrypt/win7/spy.txt":              dataDnscryptWin7SpyTxt,
	"data/dnscrypt/win7/update.txt":           dataDnscryptWin7UpdateTxt,
	"data/dnscrypt/win81/extra.txt":           dataDnscryptWin81ExtraTxt,
	"data/dnscrypt/win81/spy.txt":             dataDnscryptWin81SpyTxt,
	"data/dnscrypt/win81/update.txt":          dataDnscryptWin81UpdateTxt,
	"data/firewall/win10/extra.txt":           dataFirewallWin10ExtraTxt,
	"data/firewall/win10/spy.txt":             dataFirewallWin10SpyTxt,
	"data/firewall/win10/update.txt":          dataFirewallWin10UpdateTxt,
	"data/firewall/win7/extra.txt":            dataFirewallWin7ExtraTxt,
	"data/firewall/win7/spy.txt":              dataFirewallWin7SpyTxt,
	"data/firewall/win7/update.txt":           dataFirewallWin7UpdateTxt,
	"data/firewall/win81/extra.txt":           dataFirewallWin81ExtraTxt,
	"data/firewall/win81/spy.txt":             dataFirewallWin81SpyTxt,
	"data/firewall/win81/update.txt":          dataFirewallWin81UpdateTxt,
	"data/hosts/win10/extra.txt":              dataHostsWin10ExtraTxt,
	"data/hosts/win10/spy.txt":                dataHostsWin10SpyTxt,
	"data/hosts/win10/update.txt":             dataHostsWin10UpdateTxt,
	"data/hosts/win7/extra.txt":               dataHostsWin7ExtraTxt,
	"data/hosts/win7/spy.txt":                 dataHostsWin7SpyTxt,
	"data/hosts/win7/update.txt":              dataHostsWin7UpdateTxt,
	"data/hosts/win81/extra.txt":              dataHostsWin81ExtraTxt,
	"data/hosts/win81/spy.txt":                dataHostsWin81SpyTxt,
	"data/hosts/win81/update.txt":             dataHostsWin81UpdateTxt,
	"data/ncsi/github.com.reg":                dataNcsiGithubComReg,
	"data/ncsi/msftncsi.com.reg":              dataNcsiMsftncsiComReg,
	"data/ncsi/ncsi.txt":                      dataNcsiNcsiTxt,
	"data/openwrt/win10/extra/dnsmasq.conf":   dataOpenwrtWin10ExtraDnsmasqConf,
	"data/openwrt/win10/extra/firewall.user":  dataOpenwrtWin10ExtraFirewallUser,
	"data/openwrt/win10/spy/dnsmasq.conf":     dataOpenwrtWin10SpyDnsmasqConf,
	"data/openwrt/win10/spy/firewall.user":    dataOpenwrtWin10SpyFirewallUser,
	"data/openwrt/win10/update/dnsmasq.conf":  dataOpenwrtWin10UpdateDnsmasqConf,
	"data/openwrt/win10/update/firewall.user": dataOpenwrtWin10UpdateFirewallUser,
	"data/openwrt/win7/extra/dnsmasq.conf":    dataOpenwrtWin7ExtraDnsmasqConf,
	"data/openwrt/win7/extra/firewall.user":   dataOpenwrtWin7ExtraFirewallUser,
	"data/openwrt/win7/spy/dnsmasq.conf":      dataOpenwrtWin7SpyDnsmasqConf,
	"data/openwrt/win7/spy/firewall.user":     dataOpenwrtWin7SpyFirewallUser,
	"data/openwrt/win7/update/dnsmasq.conf":   dataOpenwrtWin7UpdateDnsmasqConf,
	"data/openwrt/win7/update/firewall.user":  dataOpenwrtWin7UpdateFirewallUser,
	"data/openwrt/win81/extra/dnsmasq.conf":   dataOpenwrtWin81ExtraDnsmasqConf,
	"data/openwrt/win81/extra/firewall.user":  dataOpenwrtWin81ExtraFirewallUser,
	"data/openwrt/win81/spy/dnsmasq.conf":     dataOpenwrtWin81SpyDnsmasqConf,
	"data/openwrt/win81/spy/firewall.user":    dataOpenwrtWin81SpyFirewallUser,
	"data/openwrt/win81/update/dnsmasq.conf":  dataOpenwrtWin81UpdateDnsmasqConf,
	"data/openwrt/win81/update/firewall.user": dataOpenwrtWin81UpdateFirewallUser,
	"data/proxifier/win10/extra.txt":          dataProxifierWin10ExtraTxt,
	"data/proxifier/win10/spy.txt":            dataProxifierWin10SpyTxt,
	"data/proxifier/win10/update.txt":         dataProxifierWin10UpdateTxt,
	"data/proxifier/win7/extra.txt":           dataProxifierWin7ExtraTxt,
	"data/proxifier/win7/spy.txt":             dataProxifierWin7SpyTxt,
	"data/proxifier/win7/update.txt":          dataProxifierWin7UpdateTxt,
	"data/proxifier/win81/extra.txt":          dataProxifierWin81ExtraTxt,
	"data/proxifier/win81/spy.txt":            dataProxifierWin81SpyTxt,
	"data/proxifier/win81/update.txt":         dataProxifierWin81UpdateTxt,
	"app.conf":                                appConf,
	"libs.conf":                               libsConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app.conf": {appConf, map[string]*bintree{}},
	"data": {nil, map[string]*bintree{
		"dnscrypt": {nil, map[string]*bintree{
			"win10": {nil, map[string]*bintree{
				"extra.txt":  {dataDnscryptWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataDnscryptWin10SpyTxt, map[string]*bintree{}},
				"update.txt": {dataDnscryptWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": {nil, map[string]*bintree{
				"extra.txt":  {dataDnscryptWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataDnscryptWin7SpyTxt, map[string]*bintree{}},
				"update.txt": {dataDnscryptWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": {nil, map[string]*bintree{
				"extra.txt":  {dataDnscryptWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataDnscryptWin81SpyTxt, map[string]*bintree{}},
				"update.txt": {dataDnscryptWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"firewall": {nil, map[string]*bintree{
			"win10": {nil, map[string]*bintree{
				"extra.txt":  {dataFirewallWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataFirewallWin10SpyTxt, map[string]*bintree{}},
				"update.txt": {dataFirewallWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": {nil, map[string]*bintree{
				"extra.txt":  {dataFirewallWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataFirewallWin7SpyTxt, map[string]*bintree{}},
				"update.txt": {dataFirewallWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": {nil, map[string]*bintree{
				"extra.txt":  {dataFirewallWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataFirewallWin81SpyTxt, map[string]*bintree{}},
				"update.txt": {dataFirewallWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"hosts": {nil, map[string]*bintree{
			"win10": {nil, map[string]*bintree{
				"extra.txt":  {dataHostsWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataHostsWin10SpyTxt, map[string]*bintree{}},
				"update.txt": {dataHostsWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": {nil, map[string]*bintree{
				"extra.txt":  {dataHostsWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataHostsWin7SpyTxt, map[string]*bintree{}},
				"update.txt": {dataHostsWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": {nil, map[string]*bintree{
				"extra.txt":  {dataHostsWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataHostsWin81SpyTxt, map[string]*bintree{}},
				"update.txt": {dataHostsWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"ncsi": {nil, map[string]*bintree{
			"github.com.reg":   {dataNcsiGithubComReg, map[string]*bintree{}},
			"msftncsi.com.reg": {dataNcsiMsftncsiComReg, map[string]*bintree{}},
			"ncsi.txt":         {dataNcsiNcsiTxt, map[string]*bintree{}},
		}},
		"openwrt": {nil, map[string]*bintree{
			"win10": {nil, map[string]*bintree{
				"extra": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin10ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin10ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin10SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin10SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin10UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin10UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
			"win7": {nil, map[string]*bintree{
				"extra": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin7ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin7ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin7SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin7SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin7UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin7UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
			"win81": {nil, map[string]*bintree{
				"extra": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin81ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin81ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin81SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin81SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": {nil, map[string]*bintree{
					"dnsmasq.conf":  {dataOpenwrtWin81UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": {dataOpenwrtWin81UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
		}},
		"proxifier": {nil, map[string]*bintree{
			"win10": {nil, map[string]*bintree{
				"extra.txt":  {dataProxifierWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataProxifierWin10SpyTxt, map[string]*bintree{}},
				"update.txt": {dataProxifierWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": {nil, map[string]*bintree{
				"extra.txt":  {dataProxifierWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataProxifierWin7SpyTxt, map[string]*bintree{}},
				"update.txt": {dataProxifierWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": {nil, map[string]*bintree{
				"extra.txt":  {dataProxifierWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt":    {dataProxifierWin81SpyTxt, map[string]*bintree{}},
				"update.txt": {dataProxifierWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
	}},
	"libs.conf": {libsConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
