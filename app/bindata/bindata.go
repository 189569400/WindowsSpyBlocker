// Code generated by go-bindata.
// sources:
// data/dnscrypt/win10/extra.txt
// data/dnscrypt/win10/spy.txt
// data/dnscrypt/win10/update.txt
// data/dnscrypt/win7/extra.txt
// data/dnscrypt/win7/spy.txt
// data/dnscrypt/win7/update.txt
// data/dnscrypt/win81/extra.txt
// data/dnscrypt/win81/spy.txt
// data/dnscrypt/win81/update.txt
// data/firewall/win10/extra.txt
// data/firewall/win10/spy.txt
// data/firewall/win10/update.txt
// data/firewall/win7/extra.txt
// data/firewall/win7/spy.txt
// data/firewall/win7/update.txt
// data/firewall/win81/extra.txt
// data/firewall/win81/spy.txt
// data/firewall/win81/update.txt
// data/hosts/win10/extra.txt
// data/hosts/win10/spy.txt
// data/hosts/win10/update.txt
// data/hosts/win7/extra.txt
// data/hosts/win7/spy.txt
// data/hosts/win7/update.txt
// data/hosts/win81/extra.txt
// data/hosts/win81/spy.txt
// data/hosts/win81/update.txt
// data/ncsi/ncsi.txt
// data/openwrt/win10/extra/dnsmasq.conf
// data/openwrt/win10/extra/firewall.user
// data/openwrt/win10/spy/dnsmasq.conf
// data/openwrt/win10/spy/firewall.user
// data/openwrt/win10/update/dnsmasq.conf
// data/openwrt/win10/update/firewall.user
// data/openwrt/win7/extra/dnsmasq.conf
// data/openwrt/win7/extra/firewall.user
// data/openwrt/win7/spy/dnsmasq.conf
// data/openwrt/win7/spy/firewall.user
// data/openwrt/win7/update/dnsmasq.conf
// data/openwrt/win7/update/firewall.user
// data/openwrt/win81/extra/dnsmasq.conf
// data/openwrt/win81/extra/firewall.user
// data/openwrt/win81/spy/dnsmasq.conf
// data/openwrt/win81/spy/firewall.user
// data/openwrt/win81/update/dnsmasq.conf
// data/openwrt/win81/update/firewall.user
// data/proxifier/win10/extra/domains.txt
// data/proxifier/win10/extra/ips.txt
// data/proxifier/win10/spy/domains.txt
// data/proxifier/win10/spy/ips.txt
// data/proxifier/win10/update/domains.txt
// data/proxifier/win10/update/ips.txt
// data/proxifier/win7/extra/domains.txt
// data/proxifier/win7/extra/ips.txt
// data/proxifier/win7/spy/domains.txt
// data/proxifier/win7/spy/ips.txt
// data/proxifier/win7/update/domains.txt
// data/proxifier/win7/update/ips.txt
// data/proxifier/win81/extra/domains.txt
// data/proxifier/win81/extra/ips.txt
// data/proxifier/win81/spy/domains.txt
// data/proxifier/win81/spy/ips.txt
// data/proxifier/win81/update/domains.txt
// data/proxifier/win81/update/ips.txt
// app.conf
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDnscryptWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x51\x72\xdd\x30\x08\x45\xff\xb3\x94\xcc\x98\x8f\xec\x48\x41\x48\x66\x6c\x40\x23\xa8\xed\x76\xf5\x9d\x67\x3b\x79\xcf\x6e\xf3\xa9\x0b\xf7\xe8\x02\xef\xf0\x21\x59\x41\x29\xde\xde\x41\xc8\x9d\xb4\x52\x87\x99\x17\x02\x34\x79\x88\x5e\x42\xd1\xf9\x7c\x2e\x06\xe2\x84\x9a\x4f\xcf\x4a\x29\x46\xea\x20\x8c\xdd\xdc\x4a\x9c\x7d\xdb\xa7\x6d\xdf\x94\xa4\xbe\x52\xf7\x5b\x53\x6a\xcd\xc1\xa7\xdf\xed\x68\xc2\xac\x80\xa6\x41\x1a\xd0\xba\x65\x40\x71\x10\xd7\xa3\x38\x1a\x23\xdd\x00\xff\x13\x41\x3d\x05\xee\xe1\x70\xe6\x07\x6b\x55\x87\x95\x35\xdb\xea\x87\x6b\x97\xd1\xb4\x70\x85\x96\xdc\x9b\xf5\xd8\x0d\x59\x32\x08\x45\x72\xea\x0b\x23\xdd\xf3\x16\xa2\xfc\x99\x70\x7a\xca\xc3\x68\xa3\x5c\x6b\x4e\xa9\xe3\xf8\x93\xf3\x35\x47\x7d\x6e\x99\xa5\x0e\x3e\x88\xeb\xf0\x98\x20\x4d\x49\x12\xff\xa1\x63\xc5\x33\x23\xa9\xb3\x56\x90\x76\xc3\xce\x56\x59\x9f\x14\x81\xd1\x42\x12\xcf\xfb\xcb\x4a\x61\xa4\x73\x07\x57\x9f\xe9\x97\xee\x65\x03\xf1\xb7\xd6\x19\x69\x66\x8f\x97\x73\x7c\x0d\x72\x1e\xc0\xc3\x3a\x0d\x2c\xa9\x92\x83\x0f\x57\xe0\x5e\xa4\x5c\xa9\x64\xc8\xbe\xfd\x9b\x34\x58\xe8\x32\x7c\x4c\x1f\xd0\xe6\xf8\xc6\xff\xe2\x97\xaf\x17\xa6\x15\x52\x64\xd9\xcd\x7f\x03\x00\x00\xff\xff\x36\x7f\x66\x7a\xa3\x02\x00\x00")

func dataDnscryptWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10ExtraTxt,
		"data/dnscrypt/win10/extra.txt",
	)
}

func dataDnscryptWin10ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/extra.txt", size: 675, mode: os.FileMode(438), modTime: time.Unix(1495372059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x96\xed\xb2\xb3\x28\x0c\xc7\xbf\x3f\x97\x72\x66\xcc\x80\x9e\xa7\x7b\x7a\x39\x11\x52\x65\x0e\x02\x4b\x50\xdb\xbb\xdf\x51\x5b\xad\x2f\x75\xfb\x49\xff\x3f\x12\x92\x48\x48\xbf\x00\xb3\x86\x49\x57\x04\x8e\xd2\x9f\x2f\x40\xed\xe8\xde\xf2\xf2\x76\x67\x50\xbe\x19\x9f\xf9\x0b\x1a\x46\xbd\xc0\x51\x70\x2f\xde\x8c\xaf\xa4\xdc\x8b\x27\xdd\xa4\x27\xac\x6c\xa9\x1d\xe7\xd0\x18\x15\x3d\xfb\xdb\x4b\xb7\x5e\x61\x32\xde\x81\x35\xdd\x2b\x84\x55\x3c\x11\xf5\xc4\xa6\xf5\xc3\xeb\xb2\x65\x1c\x82\x59\x5e\x99\x62\x67\x14\x31\xb0\x57\x06\xed\x6e\xb3\x44\x96\x1a\x4a\xf1\x01\x18\x02\xdd\xa1\x34\xae\x7a\x6e\xb3\xa0\xcf\x46\x2b\x02\x8e\x31\xa9\x9d\x75\x1b\x79\xe7\xa1\x33\x31\xb5\x68\x09\x63\xaa\x9f\x06\x9d\x8f\x89\xee\x5f\xa0\x31\x21\x0c\x96\xaf\x0a\x6c\x3d\xaf\x17\xae\x1c\xa3\x2a\xe6\xdc\x51\x25\xd3\x99\xf4\x80\xde\x38\xed\xfb\xe9\x93\xe1\x2f\x66\x4a\xbb\xcc\x31\xa0\x4e\xa4\x6a\xd0\xf4\x67\xc8\x79\xac\xda\xca\x57\x69\x8b\x42\xc8\x0c\x41\xea\xd8\xbd\x2b\x6a\xa7\x54\x6f\x8a\x93\x85\xf8\xce\x68\xa3\x5c\x56\x7e\x26\x65\xbf\x66\xe5\x27\x2f\x33\xe5\xa3\x10\x12\x30\x18\x08\xc3\xc3\x01\x2d\x0e\x69\x11\x4e\x6c\x79\x3a\x14\xae\xca\xf8\x31\x55\xa5\x7c\xec\x52\x7d\xec\x52\x9d\x94\xb7\xa0\xd5\x5c\x6a\x85\xaa\xa6\xf1\x7b\x34\x18\xd3\xaa\xe0\xaa\x96\x9f\x43\x99\x61\x7e\x08\xb7\x21\x3c\x15\xda\x29\xd5\x46\xc9\x77\x56\xf9\xca\xca\x37\x01\x13\xdd\x55\x8d\xae\x22\x50\xd6\xb7\x1a\x43\x18\x8f\xd7\x9a\x49\x48\x11\x6f\x37\xa3\x1a\x74\x58\x51\x7c\x2e\x89\x01\x38\x6d\xcf\x8b\x0a\x52\xc8\x2c\x44\xaf\x41\x7b\xd0\x1c\xa0\x09\xdb\x25\x2c\xa1\x0f\x0a\x3a\xa1\xf4\x74\x23\xe8\xb2\xe8\x1d\xe7\x42\x0e\x3f\xe8\x1d\xaf\x8a\xa7\xcb\xbf\x47\x1a\xab\x5a\x0a\x29\x85\xb8\xca\x7f\xce\xb8\xfc\x7b\xec\x73\xe6\x3f\xb2\x38\xe5\x57\xf9\x7d\xce\x8b\xeb\x09\x97\xe2\x92\x5f\xce\x79\x71\xe6\x5f\x8a\x9f\xfc\x2c\xfe\x81\xe7\x1f\x79\x31\x58\x9f\xe4\x3f\xf0\x6f\xf1\x39\xbe\x42\x5c\xf3\x5c\x1c\xe6\xd7\x3b\x96\xfa\x00\x5c\x46\xc3\x5c\x5c\xa5\x14\x47\x1f\x6e\xe1\xdf\xf2\x20\x70\x83\x95\xf3\x9c\x8c\x62\xe0\x36\x04\x1f\xd3\xe6\xf8\x50\xfb\xbc\xfb\x8e\xae\xbe\x9b\xa5\xfb\xdc\x90\xd5\xf2\x44\xfe\xfc\x4c\x56\xe4\x3b\x8a\xe7\x6b\x6a\x39\xfb\xab\xf3\xf9\xd1\x64\xec\xf2\xcf\xcd\xfd\x86\x8f\xda\xfb\xb7\xfb\xdf\x76\xb1\xa5\x84\xbe\xef\xa1\x61\xc0\x5f\xd4\x6e\x1a\xb2\x96\xf3\x9e\x4a\x88\xa4\x1b\xef\x34\x8c\xdd\xb8\xb6\x6b\xde\x66\x74\xe3\x4b\x63\x09\x82\x09\x04\x18\xcd\xb6\x6a\x0d\xbb\x44\x9c\x76\x37\xe2\x34\xf0\xfd\xd0\xfa\x84\x21\xf0\x32\x6f\x47\x12\x5b\x4b\xc7\xd8\x3b\x62\x4a\xc9\xb8\x8a\xb3\xaf\x93\x31\x16\x22\xc1\xcd\xfb\x14\xa2\x71\x29\x44\xd2\x46\x4d\x11\x85\x48\x9d\xa1\x7e\xae\xf2\x80\xe2\xe0\x08\xe7\x51\xbe\x4e\x81\x55\x4d\x0d\xbe\xab\x6f\xc5\x62\x52\xed\xb0\x93\x45\xae\x13\xda\xdf\x61\xba\x8f\x46\xaf\x18\x19\x9d\x2e\xfd\xe1\x89\x9a\xd7\xf4\xc6\x9d\xf1\x43\xe6\xb6\x97\xf7\x53\xa1\x9d\xf2\x76\x79\x73\x78\x38\x4a\xdb\x7f\x44\x93\x8a\x76\xdb\x0e\x93\x4e\x6d\xf4\x81\x3e\x64\xcf\xfd\xf2\x65\x38\xf9\x48\x0a\x13\x5a\x5f\x45\xea\x5e\x7f\xb2\x46\xf9\xdf\x16\xed\xf0\x57\x61\xb3\x41\x1b\x3b\x7a\x40\x8f\x89\xbd\xdb\xb0\xc4\x37\x7a\x0d\x07\xae\x31\x0c\x85\x3d\x3c\xc4\x1d\x45\x1e\xf6\xa9\x1f\x65\x34\x7a\x6c\x84\x9a\xe2\x14\xd2\xd4\xcd\xa7\xe7\xe4\xb9\xf9\x9c\xc5\x61\x30\xbd\x71\x52\x80\x09\xdd\x65\x0d\xfe\x0b\x00\x00\xff\xff\x44\xda\x02\x17\xca\x0a\x00\x00")

func dataDnscryptWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10SpyTxt,
		"data/dnscrypt/win10/spy.txt",
	)
}

func dataDnscryptWin10SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/spy.txt", size: 2762, mode: os.FileMode(438), modTime: time.Unix(1495372061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x0e\xc2\x30\x0c\x04\xef\x48\x7c\x84\xc3\xfe\xc9\x8a\x4d\x15\x91\xc4\x56\x6c\xa8\xfa\x7b\x04\xa4\x08\xda\x1e\x3d\xde\x59\xed\x05\x2c\x25\x3f\xa4\x2f\x60\x37\x54\x43\xcd\xa9\xab\xeb\x35\x90\xb4\xa2\x39\x45\x42\x93\x38\x9f\x7e\xa2\xdb\xd8\xeb\xf9\x05\x73\x6e\xac\xb3\xdf\x8d\x29\x64\x55\xc7\xb5\xb3\x8e\x38\xe8\x46\xdc\x7c\x55\xff\xfb\x86\xf7\x81\x83\x69\x9f\xde\xcc\xb7\xfd\x9c\xdd\x0a\x2d\x89\x82\x8a\x4e\x07\xb3\xa5\x72\xd9\x79\xcf\x00\x00\x00\xff\xff\x40\xf0\x22\x91\x14\x01\x00\x00")

func dataDnscryptWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin10UpdateTxt,
		"data/dnscrypt/win10/update.txt",
	)
}

func dataDnscryptWin10UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win10/update.txt", size: 276, mode: os.FileMode(438), modTime: time.Unix(1495372063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x4d\x0a\x02\x31\x0c\x46\xf7\x82\x17\x71\x91\x85\x37\xaa\x69\xa6\x7c\xd0\x24\xc3\x24\xb6\xd7\x77\x51\x04\xf1\x07\xdc\xbd\xbc\x47\xe0\xbb\x90\xc6\x96\xc6\x01\x62\xd7\xf3\xa9\x70\x62\x94\x84\x1b\x45\x0f\x52\xf0\xe1\xe1\x5b\xae\xca\x7e\xfd\xaa\x8f\xfe\xae\xaa\x56\x52\xc9\x12\x72\x0c\xb0\x7c\xbc\x34\xba\xc1\xda\x93\x3b\x86\x2c\xee\xde\x60\x2f\x77\x42\x85\x26\xac\xfa\x8c\x65\x46\xe9\xa8\x3f\x17\xce\x60\xb7\xa4\xb2\xef\xff\x27\x92\xda\x24\xee\x48\x21\x93\x7c\x04\x00\x00\xff\xff\x1b\x79\x05\x43\x12\x01\x00\x00")

func dataDnscryptWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7ExtraTxt,
		"data/dnscrypt/win7/extra.txt",
	)
}

func dataDnscryptWin7ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/extra.txt", size: 274, mode: os.FileMode(438), modTime: time.Unix(1495372045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x4e\xc3\x30\x10\x44\xef\x48\xfc\x48\x24\x56\xc4\x84\x4a\x7c\xce\x62\x4f\x82\x85\xbd\x1b\xd9\xdb\xa6\xfe\x7b\x0e\x2d\x52\x28\x3e\xe4\xfa\xe6\xed\x68\x67\x20\x43\x42\x86\x95\x46\x39\xfa\xa2\x55\x67\x23\xaf\xf9\xf9\x69\xa0\x8b\x16\xc3\x75\xa0\xc0\xc6\x8f\xa9\x0f\x75\x1c\xa7\x37\x4a\x2a\x94\x92\x6c\x24\xb0\x1b\x75\xa7\x8f\xff\xd4\xbd\x4e\x6e\xa2\xe4\xdb\x1e\x6b\x5e\xd9\x70\xf5\x5f\x2c\x0b\x46\xb2\xc2\xf3\x1c\x7d\x66\xe1\x05\xe5\xee\x34\x47\x15\x66\x51\x96\xda\xf9\x83\xf8\x9b\x83\xd4\x9b\x1b\x3e\xdf\x0f\xbb\x38\xdf\xd7\x75\xc7\x2d\xd0\xc3\x4d\xbf\xde\xcb\x16\xa5\x5b\x56\xd7\x26\x30\xd7\xc7\x38\x17\x5d\xb1\xcb\xf6\xd5\x86\x82\xa0\x14\xd7\xcb\xe9\xf1\x7a\x63\xab\x2a\x7f\xe9\x4f\x00\x00\x00\xff\xff\x53\xb7\x73\x5b\xcc\x01\x00\x00")

func dataDnscryptWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7SpyTxt,
		"data/dnscrypt/win7/spy.txt",
	)
}

func dataDnscryptWin7SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/spy.txt", size: 460, mode: os.FileMode(438), modTime: time.Unix(1495372047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\x29\xcf\xcc\x4b\xc9\x2f\x2f\x2e\x2d\x48\x49\x2c\x49\xd5\xcb\x4b\x2d\xe1\xe5\xd2\xd2\x83\xf2\xe0\x8a\xf4\x92\xf3\x73\x41\xe2\xa8\x8a\x51\x04\xa1\x62\xf9\x45\xe9\xbc\x5c\x29\xf9\xe5\x79\x39\xf9\x89\x29\xa8\x06\x00\x02\x00\x00\xff\xff\x0a\xc0\x1f\xbf\x75\x00\x00\x00")

func dataDnscryptWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin7UpdateTxt,
		"data/dnscrypt/win7/update.txt",
	)
}

func dataDnscryptWin7UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win7/update.txt", size: 117, mode: os.FileMode(438), modTime: time.Unix(1495372049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xdd\x6a\xc3\x30\x0c\x85\xef\x07\x7b\x91\x42\x04\xeb\x1b\xb9\xf6\x89\x2b\xb0\xec\x4c\x52\xe3\xf6\xed\x47\x29\x29\x21\xc9\x7a\x67\xeb\xfb\xf4\x73\x4e\x14\xa6\x09\xf7\x41\x47\x12\xab\x14\x9b\x7c\x7f\x9d\x48\x6c\xf4\x1a\x8d\x97\xbf\x41\x67\x8e\xb0\x97\x4c\x17\xae\xf9\x8d\x24\xa8\x5b\x54\xa0\x92\x70\xd4\x66\x6d\xf4\x05\x3a\x17\x1c\xf4\x74\x04\xbf\x42\xb7\x7e\x88\xce\x73\x70\x6e\x75\x98\xcf\x64\xc5\xb6\x42\x92\x44\x02\x0f\xef\x73\x36\x3c\xaf\xb6\x64\x2a\x3c\xe3\xf5\x66\xc9\x64\x7e\x21\x1b\xde\x19\x4b\xcb\x5c\x57\x4a\xc5\xdd\x87\x75\xcc\xdd\xf0\xdf\x1b\xf4\x41\x93\xb6\x44\x51\x8c\xd4\xb7\x82\x79\x53\x20\x65\x8c\x89\x92\xdd\x49\xa6\xad\xe1\x2c\xa0\xce\x35\xb5\x6e\xaf\xca\x1c\x0a\xa7\x4f\x91\x7b\x70\x6b\x95\x1c\x05\x02\xd7\xc7\x8e\xa7\xb8\x5b\xd3\x2d\xb6\xea\x87\x21\xfe\x45\xf4\x3c\xdc\x6e\xec\xa0\x0a\x5f\xc4\x9f\x0f\x43\xce\xc7\xac\xf7\x25\xa1\x21\x68\xbc\x3e\xcb\x7f\x01\x00\x00\xff\xff\xaf\x99\x3c\x8d\x65\x02\x00\x00")

func dataDnscryptWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81ExtraTxt,
		"data/dnscrypt/win81/extra.txt",
	)
}

func dataDnscryptWin81ExtraTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/extra.txt", size: 613, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xe1\x6a\x85\x30\x0c\x05\xe0\xff\x83\xbd\x88\x60\xc0\x0a\xc3\x3d\x4e\x68\x53\x29\x6b\xd3\xd2\x44\x3b\xdf\x7e\x30\xaf\xe0\xf5\x7a\xff\x9e\x8f\x73\xda\x74\x80\x7d\x12\x72\x33\x01\x93\x7e\x7e\x74\xa0\x14\x29\x91\xd6\x0d\x52\xb0\x35\x4b\xf6\x0a\x36\xa7\x7f\xaa\xe8\x7d\xb0\x09\x19\x67\xaa\x47\x61\xcd\x55\xe9\x17\x1c\x2a\x5e\x2b\xd6\x89\x19\xcc\x34\x40\xcc\x0c\x31\x72\xdb\x3b\xd6\xc9\x38\x7e\x43\xb4\xdb\x29\x14\x52\x0d\x3c\x4b\xdf\x02\xdf\x8e\x49\xd9\x98\xd4\xdc\xc7\x18\xf5\x1e\x68\xa9\xb9\xd0\xc9\xf0\x07\x1d\xcb\xe3\x4d\x45\x15\x4f\x06\x96\xe2\x50\xe9\x65\xe1\xe0\x26\x57\xda\x8f\x7e\xfb\xd7\x16\x78\x82\x50\xd6\xaf\x67\xf8\x0b\x00\x00\xff\xff\x02\x06\x03\x48\x6e\x01\x00\x00")

func dataDnscryptWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81SpyTxt,
		"data/dnscrypt/win81/spy.txt",
	)
}

func dataDnscryptWin81SpyTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/spy.txt", size: 366, mode: os.FileMode(438), modTime: time.Unix(1495372066, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDnscryptWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\xd1\x0a\xc3\x20\x0c\x45\xdf\x0b\xfd\x91\x3e\x5c\xa8\xac\x1f\xd4\xd5\x28\xc2\x34\x9b\xba\xe5\xf7\xc7\x98\x0c\x94\x35\x8f\x39\xf7\x9c\x2c\x88\xe1\xc8\x5c\xd8\x55\x09\xc9\xb2\x94\xe7\xdd\xee\x95\x90\xa8\xce\xd3\x82\x76\xfd\x24\x1c\x1c\x3f\xbc\x97\x3b\xd8\x18\x67\x3f\x4f\x57\x8f\xd7\x05\x3b\xec\x0d\x52\xc6\x2f\xdf\x91\xe2\xc9\xb8\xaa\xe9\xaa\xb6\x46\x6d\x8d\xda\x6e\x6a\xbb\x29\xad\x23\x03\x79\xfc\xa5\x83\xfb\x0e\x00\x00\xff\xff\x8f\xab\x1f\x42\x77\x01\x00\x00")

func dataDnscryptWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataDnscryptWin81UpdateTxt,
		"data/dnscrypt/win81/update.txt",
	)
}

func dataDnscryptWin81UpdateTxt() (*asset, error) {
	bytes, err := dataDnscryptWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dnscrypt/win81/update.txt", size: 375, mode: os.FileMode(438), modTime: time.Unix(1495372037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xd0\x3d\x6f\xf2\x30\x14\x05\xe0\xdd\xbf\x22\x12\x73\x4e\xee\x97\xbf\x18\xdf\xfd\x9d\x3a\x74\x4e\x69\x28\x51\x81\xa0\x90\x0a\xe8\xaf\xaf\x0c\x05\xd2\xed\x3c\x3a\xbe\xd7\x96\x17\x8b\x45\xb5\xee\xc7\xee\xd4\x6e\xb7\xd5\xa9\xdf\x33\x55\xdd\x79\x1a\x5b\x57\x8a\xff\xc3\xd8\x55\xfd\x7e\x3d\x2c\xab\xcd\x34\x1d\x8e\xcb\xa6\xf9\xe8\xa7\xcd\xd7\x1b\x56\xc3\xae\x59\x8d\xed\xf7\xa5\xde\xb5\xe7\xe6\xb5\xdf\xbf\x0f\xa7\xe3\xcb\xe1\xf2\x6f\x3b\xac\x3e\xbb\xd1\x39\x56\x24\x02\x0b\xbc\x95\xcc\x14\xa1\x60\x49\x77\x08\x43\x88\x9c\x11\x62\x84\x88\x21\x3d\x72\x00\xd5\xcf\x2c\xde\x97\x86\x39\x81\x49\x11\x5d\x30\x18\xbc\x41\xc4\x05\x0f\x2f\x60\x2a\xf5\x0c\x59\x1f\x48\xa0\xfa\x99\xcb\xae\x22\x7f\x93\xfe\x42\xbc\xc0\xd4\x31\x19\xcc\x90\xae\x17\x5d\x25\xec\xc1\x16\xae\x2f\x65\x65\x88\x57\x04\x06\xd5\x33\x94\x9d\xac\x06\x8e\x04\x4e\x1e\x91\x1c\x87\x84\xa0\xe0\x84\x98\x1d\x67\x86\xa8\x80\x35\x97\xc1\x99\xca\xa4\x90\x21\x66\x70\x8e\xa0\x7a\x86\x5b\x17\x61\x01\x65\xf9\x9c\xd9\xc0\x36\x97\xfc\xe9\x54\xef\x12\x51\xe4\xdb\xc9\x90\xc0\xa1\xfc\xa5\xfd\x04\x00\x00\xff\xff\xb8\x7c\xb7\x40\xf0\x01\x00\x00")

func dataFirewallWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10ExtraTxt,
		"data/firewall/win10/extra.txt",
	)
}

func dataFirewallWin10ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/extra.txt", size: 496, mode: os.FileMode(438), modTime: time.Unix(1495297185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x96\xbd\x52\x25\x37\x10\x85\xf3\x79\x0a\xaa\x88\x39\xf4\x69\xfd\x6f\xe8\xdc\x91\x03\xc7\x18\xb3\xde\x5b\x66\xb9\x14\xe0\xc2\xf8\xe9\x5d\x47\x33\x9a\xd1\x04\x50\xfd\x4d\x4b\xdd\x52\xab\x7f\xee\xed\xed\xed\xcd\xf7\xcb\xdb\xd3\xe7\xc3\xf3\xf3\xcd\xe7\xe5\x85\x76\xf3\xfe\xfa\xb5\xe8\xf3\xaf\xd7\xb7\xa7\x9b\xcb\xcb\xf7\xeb\xb7\x9b\x1f\x1f\x1f\xaf\xef\xdf\xee\xef\xff\xba\x7c\xfc\xf8\xe7\x0f\x3c\x5e\x7f\xde\x3f\xbe\x3d\xfc\xf7\x75\xf7\xf3\xe1\xdf\xfb\xdf\x2f\x2f\x7f\x5e\x3f\xdf\x7f\x7b\xfd\xfa\xe5\xf9\xfa\xf8\xf7\xd3\xdb\xb2\x30\xa0\x64\x38\x2b\xc8\xb2\x53\x03\x1b\x27\x72\x9a\x88\x56\x90\x50\xeb\xe2\x01\xad\x20\x13\x0c\x65\x03\x96\x0a\x96\xb0\x91\x5b\x43\x5b\x55\x0d\x34\x90\xbb\xdc\x10\xe3\x04\x79\x07\x66\xfd\x0d\x72\xc2\xad\x5b\xa0\x39\x22\x3c\x85\x01\x4e\xc4\x21\x33\x25\x30\xda\x8a\x01\xac\x0e\x7a\x5e\xa2\x21\x37\x44\x03\x53\x11\x94\x0c\x82\x25\x0f\xd9\x11\x0f\x91\xd9\x3b\x14\xb8\x37\xd8\xdd\x21\x7b\x4a\xd2\x54\x19\x6e\x88\x4d\x40\x06\xd4\xa1\x61\x8f\x0a\x4a\xdd\x21\x82\x69\x5f\xe7\x8e\x58\x56\x88\x60\x6c\x70\xb7\x81\x1e\x09\x46\xae\x98\x40\x85\xa5\xcb\x05\x8c\x52\xdb\x8e\x89\xf0\xd5\xa6\xb3\x2b\x59\x7d\x49\x7d\x3b\x82\x23\x71\x49\xba\x45\xdf\x84\x10\x66\x4a\xed\x20\x45\x34\x75\xd4\x5b\xc5\xd2\x7d\x0c\x94\x0f\xfa\x8e\xfa\xcb\x3b\xb5\xd0\x9f\x66\x43\xf7\x00\x5f\xbd\xd4\x82\x6c\xca\x8b\x25\x47\x44\x64\xd0\x6c\x15\x3d\xc0\xee\x86\xa4\x68\x75\x39\xc5\xf1\x35\xc5\xf5\x6b\x42\x68\xfd\x96\x1e\x4c\x94\x1c\x9e\xe1\x75\x93\x69\xa6\x1d\xbb\xbc\xed\xe9\x77\xa2\x92\x67\xdb\xa2\x24\xd5\x29\x12\x52\x82\x5e\x2e\xd4\x0d\x64\xde\x36\x39\x46\x05\xeb\x90\xe3\x21\xd3\xea\x0c\x6d\x03\x3d\xbd\x8f\xed\xfd\x81\x39\x83\xcf\x10\x06\x04\x43\xda\xf7\x94\x8c\x36\xc0\xd7\xa8\xec\xf2\xb8\x4d\x82\x27\x3f\x34\xba\x90\x34\x2a\x88\xb6\x3e\x78\x2a\x67\xac\x27\xac\xed\x84\xf2\x37\xb0\x80\x81\x4b\x29\xc8\x45\x71\x51\x0d\xd0\x22\x7a\x32\x14\x94\xb0\x92\x4e\x5f\x90\xf3\x41\x2a\xfa\x9d\xa2\xe9\xb8\x03\xdd\x2b\xd2\x89\xdc\x7c\xc7\x50\xc0\xdc\x56\x54\x60\xc0\x96\x06\xb9\xca\x80\xdb\x5a\x95\xa4\x93\x03\x42\xd5\x73\x6e\x90\x94\xeb\xeb\x36\xa7\x21\xa2\x94\x03\x0c\xf5\x20\xa7\xc3\x63\xd8\x38\x22\x24\x78\x8c\x0b\x49\xb8\x7a\x88\xba\xc0\x4c\x94\xa5\x03\xd5\x56\x4e\x78\x6c\xcd\xca\xd5\x09\xf4\x24\x0c\xd4\x16\x95\xb9\xdd\x4d\x30\xeb\x54\x83\x6a\xa5\x11\x2c\x86\x60\x6b\x74\x26\x54\x60\x37\x54\x1e\xa7\x03\x69\xb9\xdb\x3d\x68\x35\x3c\x58\x25\x7b\xc2\x58\x4f\xd8\xf2\x84\xf5\xbc\xb8\x9e\x17\x57\x14\x3f\x2f\x9e\x57\x93\xf3\x39\x14\x83\xf9\x1c\x4c\x48\x93\x27\xb7\x93\x27\xb7\x93\x27\xb7\x93\x27\xb7\xd3\x29\x4b\xd5\x9c\x38\xb0\xf5\xb7\x1d\x58\x75\x87\xc3\x96\x87\xa4\xae\xa4\x54\xd5\xb4\xa8\x5c\xfd\x96\xad\x7f\xac\xca\x54\x54\x43\xbd\x9c\x0e\xb9\x1f\x7f\xa3\x3c\x69\xf2\xac\xd1\x38\xda\x55\x82\x59\xe7\x6b\x41\x6c\x14\x6c\x5a\x19\x6c\x5e\xa9\x73\xec\x3a\xc1\x49\x97\x67\xdd\xe4\x3d\x43\xff\x87\x5c\x94\x51\x36\xa8\xb1\xa7\xff\x0a\x4a\x0a\xd6\x78\xc6\x74\xc6\xb6\xa3\x66\x10\x8f\xbd\x4e\x4c\x4a\x8f\x3d\xd8\x1b\x69\x3a\xc9\x67\xae\x1a\xec\x1e\xfb\x70\xda\x88\x51\x47\x3d\x48\x65\xb4\x53\x71\x94\x6d\xe5\x3a\x11\x18\x56\x0a\xbd\x63\x67\x1e\x54\xe1\x21\x2c\x6c\x84\x07\xef\x4d\xc6\xee\x66\xea\xe1\xe8\x9c\xfb\x64\xaf\xb6\xa1\x7e\x51\xd4\x3e\xd9\x77\xa6\x8c\xb5\x8d\x9b\xe6\x49\xf2\x85\x4d\xef\xd1\xc7\x73\x37\x7d\x90\x4c\xab\xe3\xc5\x8c\xa2\x0e\x3b\x80\xd6\x87\xeb\x20\x95\xf3\xb1\x92\x2d\xaa\x7d\x88\xb2\x06\x62\xee\x0d\xc2\xd5\xec\xf5\x1b\xa5\xe8\xfc\x33\x79\x4a\xff\x07\x00\x00\xff\xff\x9f\x92\x6f\x3e\xa7\x09\x00\x00")

func dataFirewallWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10SpyTxt,
		"data/firewall/win10/spy.txt",
	)
}

func dataFirewallWin10SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/spy.txt", size: 2471, mode: os.FileMode(438), modTime: time.Unix(1495297189, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\xbd\x6e\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x12\x33\xce\xd9\x3e\xdf\x07\x63\xf7\x4e\x1d\x3a\xa7\x10\x4a\x54\x20\x28\x04\x51\xfa\xf4\xd5\xf5\x4a\x39\x77\xf3\x4f\x3e\xc7\xd6\x5f\x59\x2c\x16\xcd\x76\x98\xfa\x6b\xb7\xdf\x37\xd7\xe1\x88\xb6\xb9\x9c\x36\xdd\xdc\x9b\xdc\x79\x1e\xa7\xbe\x19\x8e\xdb\x71\xd5\xec\xe6\xf9\x74\x5e\xb5\xed\xfb\x30\xef\x2e\x6f\xb0\x1e\x0f\xed\x7a\xea\xbe\x6e\xcb\x43\xf7\xd9\xbe\x0e\xc7\xcd\x78\x3d\xbf\x9c\x6e\x4f\xfb\x71\xfd\xd1\x4f\xc6\x20\x03\xda\x00\x0e\xc4\x56\x35\x19\xca\x35\x03\xc6\x04\x48\x5e\x51\x82\x66\x34\x5e\x40\x04\x90\x23\xd8\xe5\xa3\x26\x91\x7b\xc7\xf3\xa3\xe3\xf9\xa7\x83\x8c\x40\xc2\xc0\x5c\x56\x3b\xc0\x60\x41\x10\x30\x06\xcd\xa8\x98\xd4\x63\x72\x5e\x33\x68\x56\xb3\x0c\x94\x6a\x71\xf5\xa1\x7c\x78\x85\x72\x5f\x21\xa2\x80\xb7\x9a\xf4\xa0\x17\xb5\xa5\x38\x69\x0b\xfe\x33\x1b\x94\x50\x62\x62\x20\xeb\xee\x24\x67\x21\xa6\x5a\x44\xb6\xd0\x43\x08\x39\x55\xa5\x54\xcb\xa9\x97\x0e\x95\xd4\x9c\xfb\x9b\x4b\x1e\xc4\xd5\x88\x15\x90\xd8\x60\x42\x20\x26\x88\x39\x32\xa5\x58\x2b\x07\x54\x89\x7e\xe5\x20\x10\x60\x64\x4d\xaf\x19\x15\x93\x35\x94\xff\x41\x0f\x88\x2e\x6f\xa9\xe4\xf1\x3b\x00\x00\xff\xff\x56\x25\xf5\xaf\x07\x03\x00\x00")

func dataFirewallWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin10UpdateTxt,
		"data/firewall/win10/update.txt",
	)
}

func dataFirewallWin10UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win10/update.txt", size: 775, mode: os.FileMode(438), modTime: time.Unix(1495297192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\xb1\x12\x82\x20\x1c\x07\xe0\x9d\xa7\xe0\xce\xb9\x1f\xfc\x11\x14\x1d\xdb\x9b\x1a\x9a\xc9\x30\xb9\x54\x3c\xa4\x53\x7b\xfa\xae\xbb\xc6\xef\x2b\x8a\x82\xf7\x21\xf9\xcd\x8d\x23\xdf\xc2\x5c\x73\xbf\xe7\xe4\xd8\xef\x2f\x31\x79\x1e\xe6\x3e\xb6\x7c\xc8\x79\x59\x5b\x21\x9e\x21\x0f\xef\x3b\xba\x38\x89\x2e\xb9\xcf\x71\x9a\xdc\x2e\x6e\x61\x7e\xc4\x6d\xbd\x2e\xc7\x79\x8c\xdd\xcb\x27\xc6\xa8\x84\x95\x20\x05\xa3\x99\x96\x20\xb2\x20\x59\xa2\x66\x95\x81\x51\x68\x2c\x54\x49\x7f\x90\xb4\x20\xa3\x99\x92\x35\x74\x05\x6a\x34\x48\x7f\x03\x00\x00\xff\xff\xf4\xb7\xa7\xa5\x98\x00\x00\x00")

func dataFirewallWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7ExtraTxt,
		"data/firewall/win7/extra.txt",
	)
}

func dataFirewallWin7ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/extra.txt", size: 152, mode: os.FileMode(438), modTime: time.Unix(1495297171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xd1\xbd\x8e\x1b\x31\x0c\x04\xe0\x5e\x4f\xb1\x80\xeb\x8c\x35\x24\xf5\xc3\x2b\xd3\xa7\x4a\x91\xda\x71\x7c\xb9\x45\x7c\x5e\x63\xed\xc0\x71\x9e\x3e\x90\xe3\xdb\x9f\x42\x80\x3e\x4a\x10\x07\xd4\x66\xb3\xe9\x5e\xfb\xf1\x70\xdb\x1d\x8f\xdd\xad\x3f\x95\xee\x72\xbe\x87\x56\xfd\x32\x8c\x87\xae\x3f\xbd\x0e\x2f\xdd\xdb\xf5\x7a\xbe\xbc\x6c\xb7\x3f\xfb\xeb\xdb\xef\xef\xd8\x0f\xef\xdb\xfd\xb8\xfb\x7b\xff\xf4\xbe\xfb\xb3\xfd\xd6\x9f\x7e\x0c\xb7\xcb\xd7\xf3\xfd\xf3\x71\xd8\xff\x3a\x8c\x21\x50\x51\x1c\xa2\x8e\xec\xc1\x22\x4a\x81\x48\x86\xd8\x4a\x29\x36\x91\x15\x8c\x19\xd4\x18\x12\x41\x23\x54\x90\x18\x92\x80\xd9\x20\x16\x91\x7c\x16\x21\x31\x3d\x58\x2a\x68\xa5\x5d\x98\x98\x08\xa1\x4c\x6c\x2b\x4f\x72\x05\x67\x8a\x28\x44\x1f\xaa\x05\x39\x82\xb1\x84\x6c\x30\x24\x83\x24\x5d\xec\x2d\xe4\x84\x94\x60\x06\xc6\xba\x84\x3f\x41\x2a\x28\x4b\xe8\x13\x92\x04\x85\x0b\xf8\xf2\x84\x1e\x43\xce\x20\x1d\x6c\x0f\xa6\xb2\x66\x5d\xb1\xfa\x8a\x1e\x03\xa3\xc1\x5a\xb7\x82\x9c\x67\x39\x84\x1f\x12\xa9\x48\xba\x94\x44\x99\xa8\x05\xcc\x1e\x48\x42\x84\x10\x6f\xc9\x17\x6a\x83\xa0\x1a\x58\x22\x34\xb6\xea\xc4\x36\x6b\xcb\x6b\x96\x35\xeb\x4c\x85\x78\x68\x39\xc9\x02\xd1\xd4\x3e\x86\x4e\x88\xca\xff\xc0\xad\xd1\xca\xf6\x74\x81\xc4\x0a\x4a\xfe\x17\x00\x00\xff\xff\xd0\x75\xa6\xe6\xab\x02\x00\x00")

func dataFirewallWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7SpyTxt,
		"data/firewall/win7/spy.txt",
	)
}

func dataFirewallWin7SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/spy.txt", size: 683, mode: os.FileMode(438), modTime: time.Unix(1495297175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x31\x6f\x83\x40\x0c\x05\xe0\xfd\x7e\x05\x12\x73\x1e\x67\x1f\xf6\xdd\x65\xec\xde\xa9\x43\x67\x4a\x48\x83\x4a\x00\x11\x22\x9a\xfe\xfa\x0a\x29\x4a\xb8\x6c\xfe\xf4\x24\x5b\xf2\xcb\xf3\x3c\x3b\xb6\x53\xb3\x54\x5d\x97\x2d\x6d\xef\xb3\xeb\x78\xa8\xe6\xc6\xac\xc1\xfb\x30\x35\x59\xdb\x1f\x87\x7d\x76\x9a\xe7\xf1\xb2\x2f\x8a\xef\x76\x3e\x5d\xbf\x50\x0f\xe7\xa2\x9e\xaa\xbf\xdb\xee\x5c\xfd\x16\x9f\x6d\x7f\x18\x96\xcb\xc7\x78\x7b\xeb\x86\xfa\xa7\x99\x8c\x21\x07\xb2\x1e\x25\xc4\x1a\x5e\x67\x07\x0a\x11\xc4\x92\x52\x13\x8a\x4f\x19\x8c\x0a\x44\x40\x2e\x80\x88\x13\x95\x5b\xb1\x6e\x15\x1e\x52\x07\x66\x4a\xc4\x86\x5c\x09\xf2\x16\x42\xa0\x68\x9f\x74\x70\x1b\x05\xd8\xdd\x06\x2c\xf2\xc8\x88\x04\xfa\xdc\x43\x2a\xe0\x32\xbc\x38\xa6\x16\x7a\xb1\x33\x24\x1e\xa2\x88\x0a\x62\x67\x28\x12\xd8\x31\xc2\x7a\x6e\x2b\xb5\x89\xf8\xae\x12\x9e\x41\xc1\xa5\xd4\x94\x21\x61\xb4\x86\xd7\x52\x74\x7d\x1f\x24\xfc\x07\x00\x00\xff\xff\xce\x94\x7c\x50\xfd\x01\x00\x00")

func dataFirewallWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin7UpdateTxt,
		"data/firewall/win7/update.txt",
	)
}

func dataFirewallWin7UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win7/update.txt", size: 509, mode: os.FileMode(438), modTime: time.Unix(1495297180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc9\xb1\x6e\x83\x40\x0c\x06\xe0\xdd\x4f\x81\xc4\x9c\x1f\xdb\x67\x1f\x90\xb1\x7b\xa7\x0e\x9d\x29\x25\xcd\xa9\x84\x8b\x2e\x54\x24\x7d\xfa\xaa\x53\x18\x3f\x7d\x75\x5d\x57\xa7\x54\xa6\x6d\x98\xe7\x6a\x4b\x4b\x27\xd5\x74\x5f\xcb\x40\xff\xf1\x9a\xcb\x54\xa5\xe5\x94\x8f\xd5\x79\x5d\xaf\xb7\x63\xd3\x7c\xa5\xf5\xfc\xf3\x81\x31\x5f\x9a\xb1\x0c\xbf\x8f\xc3\x65\xb8\x37\xef\x69\xf9\xcc\xdb\xed\xed\xfa\x78\x99\xf3\xf8\x3d\x15\x22\x09\xe8\x18\xa2\x70\x23\x63\x88\x74\x10\x0e\x68\x9f\x88\x90\xc0\x14\x0d\x06\x37\xa8\x52\x74\xb8\x42\xb8\x83\xf6\x3b\xf8\x1e\xe2\x81\x24\x08\xd4\x03\xa2\x80\x0f\x3b\xa8\x3b\x29\x1b\xda\x1e\xd2\xb7\x50\x66\x52\x6e\x61\x11\xd2\x1b\xc4\xfe\x02\x00\x00\xff\xff\xb5\x71\xd3\x2f\xeb\x00\x00\x00")

func dataFirewallWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81ExtraTxt,
		"data/firewall/win81/extra.txt",
	)
}

func dataFirewallWin81ExtraTxt() (*asset, error) {
	bytes, err := dataFirewallWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/extra.txt", size: 235, mode: os.FileMode(438), modTime: time.Unix(1495297196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xd1\x3f\x8f\xda\x40\x10\x05\xf0\x7e\x3f\x85\x25\xea\x3c\xf6\xcd\x9f\xfd\x73\x65\xfa\x54\x29\x52\x13\xc2\xe5\xac\x70\x18\x01\x11\x21\x9f\x3e\x5a\xc3\x61\x5b\x29\x2c\xbd\x9f\xb5\xbb\x33\x9a\x59\xad\x56\xdd\x6b\x7f\xda\x5d\x37\xfb\x7d\x77\xed\x0f\x85\xdd\xf9\x78\x0b\xed\xf7\x97\xe1\xb4\xeb\xfa\xc3\xeb\xf0\xd2\xbd\x5d\x2e\xc7\xf3\xcb\x7a\xfd\xb3\xbf\xbc\xfd\xfe\x8e\xed\xf0\xbe\xde\x9e\x36\x7f\x6f\x9f\xde\x37\x7f\xd6\xdf\xfa\xc3\x8f\xe1\x7a\xfe\x7a\xbc\x7d\xde\x0f\xdb\x5f\xbb\x53\x08\x54\xe4\x0a\xd1\x8a\x54\x1b\x0a\xe1\x15\x62\x12\x44\x51\x0b\xac\x82\x36\xe6\x3a\x66\x61\xb0\x88\x9c\x21\x92\x20\x56\xe7\xf2\x18\x9c\xa0\x11\x2a\x70\x06\x17\x30\x19\xc4\x22\xbc\x4e\x22\x24\xfa\xc8\x5c\x40\xcb\xed\xc0\x93\x4e\x08\xe5\xc9\xf6\xa5\xa7\xaa\x82\x13\x45\x14\xa2\xa3\x4a\x46\x8a\x60\xcc\x21\x19\x0c\x92\xe1\xf1\x1e\xdd\x20\xae\xb3\x6c\x21\x39\xdc\x41\xb6\xc7\xe6\x90\x39\xf4\x01\x71\x81\xcd\x51\xe7\x60\x8d\x33\x49\x94\x90\x12\xc8\x36\x33\x03\x3d\x2f\x59\x16\x2c\x75\xc1\x3a\x36\x2c\xaa\xe3\x94\x58\xca\xc4\x04\xc6\x12\x18\x0d\xd6\x3a\xcb\x48\x69\x52\x85\xf0\x43\xa2\x19\x6c\x7b\x7c\x50\x0a\x5c\xe7\x6a\x1d\x52\x0d\xcc\x11\x1a\xff\xa7\x2e\x69\x0b\xb6\x3a\xad\x00\xd3\x58\x96\xb4\x87\x33\x44\xbd\xed\x89\x9e\xc7\x01\xaa\xde\x2f\x37\x26\xb0\x1a\xb2\x2c\xa4\x0b\x59\x60\x25\x44\xe5\xfe\x6e\x91\x85\xdb\xfa\x96\xfe\x38\x9f\x21\xb1\x80\x92\x1e\xae\xf0\x08\x96\xb9\x72\x9e\x24\x60\x8c\x13\x0d\x2e\xff\x02\x00\x00\xff\xff\x1c\xa7\x87\x2f\x54\x03\x00\x00")

func dataFirewallWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81SpyTxt,
		"data/firewall/win81/spy.txt",
	)
}

func dataFirewallWin81SpyTxt() (*asset, error) {
	bytes, err := dataFirewallWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/spy.txt", size: 852, mode: os.FileMode(438), modTime: time.Unix(1495297199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFirewallWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\x31\x6f\xc2\x30\x10\x05\xe0\xdd\xbf\x22\x12\x33\x2f\xbe\x3b\x9f\xed\x30\x76\xef\xd4\xa1\x73\x0a\xa1\x44\x05\x82\x42\x10\xa5\xbf\xbe\xb2\x68\x89\xcd\xe6\x4f\x2f\x4f\x49\x9e\xbc\x58\x2c\xaa\x6d\x3f\x76\xd7\x76\xbf\xaf\xae\xfd\x31\x52\x75\x39\x6d\xda\xa9\x33\x29\x79\x1d\xc6\xae\xea\x8f\xdb\x61\x55\xed\xa6\xe9\x74\x5e\xd5\xf5\x67\x3f\xed\x2e\x1f\x58\x0f\x87\x7a\x3d\xb6\x3f\xb7\xe5\xa1\xfd\xae\xdf\xfb\xe3\x66\xb8\x9e\xdf\x4e\xb7\x97\xfd\xb0\xfe\xea\x46\x63\x48\x40\x36\xc0\x41\xad\xe1\x74\x16\x50\x6c\x40\xac\x25\x7d\x41\x0d\x25\xa3\xf1\x0a\x55\x90\x44\xd8\xe5\x7c\x66\xd5\xff\xc4\xcb\x9c\x78\xc9\x12\x76\x0c\x56\x67\x48\x08\xac\x02\x72\x20\x15\x43\xe2\x40\xc1\x42\x09\x76\x99\x21\x15\x1f\x14\x70\x93\x4b\xec\xac\x98\xf7\x62\xd1\x23\x52\xa8\x2f\xe8\x6d\x49\x9e\xe9\xd3\x37\xc6\x27\x37\xa5\x95\x9e\x2c\x86\x34\xdc\x7f\xcf\x22\x36\xb9\xd2\x98\x19\x99\xed\x9d\x1e\x21\xa4\xd5\x0a\x35\xb9\x5c\xf1\xa4\xa3\x42\x45\xcf\x3d\x7a\x8d\x47\x1a\x77\x46\xcc\x40\x2c\xb9\x34\x18\x6a\x08\x2c\x8c\x98\xf6\xcc\x95\x06\xca\xc4\x7f\x72\x08\x0c\x8a\x52\x32\x1a\x4e\x97\xca\x83\xc8\xa5\x37\x66\xf2\xf4\x1b\x00\x00\xff\xff\x36\x6e\xda\x6d\xcc\x02\x00\x00")

func dataFirewallWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataFirewallWin81UpdateTxt,
		"data/firewall/win81/update.txt",
	)
}

func dataFirewallWin81UpdateTxt() (*asset, error) {
	bytes, err := dataFirewallWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/firewall/win81/update.txt", size: 716, mode: os.FileMode(438), modTime: time.Unix(1495297201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xdb\x30\x0c\xbd\xf7\x2b\x02\xf4\x6c\xa6\x69\xb7\x62\xe8\x71\xf7\x61\x87\x1d\x76\x56\x28\xda\x26\x22\x91\x9a\xc8\xd4\x71\xbf\x7e\x70\x9a\xb6\xf3\x62\x63\x83\x6f\x7c\xcf\x7c\xd2\xe3\x13\x6f\x6f\x6f\x37\xbd\x9a\xdb\x66\x60\xd9\xdd\x6d\xe8\xe4\x35\xdc\x4c\xd5\x6f\x5a\x69\xc3\xd2\xea\xd3\xa6\x77\x2f\xf6\xb4\xdd\x76\xec\xfd\x71\x0f\xa8\x79\x8b\x35\xbc\x8c\x4d\x0e\xa7\xed\x4f\x96\xa8\x83\xfd\x28\xe3\xd7\xa4\x78\xa0\x7a\x73\x73\x07\xe7\x6f\x13\xc4\x06\xaa\x06\x99\xb1\xaa\x69\xeb\xd3\xaf\x1f\x68\x29\x06\x76\x18\x0b\xcd\xcb\x2f\x0f\x8f\xbb\x2f\xbb\x47\x78\x56\xc8\x46\x28\x11\x84\xfc\x0f\xf8\xf3\xee\xfe\xe1\xe1\xd3\x0a\xbc\x4f\xba\x87\x81\x82\xf7\x54\x57\x74\x31\x48\x1c\xb1\x1e\xad\x37\x8d\x01\x0e\x2c\xdd\x1c\x8f\x02\xa8\xe2\x24\x0e\xa5\x6a\x04\xcc\x06\xd9\xe4\x8a\xa4\x42\xa2\x4e\x33\x7d\xec\x95\x91\xd6\x94\x17\x40\x10\x0b\x8e\xf3\x1e\x89\x27\xed\x41\x0c\x86\x57\x73\xe7\x5d\xce\x70\x63\xd0\x05\xa7\x21\x8c\x90\xc9\x8c\xa4\xa3\x0a\x89\x9f\x69\x81\x8b\x2a\x2d\x77\x50\x82\x59\xd1\xea\x33\xb1\x48\x25\xe9\x08\xe6\xc1\x19\x21\x1c\x42\x0e\xec\x84\xbd\x68\xd2\x8e\x69\x2e\x1d\xe9\x79\xba\x40\x38\x7a\x0f\xa7\xbd\x9e\xae\xf4\x62\x8e\x90\xc9\x83\x51\x9d\x98\x6b\xa3\x8f\x32\x39\xda\xba\xa0\xf1\x0c\x68\x89\xe2\x3e\xe0\xe1\xe3\xbf\xa6\xd7\x3e\x2f\x73\x8c\x42\xc5\x7e\x45\xe2\x9d\xb5\x64\x61\x77\xed\x14\xe7\xae\xb1\x26\x9b\x34\xd3\x50\x5e\x7d\x78\xa1\x79\xb8\x58\x8c\x23\xd5\x32\x25\x36\xe9\x31\x86\x52\x66\x78\x62\x24\xb1\x29\x4f\xb9\xac\x1c\x6b\x32\x55\xae\xd5\x33\xf4\xea\x39\x70\x9a\x57\x97\x2c\xd2\xb6\x65\xa4\x4b\x46\x96\x45\x54\xde\x70\x6b\x4f\x90\xed\x1d\x28\x95\x91\x12\x9b\x2f\xbc\xbb\x5f\x47\xaa\xe3\x47\xe0\xeb\x5a\xf3\xff\xca\x9d\xdd\xc1\x7d\x8e\x32\x73\xc7\xbe\x2f\xd4\x2e\x23\xfc\xeb\x75\x19\xb9\xb3\x74\xd6\x98\xa5\xe5\xa0\x5d\xf2\x7a\xdd\xd0\xb5\x52\xc3\x39\x74\x64\x60\xcd\xca\x15\x26\x12\xc5\x8e\xda\x08\xd1\x4e\xeb\xd3\x72\x4e\xd4\x5c\xb2\xfc\x8f\xad\xe2\x9c\x69\x31\x6b\x7e\xb8\x87\x92\xfc\xea\x8e\x47\x5e\x18\xc2\x10\x71\xed\x2c\x83\x4d\x4b\x09\xce\x5b\x73\x85\x31\x0c\xe7\x57\x85\x2a\x42\xe8\x4e\xb6\x8c\xbf\x45\xea\x77\x00\x00\x00\xff\xff\xcb\xa1\xc7\x76\xfc\x05\x00\x00")

func dataHostsWin10ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10ExtraTxt,
		"data/hosts/win10/extra.txt",
	)
}

func dataHostsWin10ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin10ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/extra.txt", size: 1532, mode: os.FileMode(438), modTime: time.Unix(1495297214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x99\xcf\x72\xe3\x2e\x12\xc7\xef\xf3\x14\xa9\x9a\xb3\x3b\x20\x39\x8e\x3d\xc7\xbd\xef\x69\x0f\x7b\x46\xd0\xb6\xa8\x48\x40\x68\x2c\x59\xfb\xf4\x5b\xb2\x95\x3f\xb2\x10\x26\xbf\x99\xa9\xa9\x9a\xd2\xf7\x03\x34\xdd\x4d\xd3\x24\xbf\x7f\xff\x7e\xaa\x2d\x05\x7a\xea\xb5\xe1\xec\x89\xdc\xf0\x6b\xfc\xf6\x6f\xeb\xf1\x49\x9b\xa3\xfd\xf3\x54\x87\xe0\xe8\xcf\xf3\xf3\x49\x87\xfa\x5c\x81\xb4\xed\xb3\xf4\xe2\x7f\xc3\xa6\x15\x97\xe7\xff\x6a\xa3\x6c\x4f\xff\x71\xc3\xbf\x1a\x2b\xdf\xd0\xff\xfa\xc5\xe0\xfa\xf7\x49\x6c\x18\x63\x1c\xc4\xa6\x25\x54\x27\x04\x83\xe1\x5e\x53\x72\x55\x2c\x12\x03\xcb\x84\xb6\x4d\x68\x2f\x09\x6d\x97\xd0\x5e\x13\xda\x3e\xa1\x1d\xd6\x35\xce\x12\x5a\xc2\x69\x7c\xd5\x2f\xb1\x8f\x20\x14\x71\x68\xc9\x8c\x51\x9b\x7f\x2e\xa0\x25\xa1\x68\xc9\x17\x11\xde\x0b\xb5\xfc\x2a\xcb\xc8\xb7\xa0\x3b\x1d\x06\xe8\x6f\x69\x31\x17\x95\xc1\xcb\xf9\x6e\x45\x65\x2e\xf7\x14\x2d\xa7\xbd\xed\x62\x61\x6e\x74\x73\x5a\x39\x02\x11\x54\x1b\xe6\xdf\xdf\xc4\x46\x2a\xb3\x31\x04\x42\x05\x94\x35\x28\xfc\x12\xbd\x17\x03\x67\x7c\xe3\xbc\x55\xa0\x2c\x28\x72\xd0\x3a\x68\xb5\xf4\x96\xec\xf1\x6e\xaa\x1b\x5d\xfc\x88\x2e\x7f\x44\x6f\xf3\xe8\x2a\x1e\xe0\x6a\x2d\xc0\x55\x34\x92\x95\x36\xa7\xab\xdb\xe3\x6b\x34\x65\xc9\xf8\x46\x00\x57\xbe\x8b\x29\x72\x55\x39\x45\x14\xc3\x4b\xb6\xdd\xe0\x8a\xb2\x8b\xae\x73\x53\xd6\xc7\x44\xd7\x29\xaa\x8d\xb4\xfe\x5a\x81\x9c\x06\x37\xfe\x27\x42\x95\x2e\x87\xfa\x98\xab\x4c\x51\xc3\xaa\x9f\x86\x55\x3f\xdd\x94\xd8\xce\x08\x08\x7d\xa7\xcd\x69\x43\xc3\xfc\x84\xc8\x48\x76\xcb\x45\x50\x65\xaa\xc2\x4a\x01\x01\x1b\x6c\x31\xf8\x61\x25\xec\x52\xc8\x1a\x41\x89\x20\x5a\xe1\x43\xf4\x40\x4b\x65\x62\xa6\x28\x2a\x76\x20\x5a\x3a\x40\x4b\x28\xcd\x7c\x61\x45\xdb\x97\x03\x34\x72\x80\xa6\x31\xfd\xbd\x76\xd8\xbd\x40\x63\x4d\x44\xab\xf9\xe3\x38\x7d\x42\x45\x12\x5a\x0b\xc6\xa4\x44\x82\x31\x29\x91\x34\xbb\x2a\xc5\xea\x6c\x45\x74\x36\xdb\x3a\x11\xf0\x22\x6b\x61\x4e\x08\xb2\xb1\x67\x25\x9c\x9b\xef\x77\xc6\x70\x08\x5e\x1c\x8f\x5a\xb6\xc2\x88\x13\xfa\x3b\xd4\x3b\xa0\xb0\x76\x7c\x47\x19\x2f\x01\x5a\xd2\x41\xa8\x23\xc1\xa9\xa9\x94\x19\xab\x43\x1c\x77\xd9\x65\x50\x12\x87\xde\x49\xe8\xd8\x98\x08\xdf\x4d\x52\x55\x29\xde\xcf\x91\xdc\x50\x55\xd9\x1b\x2a\x18\x1f\xff\x40\x6f\x28\x9a\x57\xaa\x7a\x49\x69\x24\x6b\xce\x38\x67\x6c\x5f\xe6\x71\x07\xfe\x9a\xc3\xf1\xa2\x4c\xda\xf4\xc9\x95\xe5\x36\x8b\x7b\x49\xef\xf1\x93\x7b\x2d\x0f\x59\xdc\x9e\x97\x79\x5c\x9e\x5f\xf8\x81\xe7\xed\xe3\x90\x65\xdf\xf8\x2f\x67\x3e\xce\x0a\xb6\xcb\xe2\xca\x22\x67\x1f\x23\xb7\xcf\xe2\xb6\x2c\xc7\x7f\x9c\xed\x8a\x3c\xfb\x76\x59\x79\xc0\xd9\xeb\x96\x65\x71\x7b\x9e\xcb\xe5\xd9\xb7\x2f\x72\xf2\x6f\xe4\x8a\x4c\xee\xb1\x9f\x4b\xb6\x2f\x5e\xf9\xe3\xf9\x4a\x76\xe0\xbb\x8c\x73\x39\x72\xaf\xfc\x71\x1e\x94\x9c\xf1\x6d\xc6\x79\x2b\x39\x2b\x78\x8e\x7d\x9c\x15\x3b\x96\xca\xfb\xdd\x95\x2b\xd8\x81\xbd\x24\xe3\xf6\xc5\xed\x93\xf6\x7d\x72\x63\x65\xcb\xe2\x76\x19\xf9\x3c\xc6\xe3\x41\xad\xfd\xe4\xb6\x19\xe7\xb2\x64\x87\xa2\x48\xfa\xe5\xa5\x37\xc4\x55\xd6\x06\x38\x4b\x05\xf6\x8b\xdb\xa6\x02\x86\x1d\x74\xda\x87\xb3\x68\x50\xf8\x50\xcf\x2f\xa2\xe3\xc3\x3e\x47\x69\x71\x32\x96\x82\x96\x04\x74\x76\xce\xfa\xb0\x42\x62\xac\xf1\x1a\x1b\x9c\xa4\x09\x78\x86\xce\xfa\x80\x97\x6b\x2f\xb5\x32\xf5\xb1\xc1\xcb\xa2\x83\x3b\x2d\xbf\xa0\xcd\xbb\x9a\x4f\x68\x3b\xf4\x79\x6c\xbd\x7c\x3f\xd4\xcb\x37\xa0\xde\x90\x29\x1e\xb7\x60\xdf\xb0\x54\x13\xa6\xf9\xad\xbb\x95\x48\x40\x56\x6a\xd1\xac\x18\xf7\x08\x04\x43\x22\xc8\x99\xc3\xb5\x39\xa2\x47\x23\x11\x1a\x2b\x45\xd0\x63\x3b\xa9\xbb\x79\xff\xfb\xd6\x65\x77\x39\x4d\xc5\xa1\xef\x7b\x68\x09\xc4\x9b\x50\x66\xfe\xa0\xba\xce\xec\x63\x6f\xd6\x86\x8a\x1e\x2b\xf0\xa8\x5a\x6b\x14\x5c\xbb\xb4\xf8\x0a\x2d\x2c\x5f\xc1\xad\xad\x74\x83\xe0\xb4\x43\x10\x5e\xaf\xe5\x4d\xa4\xb5\x6f\xc9\x04\xa4\xb0\xfa\x7a\xb8\xbd\xc1\xed\xd8\x4d\xa2\x70\x8e\x6e\xce\x59\x10\xfe\xdc\x60\x1a\xb3\x19\x8f\x88\x04\x13\x89\x9c\x35\x48\x18\x82\x36\x27\xda\x54\xa6\x80\x71\xd4\x47\xf4\x1e\x8f\x90\xc3\x4f\x47\x8c\x7d\xe6\xcf\x46\xd4\x6f\x39\x6b\x38\x8f\x70\xb4\x36\x38\xaf\x4d\x70\x1e\x95\x96\x73\xb7\x38\x8f\x9d\xc6\x7e\x91\x33\xe3\xe3\x7c\xe1\xe7\xd8\x8b\x7d\x9c\xd3\x8f\x96\x88\xcf\xd3\x11\x0f\x80\xc7\xb1\xa0\x11\xf4\x48\x90\x51\x0c\x49\xd6\xd8\x8a\xef\x93\x45\x72\x9e\x50\x9e\x3d\x46\x92\x76\x12\x8e\x8d\xa0\x3a\x88\xe6\x4d\x9b\xd3\x9d\x3e\xd9\x9a\x6b\xcd\x87\xdb\x49\x18\x55\xd9\x64\x05\xfd\x64\x7b\x6d\x72\xb8\x1b\x93\x7e\x0b\xcd\xd9\x15\xc6\xac\x3d\x27\x27\x25\xf2\x00\x9c\x94\xc8\x73\x92\xdc\x60\x30\xac\xda\x73\x55\x45\xb3\x76\x41\xdd\x74\x3c\x7b\xeb\xf0\x41\x08\xdf\xdb\xac\x00\xbc\xb7\x7f\xc3\x44\x8e\x06\x51\xbf\xcc\x70\x0a\xd6\xa3\x14\x41\x34\xf6\xe4\xb1\xfb\xa8\xda\xd7\xcf\xef\x67\xd1\xe8\xb0\xba\xf8\xd9\x77\x38\x40\x2f\x02\x59\xb3\xc2\x04\x06\x44\x0d\x88\x37\x50\x83\x11\xad\x96\x10\xf4\x58\xdb\x56\x6f\xec\xaf\x01\x8f\x40\x6c\x50\xda\xb6\x15\x46\x3d\x74\x53\x06\x1b\x71\xd7\x17\x29\x9c\xc3\x0b\x54\xe3\x91\xca\x01\xfe\x6c\xb7\x65\x04\x5a\xb7\xed\xa6\x9f\xfd\x5a\x21\x09\x74\xc4\x8f\x9f\x42\x50\x2d\xdc\xb8\x4e\xf2\xde\xec\x38\x9b\x1a\x9f\x6f\x47\xf2\x61\xe9\x8c\x8e\x8a\xcf\x8f\x9e\xc6\x2c\xa9\x87\xca\x6b\x75\xed\x35\x6a\xf4\xf3\xc4\xba\x16\xd9\x65\xcf\x36\x2d\x90\x77\xc5\x4c\x70\xde\xed\x32\xc1\x79\x17\xcb\x04\xe7\xdd\x29\x13\x9c\x51\x09\xff\x81\xd3\xf3\x1c\xfe\xad\x8b\x4d\xd7\xcd\x59\xbf\x9b\xb9\x7a\x6a\xe5\xe9\x78\x2f\xea\x46\xf2\xd8\x4f\xa2\x73\xf8\xf0\x6c\x4e\xe8\xdf\x61\x91\x9d\x8d\xfd\x5f\xc6\xee\xf2\x2e\xc3\xeb\xaf\xe7\x40\xbb\x6e\xb7\x06\x5c\x9b\xd4\x8f\x7e\xf0\xff\x01\x00\x00\xff\xff\xdc\x65\x80\x67\xd8\x1b\x00\x00")

func dataHostsWin10SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10SpyTxt,
		"data/hosts/win10/spy.txt",
	)
}

func dataHostsWin10SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin10SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/spy.txt", size: 7128, mode: os.FileMode(438), modTime: time.Unix(1495297219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin10UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x3f\x6f\xc2\x30\x10\xc5\x77\x3e\x45\x24\x66\x2e\x76\x40\x55\x61\xec\xde\xa9\x43\x67\xe3\x3f\xc1\xc2\xb1\xa3\xdc\x85\x34\xfd\xf4\x15\x85\x52\xa2\xd6\xb1\x51\xb6\xdc\xef\xde\xbd\x7b\xe7\xe5\x72\x59\x1c\x02\x12\x16\x83\xf5\x9c\x15\x7d\xab\x04\xe9\xc5\xf9\xf7\x6b\xe8\x74\x61\xbd\x09\xbb\xe2\x40\xd4\xe2\xae\x2c\x6b\x4b\x87\x7e\x0f\x32\x34\xa5\xec\xc4\xe7\xb8\x6a\xc4\x47\xf9\x6e\xbd\x0a\x03\xbe\xb5\xe3\x8b\x0b\xf2\xa8\xbb\xc5\x82\xc1\xf7\x57\x30\xc6\x2a\x56\xad\x38\x38\x18\x2e\xd4\x45\xff\xac\x30\x81\xe4\x3a\x03\x32\x2a\x09\xf1\xcd\xd6\xa4\xa1\xe7\x2d\x4f\x42\x15\x7b\x4a\x1b\xaf\xb8\x62\x09\x48\xf4\xa0\xc2\xe0\x5d\x10\x6a\x9e\x3a\x6d\x72\x40\x49\x4e\xcd\x8d\x53\x16\x5b\x27\x46\x29\x48\xb8\x50\x43\xd3\x42\x63\x65\x17\x30\x18\x9a\x72\x0e\x94\x76\xf6\xa4\xbb\x71\x06\xfa\xf1\x93\x28\xc7\xed\xe8\xe6\xec\x16\x23\x02\x46\x57\x70\x6d\x7a\x0c\x00\x71\x14\xca\x23\x78\x4d\x77\xec\xfa\x77\x25\x85\xed\x9f\xb5\xc0\xa3\x20\x19\xef\x89\xc6\x60\x6a\x50\x08\x7b\x9e\x73\x1f\x53\x67\x1e\xf2\x36\x6a\x8a\xdc\xbb\x43\x87\xf3\xf1\xc4\x80\xff\xe2\x41\x12\x84\x8f\xe4\x79\x6d\xe0\xf1\xf3\xdd\x24\xa3\x04\xb9\x1e\xb2\x5e\x5a\x5e\x66\xa9\xca\xb5\x10\xba\xfa\x2b\x00\x00\xff\xff\x84\x44\x46\xa9\xd7\x04\x00\x00")

func dataHostsWin10UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin10UpdateTxt,
		"data/hosts/win10/update.txt",
	)
}

func dataHostsWin10UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin10UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win10/update.txt", size: 1239, mode: os.FileMode(438), modTime: time.Unix(1495297222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x4f\xc4\x30\x0c\x85\xf7\xfe\x8a\x48\x9d\x71\x11\x0b\xd2\x8d\xec\x4c\x0c\xcc\x39\xc7\x6d\x2d\x12\xbb\x8a\x7d\xcd\x1d\xbf\x1e\x1d\x48\x48\x85\x2b\x28\xdb\xf7\xbd\x3c\x59\xaf\xef\xfb\x30\xab\xb9\x85\xc6\xf2\x18\xe8\xec\x35\x76\x57\xf8\xac\x95\x02\xcb\xa8\x87\x30\xbb\x2f\x76\x18\x86\x89\x7d\x3e\x1d\x01\xb5\x0c\x58\xe3\xfb\xe5\xae\xc4\xf3\xf0\xca\x92\xb4\xd9\xcb\x72\x79\xca\x8a\x6f\x54\xbb\xee\x1e\x3e\x5f\x88\xe8\xbc\x46\x67\x15\xb0\x6c\x50\x18\xab\x9a\x8e\x7e\x6d\xf8\x0e\xa1\x3e\xfc\x65\x6b\xde\x31\xa9\x24\x28\xe4\xd1\xa8\xae\x8c\xb4\x57\x90\xc4\xa0\xd8\xe8\x82\xc6\x1b\x31\xc1\x91\x65\xfa\x81\x32\xaf\xb4\x41\x59\x27\x96\xdf\xf8\x66\xa3\x73\x21\x68\x5f\x73\x6c\xc4\x1a\x33\xa7\xff\x76\x68\xad\xdd\x3e\xb4\x19\xaa\x38\xc4\x65\xd9\xfd\xba\x97\x00\x4a\x13\xd9\x89\x9d\x40\xc8\x3f\x02\x00\x00\xff\xff\xe1\x41\xce\x3b\xeb\x01\x00\x00")

func dataHostsWin7ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7ExtraTxt,
		"data/hosts/win7/extra.txt",
	)
}

func dataHostsWin7ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin7ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/extra.txt", size: 491, mode: os.FileMode(438), modTime: time.Unix(1495297208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x4d\x6f\xe2\x30\x10\x86\xef\xfc\x8a\x48\x9c\x99\x90\x0f\x40\x70\xdc\xfb\x9e\xf6\xb0\xe7\xc1\x99\x24\x16\xf1\x4c\x6a\x0f\x04\xf7\xd7\x57\xb4\x6a\xd5\x48\x98\x16\xf9\xe6\xe7\x99\x77\x34\xef\x72\xb9\xcc\x7a\x09\x1a\xb2\xc9\xf2\x2e\x0b\x63\x5c\xdc\xbe\xfe\x8a\xa7\xcc\x72\x2b\x87\xac\x57\x1d\xc3\x21\xcf\x3b\xab\xfd\xf9\x08\x46\x5c\x6e\x3c\xbe\xc6\x95\xc3\x6b\xfe\xdf\x72\x23\x53\xf8\x37\xc6\x3f\x83\x98\x13\xf9\xc5\x62\x0d\xef\x2f\x33\x4d\x28\x8a\xba\x82\x41\x18\x86\x81\x27\x60\xd2\x19\x2c\xb7\xfb\x24\x2c\xd7\x75\x59\xc3\x60\x62\x8a\x56\x9b\x47\x74\x5b\x24\x69\x55\xed\xd3\xac\x4e\xef\xac\xd7\x3b\x68\x3d\xde\x61\xe2\x46\x54\xba\x9a\x1e\xb9\xa3\x02\xd4\x63\xdb\x5a\xe3\x90\xb1\x23\x3f\x57\x63\x09\x81\x54\x2d\x77\x01\x1a\x54\x04\x67\x8d\x97\x20\xad\xde\x7a\x05\x3c\x61\xc3\x61\x36\xd2\x1c\x37\xcf\x8e\xd0\x19\x2e\xe2\x95\xae\x77\xfc\x2f\xa9\x23\x79\x36\xf7\x53\x5f\x4d\x96\x1f\x45\x87\x31\x32\x69\xf9\x90\xd2\xd9\xcb\x48\xdf\x94\x7b\xfb\x5e\x1c\x28\x0d\xe4\x48\x7d\x4c\xa4\xdd\xb8\x11\xe7\x90\x9b\x5f\xb8\x9e\x1a\x01\x3b\x5e\xb6\x09\xe3\xa3\xb6\x9f\xee\x9b\x50\x83\xf0\x1c\xbe\x05\x00\x00\xff\xff\x24\x24\x1e\xa9\x47\x03\x00\x00")

func dataHostsWin7SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7SpyTxt,
		"data/hosts/win7/spy.txt",
	)
}

func dataHostsWin7SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin7SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/spy.txt", size: 839, mode: os.FileMode(438), modTime: time.Unix(1495297210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin7UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xbd\x6e\x83\x30\x14\x86\xe1\x9d\xab\xb0\xc4\x1c\x63\x28\x52\xa2\x8c\xdd\x3b\x75\xe8\x7c\xf0\x0f\x58\x05\x1f\x64\x1f\xe4\xa6\x57\x5f\xa5\x44\xb4\x95\xa8\x8d\xd8\xfc\x3d\xbc\x76\x59\x96\x6c\xc0\x40\x81\x45\xeb\xce\x6c\x99\x15\x90\x2e\xee\xa7\x2f\xe8\x35\xb3\xce\xe0\x95\x0d\x44\x73\xb8\x56\x55\x6f\x69\x58\x3a\x2e\x71\xaa\xa4\x87\xcf\xdb\x69\x82\x8f\xea\xcd\x3a\x85\x31\xbc\xce\xb7\xe7\x11\xe5\xbb\xf6\x45\x21\xf8\xf7\xc7\x84\x10\x60\xe0\x54\xf3\x91\xc7\x55\xad\xfd\x7b\xe1\x37\xea\x94\xc9\x23\xd3\x8a\x2c\xaa\x2f\x6d\x97\x2f\x35\x4f\x97\x3c\x6a\xb5\xce\xa2\xa6\x81\xf3\x01\x24\xeb\x0c\x82\x85\x2b\x8c\x6e\x44\x50\x09\x25\x69\x54\xa9\xca\x96\x98\xac\xf4\x18\xd0\xd0\xfe\x9c\x28\x84\x23\xef\x30\xba\xe1\x8f\xe3\xfd\x9b\x4c\xcf\x55\xe0\x5d\x7d\x24\xb6\x15\xfe\x12\xa7\x69\x23\xff\xff\xbc\x2e\x8f\x01\x7d\xff\x33\xc4\x98\xb8\xfc\x2b\x00\x00\xff\xff\x03\x69\xdd\xc3\xf4\x02\x00\x00")

func dataHostsWin7UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin7UpdateTxt,
		"data/hosts/win7/update.txt",
	)
}

func dataHostsWin7UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin7UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win7/update.txt", size: 756, mode: os.FileMode(438), modTime: time.Unix(1495297212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81ExtraTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3f\x73\x9c\x40\x0c\xc5\xfb\xfb\x14\xcc\x5c\x8d\x88\x5d\x65\x5c\xa6\x4f\x95\x22\xf5\xde\xae\x00\x8d\x59\x89\x48\x3a\x16\xf2\xe9\x33\x38\x7f\xb1\x6f\x2f\x1e\x3a\xbd\xdf\x13\xfb\xde\xe8\x7c\x3e\x37\xa3\x98\x5b\x53\x88\x3f\x3e\x34\xb8\xba\x86\xd3\x3e\xfd\x2c\x8a\x0d\x71\x2f\x4f\xcd\xe8\x3e\xdb\x53\xd7\x0d\xe4\xe3\xf5\x02\x51\x72\x17\x35\x7c\xdf\xda\x1c\xd6\xee\x2b\x71\x92\x62\x5f\xe6\xed\xd3\x24\xf1\x19\xf5\x74\xfa\x00\x2f\x5f\x13\xa2\xd3\x12\x9c\x84\xdb\xe5\x11\x6c\x32\xc8\x14\x55\x4c\x7a\xdf\x97\xfc\xe5\xe6\x19\xd7\x56\x7b\xc8\xc6\x07\x21\xe5\x04\x19\x3d\x18\xea\x42\x11\x6b\xfe\xc4\x06\xd9\x7a\xe7\x68\x74\x10\x7a\xe2\xc0\x11\xe1\x8f\xff\xe5\x4f\x70\x21\x1e\x8e\x9c\x48\x0a\x9c\x92\x12\x3f\x83\xd3\x84\x55\x50\xdb\x5e\xa1\xfa\xde\xe1\xad\x63\x80\x89\x16\x3c\x8c\x28\x0f\x60\x7e\x01\x6b\x5f\xfb\x27\x19\x88\xdf\x1a\x6e\x66\x63\x5c\xbd\xfd\x37\x58\xad\x9d\x6f\x57\xd4\x0d\x66\x95\x04\x31\x1b\xa8\x57\xb8\x5f\xbb\xa0\x60\xf0\x11\xb5\x46\xb9\x28\x62\x1a\xb0\x4f\x90\x6c\x85\x3c\x57\x40\xa7\x8c\x50\x7e\x1e\xc7\x41\x58\xc2\x44\xe9\x1d\x57\x51\xf6\x50\x8a\x33\x58\x0e\xea\x16\x15\x91\x6b\x68\x29\xb7\x0f\xa0\x04\x37\x61\x70\x9c\x30\xa3\xeb\x56\xf3\xa7\x58\x8b\x51\x2c\x0a\xfb\xbd\x7e\xab\x04\xec\x35\xd9\x95\x1c\x81\xd1\x5f\xf1\x0f\xff\x5f\xf9\x78\x17\x29\xe5\x77\xbb\x86\x41\xe3\xb8\xab\x3f\x02\x00\x00\xff\xff\x01\x34\x9f\x2f\xce\x03\x00\x00")

func dataHostsWin81ExtraTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81ExtraTxt,
		"data/hosts/win81/extra.txt",
	)
}

func dataHostsWin81ExtraTxt() (*asset, error) {
	bytes, err := dataHostsWin81ExtraTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/extra.txt", size: 974, mode: os.FileMode(438), modTime: time.Unix(1495297225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81SpyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\x4d\x6f\xa3\x30\x10\x06\xe0\x7b\x7e\x05\x52\xce\x18\x4c\x3e\x36\xc9\x71\xef\x7b\xda\x43\xcf\x53\x33\x80\x15\xfc\x51\xcf\x10\x42\x7f\x7d\x45\x2b\x55\xa5\x0a\x13\x71\x9b\xe7\x15\x1e\xbd\xb2\xb7\xdb\x6d\xd6\x05\x62\xca\x46\xeb\x4f\x3a\xa3\x38\x6d\xe6\xd9\xbf\x90\x30\xb3\xbe\x09\x97\xac\x63\x8e\x74\x29\x8a\xd6\x72\x37\xbc\x2a\x13\x5c\x61\x12\xbc\x4f\xb9\x83\x7b\xf1\x62\x7d\x1d\x46\xfa\x1f\xa7\xbf\x7d\x30\x57\x4c\x9b\x4d\xa9\x3e\xbf\x0c\xf2\xb2\x2c\xb5\x82\xdc\x11\xd6\x2d\x2a\x8f\xbc\xb4\x4a\xb0\x9d\x60\x7b\xc1\x0e\x82\x1d\x05\xfb\x23\xd8\x49\xb0\xf3\xba\xe9\x52\x30\xa1\x17\xbd\xda\xcb\x83\xa1\xa9\x49\x57\xfb\xbd\xea\x83\x57\x7d\xef\xc7\xdf\x58\xe9\xea\x70\x94\xf4\xa4\x57\x75\xb7\x3b\xab\xde\x4c\x0f\x2c\xb8\x08\x8c\x77\xd3\x81\x6f\x51\x2b\x4e\xd0\x34\xd6\x38\xf0\xd0\x62\x5a\x44\x71\x50\xb7\x90\x18\xef\xaa\x06\x06\xe5\xac\x49\x81\x42\xc3\xf3\x35\xfa\x0e\x11\x32\x5b\xdf\x52\x3e\x5a\x2f\xe6\xe2\xe4\x91\x2b\x51\xa1\x67\xd1\x71\x48\x21\xe2\x8f\x08\x5c\xa1\xf6\xb4\x58\x9a\xde\x9c\x62\xec\xd1\x21\xa7\x69\xed\x6f\x0c\x4c\x0d\x56\x6a\x88\x35\x30\x3e\x4b\x8d\xb4\x92\x98\xcf\x91\x0a\x9c\xdd\x04\xe7\xc0\xd7\x4f\x77\xfa\x6a\xfa\x59\x8b\xf3\x43\x57\x36\xde\x8e\x4b\xff\x08\x00\x00\xff\xff\x5a\x46\x9e\xc5\x0a\x04\x00\x00")

func dataHostsWin81SpyTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81SpyTxt,
		"data/hosts/win81/spy.txt",
	)
}

func dataHostsWin81SpyTxt() (*asset, error) {
	bytes, err := dataHostsWin81SpyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/spy.txt", size: 1034, mode: os.FileMode(438), modTime: time.Unix(1495297227, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataHostsWin81UpdateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xbd\x6e\x83\x30\x10\xc0\xf1\x3d\x4f\x61\x89\x39\xc6\x26\xa0\x7c\x8c\xdd\x3b\x75\xe8\xec\xf8\x03\x50\x0d\x47\xb1\xa9\x9b\x3e\x7d\x45\x13\x45\xad\x94\xfa\x4e\xd9\x7c\xbf\xfc\x7d\xc2\x45\x51\xb0\x0e\x42\x0c\x2c\xf5\xe3\x41\xb2\x65\x32\x2a\xda\xcd\x7a\xfc\x0c\xb3\x65\xfd\xe8\xe0\xc4\xba\x18\xa7\x70\x2a\xcb\xb6\x8f\xdd\x72\xe6\x1a\x86\x52\xcf\xea\xeb\xb2\x1d\xd4\x67\xf9\xda\x8f\x06\x52\x78\x99\x2e\x4f\x1e\xf4\x9b\x9d\x37\x1b\xc1\x7f\x7e\x4c\x08\x51\x2b\xb3\x95\xdc\xf3\x74\x55\xd7\xfe\x5a\xf8\x8d\xb4\xd0\x38\x12\xae\xa2\xa0\x23\x8a\xa4\x10\x7b\x1c\x49\x89\xef\x24\xf7\xba\xc1\x91\x3a\xec\x70\x64\x04\x61\x71\x23\x1d\x01\xd5\x78\xa9\xda\x1d\x6b\x04\xa9\x85\x1b\x48\xa3\x07\x65\xf2\xea\xa3\xa6\xc0\x73\xbb\x42\xc5\x8d\xe7\x29\xf0\xa1\xd7\x33\x04\x70\xf1\x81\xb1\x43\xde\x48\x4a\x48\x52\x4a\x15\xa5\x54\x51\x4a\x0d\xa5\xd4\xe0\x25\x1d\xbd\xc9\x3d\x0a\xe1\x43\x3b\x5b\xf1\xdb\xf1\xe3\x3b\x56\x90\xde\x73\xc3\xff\xb6\x73\x2d\xf1\xb1\xef\x7f\xff\x4b\x46\x1b\xef\x24\xf8\x90\x5f\x93\x76\x13\x36\xb9\x0d\x60\x6e\xbf\x03\x00\x00\xff\xff\xf1\x88\x54\x8f\xea\x04\x00\x00")

func dataHostsWin81UpdateTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataHostsWin81UpdateTxt,
		"data/hosts/win81/update.txt",
	)
}

func dataHostsWin81UpdateTxt() (*asset, error) {
	bytes, err := dataHostsWin81UpdateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/hosts/win81/update.txt", size: 1258, mode: os.FileMode(438), modTime: time.Unix(1495297230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNcsiNcsiTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xcf\xcc\x4b\xc9\x2f\x2f\x0e\x2e\xa8\x74\xca\xc9\x4f\xce\x4e\x2d\x02\x04\x00\x00\xff\xff\x76\x30\x32\x0e\x11\x00\x00\x00")

func dataNcsiNcsiTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataNcsiNcsiTxt,
		"data/ncsi/ncsi.txt",
	)
}

func dataNcsiNcsiTxt() (*asset, error) {
	bytes, err := dataNcsiNcsiTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ncsi/ncsi.txt", size: 17, mode: os.FileMode(438), modTime: time.Unix(1495292715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x72\xdb\x3a\x0c\xbc\xe7\x2b\x32\x93\xb3\xc0\x38\x79\x2f\xd3\xe9\x4c\x2f\xfd\x81\x1e\x7a\xe8\x19\x26\x21\x09\x63\x11\x64\x09\xd8\x92\xfd\xf5\x1d\x25\x6e\x1d\x29\x54\xa7\x47\x71\x57\x5c\x60\x77\xf9\x70\xef\xc8\xbc\x0b\xa2\x11\xf5\x27\xf8\x24\xed\xdd\xc3\x7d\x6f\x96\xf5\xb3\x73\x1d\x5b\x7f\xdc\x83\x4f\xd1\xf9\x82\x97\x73\x13\x71\x72\x3f\x58\x42\x1a\xf5\x7b\x3e\x7f\x1d\x92\x3f\x50\x71\x56\x88\x5c\x44\x35\x2a\x2e\xa0\xa1\xeb\x93\x9a\xba\x91\x65\xf7\xe8\x68\xb2\x82\x60\x93\xdd\xdd\x29\x95\x13\x95\x2f\x0e\x45\x47\x2a\x0a\x91\x7d\x49\x9a\x5a\x7b\x55\xb8\xc1\x39\x2b\xe8\xe1\x9c\x69\x75\x7e\x79\x7e\xd9\x7d\xda\xbd\xc0\x29\x41\x54\xf2\x12\x40\xc8\xde\xe3\xff\xef\x9e\x9e\x9f\xff\xdb\xc2\x7d\x90\x79\x41\x23\x31\xc8\x25\x05\xf0\x51\x21\xaa\x2c\x55\x7c\x9f\xd8\xd3\x72\x36\x10\x45\xf3\xab\xdb\x2a\xbc\x77\xe8\xc0\x24\xd6\x28\x74\x68\x34\xe2\x19\x22\xa9\x92\x74\x54\x60\xe0\x13\xd5\xc8\x30\x8a\xc2\xf8\x66\x6e\x0d\x9f\xb3\xe1\x0e\x32\xaa\xe6\x54\x6c\x39\x4d\xa0\x3c\xa4\x33\xa8\xa1\xb1\x07\x3c\x60\x44\x36\xf2\xbd\xa4\x21\x75\x4c\xab\x0b\x03\x9d\xe6\xd9\xf1\x68\x3d\x4c\xfb\x34\x7d\x1c\x29\xc4\x00\x91\x0c\xe7\x6f\xf6\xb4\x99\x55\x90\xd9\xc2\xd6\xc4\x2b\x2f\x91\x96\x28\xec\xd1\x1f\x6e\x7f\x36\x7d\xea\xe3\x06\x49\x09\x8b\xef\xb7\x54\xfe\xd0\xaa\xf6\x74\x15\x4b\x39\x76\x8d\x36\x51\xa5\x99\xe3\x7b\xf3\xe3\x42\xab\x42\x0c\xec\x49\x94\xa5\x83\x98\xb7\xa4\x67\xfb\xa4\x22\x10\xa1\x4f\x16\x91\x87\xd5\x71\xd5\x8b\xd4\xb6\xec\xe9\x1a\xf3\x86\x50\x92\xdf\x04\x6d\x27\x88\x7a\x43\x72\x61\x4f\x03\xab\xd5\x1e\xc5\xbf\x35\x4c\x1f\xe1\x29\x06\x59\xae\xaf\xdf\x6a\x87\xd7\x20\xd6\xcf\x42\xc9\x8c\xa5\xd3\x46\x75\xd8\xe8\xcc\xb5\x7c\x95\x3b\x2d\x15\x6a\x38\x62\x47\x0a\xda\x6c\x18\xf0\xca\xa2\xd0\x51\x1b\x20\xe8\xf4\x97\x4c\x8c\x07\x6a\xae\xcd\x84\x91\xd0\x7a\x2a\xdb\xdc\x48\xf5\xda\xd8\xe1\x09\xf2\x60\x1f\x57\x3d\x72\xcd\xe8\x71\x1c\x97\x4d\xff\x15\x00\x00\xff\xff\xf8\x67\x95\x55\x3b\x05\x00\x00")

func dataOpenwrtWin10ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10ExtraDnsmasqConf,
		"data/openwrt/win10/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin10ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/extra/dnsmasq.conf", size: 1339, mode: os.FileMode(438), modTime: time.Unix(1495372309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\x3f\x6f\xdb\x3c\x10\xc7\xf1\x5d\xaf\xe2\x00\xcf\xfc\x91\x77\x24\xf5\xe7\xd9\x9e\xd6\x6e\xe1\x25\x0e\x94\x14\x99\x15\x99\x69\xdc\xda\x96\x40\xd1\xb0\xd3\x57\x5f\x28\x28\x8a\x6c\x62\x07\x0d\x82\x3e\xfc\xe2\x4e\x5c\x91\x0e\xa9\xd7\x2f\x87\x18\xae\xdd\xf1\x88\xcb\x14\x62\xb1\xa2\xd7\x94\xc6\xe9\x3f\xad\xbf\x1f\xd2\xeb\xe5\x19\xfd\x70\xd2\x7d\xec\x7e\xbd\xa9\x53\x77\xd3\x4f\x87\xf3\x7e\xb8\x4e\x0f\xe3\xdb\xa7\xe3\xd0\xff\x0c\x51\xa7\x18\x82\x3e\x75\x53\x0a\x51\xef\xbb\xd4\xfd\xed\xe9\xeb\xe1\xcc\x46\x87\x5b\x8a\x1d\xd2\x2d\x15\xc5\x8a\xc2\xf9\x65\x88\x7d\xa0\x38\x5c\x52\x88\xb4\xbe\x7b\x28\x0e\x63\xea\x9e\x8f\x61\x22\x95\xe8\xdc\x25\x52\x5b\xba\x6f\x37\xed\xee\xdb\xe3\xf6\xee\x2b\xa9\x91\x52\x3f\x92\x52\xfb\x71\x88\x89\xbc\x25\xf5\x83\xda\xcd\x7a\xdb\x6e\x3e\x3f\x92\x52\x69\x50\xf3\x87\x89\xbc\x5d\x2e\x5d\xf6\x99\xa5\x62\x45\xf1\x72\x0c\xd3\x87\xe4\x96\xbe\xec\xda\xa7\xff\xdb\xf5\x7c\x6c\xdd\xee\xee\x49\xed\x89\x2d\x6a\x03\x16\x78\x97\x41\xd9\x54\xb0\x60\xa9\x33\xad\x30\xc4\x98\x25\xec\x0c\xaa\x0a\x22\x25\x8c\x96\xc5\x31\x9c\x01\x73\x0d\x36\x16\xd5\x92\x2d\x1d\x1c\xbc\x83\xc8\xa2\xf4\xf0\x02\x36\x73\x3c\xdf\x36\x36\xd7\xd6\x59\xbb\xcd\xda\xbf\x6b\xc9\x2a\x7b\x88\x17\xb8\x45\xcb\xc6\xc1\x39\xd4\xef\xbf\x2d\x07\x0b\x7b\xb0\x2b\x73\x6e\x8f\x2d\x43\xbc\x45\xc9\x59\x2b\xb2\x75\xe0\xca\x80\x6b\x8f\x6a\x39\x5e\xd6\x28\x2d\xb8\x46\xd5\x2c\xda\x86\x21\x56\xc0\xb6\xc9\x9a\x44\x8c\x43\xd5\x80\x9b\x6a\x7e\xd4\x87\x57\xe1\x8c\xc3\x15\x5c\x89\x79\x1b\xf1\x3e\x57\x37\x0e\xf9\xe9\x66\x4e\xff\x03\xb6\x8b\x37\xfb\x07\x8b\x58\x34\x59\x63\x94\x35\xb8\x2c\x21\xde\x15\xbf\x03\x00\x00\xff\xff\x65\x0b\x65\x69\x6b\x05\x00\x00")

func dataOpenwrtWin10ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10ExtraFirewallUser,
		"data/openwrt/win10/extra/firewall.user",
	)
}

func dataOpenwrtWin10ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/extra/firewall.user", size: 1387, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x98\xcd\x92\xdb\xaa\x12\xc7\xf7\x79\x8a\x54\x65\xed\x96\x90\x26\x4e\x7c\xab\xee\xe6\xbe\xc2\x5d\x9c\x35\x82\xb6\x44\x59\x02\x86\xc6\x92\x7d\x9e\xfe\x94\x64\xcd\xc4\x96\x01\x33\x27\xab\x29\xfd\x7f\x34\xd0\xf4\x97\xf3\xe3\x7b\x81\x5e\x14\x52\xd3\xc0\xe9\x1d\x84\xd1\xc7\x6f\x3f\xbe\x77\xde\x5b\xfa\x4f\x51\xb4\xca\x77\xe7\x06\x84\x19\x0a\xe1\xf8\xdf\xd7\xdd\xc0\x2f\xc5\x5f\x4a\x4b\x33\xd1\xff\xed\xf5\x7f\xbd\x11\x27\x74\x85\x77\x88\xc5\xc0\xc9\xa3\x2b\x24\xf7\xbc\xe8\x0c\x79\x2a\x26\xa5\x59\x59\x90\xbd\x82\xbf\xf8\x6f\xdf\x08\xdd\x88\xee\xbf\x05\xdf\x95\x65\xc9\x80\xef\x06\x42\xd9\x22\x68\xf4\xc5\xa3\x58\xa5\xc4\x3a\x25\xbe\xa5\xc4\x9f\x29\x71\x9f\x12\x7f\xa5\xc4\xdf\x29\xf1\x90\x10\x59\x99\x12\x53\x1e\x62\x71\x0f\x05\xbf\x02\x97\xc4\x60\x20\xbd\x3c\xe5\xe3\xf7\x0a\x06\xe2\x92\x02\x2b\xaa\xd0\x0a\xc7\x65\xe0\xb3\xa8\x43\x1f\xbd\x1a\x95\xbf\xc2\x74\x0b\x98\x8d\x2a\x35\x5e\xce\xdb\x6d\xa5\xbe\x3c\x71\x14\x30\x7d\xbb\xce\xf3\xb1\xc3\xd7\x54\xd2\x12\x70\x2f\x07\xbf\x11\x4e\x7c\x27\xa4\xde\x69\x02\x2e\x3d\x8a\x0e\x24\xfe\x51\x9b\x88\xd7\x9a\xa8\xd7\x9a\xb0\x77\x1a\xa5\xdb\xe5\x1a\x4a\x38\x43\xe6\xb8\x39\x45\xd3\xd7\x75\xc9\x76\x1c\x98\x74\x63\x50\x12\x71\xa9\x0d\x49\x9a\xd5\xe5\xdb\x0e\x63\xd2\x3e\xbc\xd7\x4d\x4a\xac\x0a\xef\x55\x35\x3b\x61\xdc\x92\xd1\x56\x81\x9d\xff\x48\x61\x75\x1a\xab\x6d\x8e\x35\x82\xf9\x4f\xa5\xdb\x1d\x5d\x37\xf1\xd2\x5c\xe3\xde\xbc\xc6\xbd\x79\x93\x42\x97\x17\xb7\x72\x25\x45\x30\xb5\x44\x28\xae\xc4\x73\x0c\x08\x0e\x1e\x7b\x1c\xd0\xbb\x6b\x2c\x10\x04\x17\x1d\xc2\x5c\x40\x07\xee\x7c\x38\x6d\x84\xd4\xc1\x1d\x25\x55\x7b\xe0\x03\x1d\x60\x20\x14\x7a\x73\xc8\x8e\x65\x78\xf5\x93\xaa\xd2\x54\xd4\x89\xab\x14\x74\x62\x17\x8d\xd6\x45\xaa\xe2\x06\xab\xb0\x41\x33\x58\xee\xf1\x22\x3a\xae\x5b\x04\xd1\x9b\xb3\xe4\xd6\x6e\xee\xfd\x00\x31\xf0\x8e\x1f\x8f\x4a\x0c\x5c\xf3\x16\xdd\x96\x75\x16\xc8\x47\xb3\x74\xd6\xf1\xe2\x61\x20\xe5\xb9\x3c\x12\xb4\x7d\x23\xf5\x5c\x07\x22\xbc\x65\x25\xdb\x59\x67\x24\x48\x03\x92\x2c\x0c\x36\xca\x12\x83\xc9\x0a\x18\xcb\xf9\x79\x1f\x8e\x25\x9b\x9a\xbf\x9f\x43\x4f\x2e\x9b\x7a\xd2\x54\x95\x6c\xfe\x07\x93\xa6\x70\xc0\xc8\xe6\x67\x52\x24\xd1\xb1\x92\xb1\xb2\x3c\xb0\x5f\x59\x20\xfb\xf9\x62\xbb\x4f\xf0\x37\xab\xf3\xc0\x03\x7b\xcb\x04\xeb\x43\x0e\xc8\xca\x7d\xb5\xcf\x04\xeb\xac\xad\x59\xf9\xbb\xca\xba\xf5\x0c\x56\xaf\xc1\x7a\xb6\x97\xe3\xc7\x19\x7c\x2b\x33\x2e\x53\x97\x87\xaa\x2a\xd3\xee\x99\x34\x31\x99\x22\xf6\x8b\xa9\xaa\x3c\x30\x56\x26\xc3\xe6\x0f\xf8\xc6\x52\xd7\xc5\x11\x46\xe5\xfc\x99\xf7\xc8\x9d\xef\x36\xb1\x7d\x7c\x5d\x13\xa5\xe2\xad\x36\xe4\x95\x20\xa0\xb3\xb5\xc6\xf9\x18\x8a\xc1\x5a\x3c\x17\xc3\xf4\x31\xf0\x0c\xa3\x71\x1e\x2f\x4b\xe9\x8d\x59\x3f\xf6\x78\x79\x2e\xeb\x6d\xe0\x13\x9a\xcc\xb4\x6f\xd1\x8c\xe8\x32\xe1\x2e\x30\x89\x74\x81\x09\x4d\xed\x48\x57\x19\xd5\xfe\x8e\x4b\xd6\x7b\xc5\x6e\xbd\x56\x20\x01\x19\xa1\x78\xff\x78\x42\xd0\xc4\xbd\x78\xf4\xe8\xab\x35\x77\xa4\x3e\xa2\x43\x2d\x10\x7a\x23\xb8\x57\x46\x43\xaf\xc6\x4d\x8f\x3d\x8d\xf9\xa5\xb4\x6f\x18\x4c\xd3\x04\x03\x01\x3f\x71\xa9\x37\x13\xda\x62\xdc\x05\x67\xca\x9e\xaa\x09\x1b\x70\x28\x07\xa3\x25\x2c\xfd\x20\xb2\xc9\x00\x81\x41\x75\x30\x8d\xea\x11\xac\xb2\x08\xdc\xa9\x68\x20\x85\xa6\x88\x81\xb4\x47\xf2\xf1\xa9\xe6\x36\x2b\x9b\xb9\x7b\x21\xb7\x96\x6e\x5e\x7a\x46\xdc\xb9\xc7\x17\x9c\x89\x8f\x22\xa1\xb7\x4c\xe0\x77\x90\x46\x42\xef\x95\x6e\x69\xd7\xe8\x0a\x66\xf8\xe3\x29\x63\x76\xef\x96\x88\xeb\x97\x97\xcc\x6d\xed\x8b\x4b\xba\x53\xd6\x2e\xd6\x21\x1c\x8d\xf1\xd6\x29\xed\xad\x43\xa9\xc4\xe6\xb6\xd6\xe1\xa8\x70\x7a\x0e\xa1\x79\xfa\x7f\x76\x78\xf0\x37\xc1\x6c\xd7\xcd\xc7\xe1\x9f\x99\x12\xf1\xad\xc3\xb9\xe8\x11\x4c\x48\x90\x53\x31\x49\x74\x38\xf0\x7b\x73\xa1\x44\x20\x14\x67\x87\xa1\x38\x5e\x95\x63\xcf\xa9\xf3\xbc\x3f\x29\xdd\x6e\x81\xf5\xc0\xd9\x27\xfa\x78\x01\xe2\x5a\x36\x26\x5d\x67\x3f\xe1\x49\xe9\x2c\xf0\x06\xbd\x98\xc6\x1e\xe1\x18\xa4\xa3\xa3\xed\x2a\x85\x26\xd1\x55\x0a\x8d\xb6\x64\xaf\x1a\x7d\xfc\x50\x8b\xcc\xfb\x68\x47\xbb\x01\x78\x76\xc6\xe2\xab\xf7\x7c\x1f\xf2\xde\xe2\x7d\xf8\x4a\xf6\x27\xf0\x3b\x88\xa6\x40\xd8\x93\x37\x0e\x05\xf7\xbc\x37\xad\xc3\xf1\xa3\xbc\x2f\x9f\xdf\xcf\xbc\x57\x3e\x6e\xf0\xec\x46\xbc\xc2\xc4\x3d\x19\x1d\x83\x7c\x09\x44\x3d\xf0\x13\xc8\xab\xe6\x83\x12\xe0\xd5\x5c\xfc\xe2\x8d\xfe\xcf\x8a\x97\x24\xf6\x28\xcc\x30\x70\x2d\xbf\xe2\xad\x8c\x65\x8f\xf0\x0d\xe0\xd6\xe2\x05\x9a\x39\xd1\x9e\xcc\x65\x9a\x38\xbb\x68\xfd\xf0\x74\xc4\x8f\x5f\x3e\xd4\x71\x3b\x6f\x93\xee\xa1\x23\x2b\xd7\x89\xe8\x2e\x09\x5f\x17\xce\xe0\xb2\xc8\x0e\xe8\x68\x0e\x86\xee\xda\x38\x25\x97\xf1\xa3\x43\xb7\x09\xa0\xa5\xc6\x06\x26\xba\x75\x8f\xcc\x3e\xb3\xd2\x99\x2d\x66\xa5\x33\xbb\xcb\x4a\x67\x36\x96\x95\xce\x29\x82\xff\xc6\xfb\x99\x9e\xbf\x9b\x74\x5f\xd4\xcc\x87\xa1\x38\xf7\x00\xc9\xcd\xd7\x84\x7e\xae\x15\xe9\x4c\x5f\x55\x6b\xf1\x75\x56\xad\xec\x17\x92\x36\xbd\xe2\x8e\xc3\x26\xe7\x77\x42\x6e\x53\x5c\xfe\x73\x1c\x94\x1d\xf7\x51\x62\x19\x63\x3f\x87\xc5\x7f\x02\x00\x00\xff\xff\x05\x8d\x5c\x25\xaa\x17\x00\x00")

func dataOpenwrtWin10SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10SpyDnsmasqConf,
		"data/openwrt/win10/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin10SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/spy/dnsmasq.conf", size: 6058, mode: os.FileMode(438), modTime: time.Unix(1495372330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x99\xcf\x72\xdb\x46\x0c\xc6\xef\x7e\x0a\xce\xf8\xac\x8f\x0b\xec\xff\xde\xda\x3a\xed\xf8\x92\x64\x94\x74\x72\x56\x64\xa6\x71\xeb\x58\x1a\x89\x9e\xc4\x7d\xfa\x0e\x96\xa4\xad\x9c\x00\x1e\xe8\x8b\x7f\xc6\x60\xbf\x05\xb0\x00\x7c\xdd\xf5\xc3\xb8\xef\xbf\xdc\x9f\x86\xef\xbb\x87\x07\x3c\x9d\x87\xd3\xd5\x75\xf7\x75\x1c\x8f\xe7\x5f\xfa\xfe\xef\xfb\xf1\xeb\xd3\x67\xec\x0f\xdf\xfa\xfd\x69\xf7\xdf\xf3\xe6\xdb\xee\x47\xff\xe9\xfe\xf1\xee\xf0\xfd\xfc\xe1\xf8\xfc\xdb\xc3\x61\xff\xef\x70\xea\xc7\xd3\x30\xf4\xdf\x76\xe7\x71\x38\xf5\x77\xbb\x71\xf7\x62\xaf\xff\x7e\xff\x48\xae\x3f\x1f\x9f\x31\xfe\x18\xaf\xae\xae\xbb\xe1\xf1\xcb\xe1\xb4\x1f\xba\xd3\xe1\x69\x1c\x4e\xdd\xcd\xdb\x0f\x57\xf7\xc7\x71\xf7\xf9\x61\x38\x77\x9b\xb1\x7b\xdc\x8d\xdd\xe6\xb6\x7b\xbf\x7d\xb3\x7d\xf7\xd7\xc7\xdb\xb7\x7f\x76\x9b\x63\x37\xee\x8f\xdd\x66\x73\x77\x3c\x9c\xc6\x2e\xfa\x6e\xf3\x4f\xb7\x7d\x73\x73\xbb\x7d\xf3\xfb\xc7\x6e\xb3\x19\x0f\x1b\xf9\xc5\xb9\x8b\x5e\xb7\xf4\x74\x67\xb4\x74\x75\xdd\x9d\x9e\x1e\x86\xf3\x85\xc9\xdb\xee\x8f\x77\xdb\x4f\xbf\x6e\x6f\xe4\xcf\x6e\xb6\xef\xde\x77\x9b\xbb\x8e\x3c\x72\x02\x53\x01\x51\xb6\xc2\x15\x54\xc9\x0e\x33\x39\x03\x4c\x2e\x23\xa2\x14\x0d\x65\x8f\x9a\x91\x08\xe4\x55\x87\x27\x96\x72\x01\x65\x6f\x83\xd9\x55\x54\x93\xe1\x0a\x72\x20\x55\x87\x05\xad\x08\xc1\xce\x26\x2b\x4b\x49\x3e\x23\xcc\x04\x76\x96\xc3\x91\x63\x04\x70\xb4\x88\x26\x2c\x13\x2c\x0e\x0b\x4a\x31\x82\x82\x1a\x11\x8d\xf6\xa0\xc2\x20\x56\xcf\x17\x1c\x52\x45\x70\xa0\xa8\x1e\x2f\x38\x09\x4c\x02\x65\x8b\x59\x41\x59\x3f\xdc\x0b\x49\x89\x2d\x6c\x06\x73\x85\xeb\xd9\x62\xb9\x88\x0e\x15\xa1\x1a\x58\x22\x8f\x02\x8e\xd1\xc8\x92\x43\x56\x73\x6e\x61\x03\x28\x5a\x9d\x60\x46\xb0\xdc\x05\x89\xd5\x50\xc1\xac\xc6\xc4\x4c\x73\x20\x50\x50\x13\xaf\xd1\x11\x64\xc8\xbb\x86\x66\x50\x10\xe3\x36\x37\x32\x28\x12\xd8\xa4\x06\x53\x33\x4d\x45\x0d\x8d\xd8\x4e\x06\xcf\x88\xea\xf9\xa2\x04\x5b\x73\x18\x5e\xcd\xd3\x0b\x58\xbf\xc1\x17\x58\xca\x85\x1a\x48\x42\x4b\x85\x0d\xd9\x22\xde\x42\x8b\x78\xa4\xeb\x31\xd3\xf2\xa9\xd9\xba\xc0\xd5\x5b\x4a\xe2\x4c\x33\x7b\xb0\x49\xbe\x92\x91\x9c\x3c\x53\x1a\x9c\x02\x02\x12\xc8\xa9\x62\x34\x92\xbd\xa9\x0e\x34\x36\x06\x1b\x1b\xe1\x6b\x0b\x52\xf6\xba\x13\x11\x91\xc1\x09\xac\xd6\x81\x09\x25\xe7\xac\x5e\xb4\x48\x22\xc3\x6b\x36\x3b\x21\xdd\x82\x41\xe0\x88\x18\xc1\x15\xec\x4d\x2e\x4f\x6a\x98\x84\x88\x08\xc1\x90\x7b\xaf\xa8\xe9\x64\x0d\x25\x67\x74\xb6\xb1\x6a\x92\x4e\xac\x3c\x0d\x7a\xe1\x9c\xd8\x56\xc2\x8d\x47\x6b\xac\x9a\x9e\x17\xac\x9a\x42\x33\xeb\x1d\xa2\xd5\xdf\x9c\x50\x8d\x2c\x5b\xb3\x68\xa2\x23\x23\x19\x3d\x16\x36\x1b\x55\x13\xb6\x1a\x55\x6b\xec\x0a\x1f\xc8\x20\x85\xf4\x82\x75\x7a\x6b\xf4\x3e\xe8\x27\x5a\x0f\xcd\x0b\xba\xe8\xc1\x79\x41\xaf\xf0\x3b\x83\xbc\x2a\x75\xce\x48\x59\xb2\xdf\xd0\xc0\x91\x0b\x68\xaf\x58\x86\x3e\x00\x34\x58\x42\x39\x23\xd9\x2c\x0b\x2c\xf3\x8d\x15\x0e\x4e\x02\xd5\x48\x33\x17\xe8\x0d\xf8\x05\xcc\x4e\x0d\xbd\x85\xf6\x19\x94\xd4\x5b\x6c\xb4\xe4\x37\xa8\xaa\x6d\xc0\x0c\xb3\xb4\x73\x7a\xe5\x68\xb4\x74\xe1\xac\x57\xa4\x99\xf5\xc5\xf0\x8e\xcc\x6c\x94\xae\xcb\xe4\x32\x93\x43\x40\xd6\x67\xdf\x85\x75\x28\x66\x98\x89\xc1\xc1\x74\x87\xa2\x9b\x8f\x60\xbd\x59\x25\x22\xb0\x4c\x72\x92\x01\xba\x2b\xaf\xb4\x61\x9c\xfb\x89\x36\x7b\x92\x6c\x5d\x09\x79\x12\x1f\x64\x8c\x58\x83\x4b\x7f\x6b\x58\x4d\x04\x50\x76\xf0\xce\x94\x06\x17\xb4\x21\x7b\x67\x5a\x8a\xb0\xde\x1a\x2c\x34\xb9\x64\x3c\xe6\xc2\x4b\xff\xbc\x86\x0e\x6a\xd1\xbe\xa4\xab\x5e\xd2\x5e\xe8\xb2\xca\x93\xb2\xca\x93\x82\x6c\xbe\x9f\xe6\xc9\x0a\x57\x88\xd6\x49\x4e\x11\xd1\x2e\x0b\xbb\x35\xb2\xb0\x5b\x23\x0b\xbb\x35\xb2\xb0\x5b\x73\x9d\xb9\x18\x36\x5a\xaf\x74\xb5\x14\xb8\x85\x2e\x12\x2a\xe6\x63\xb2\x8f\x86\x39\x4e\x1e\x60\xa2\x84\x42\x26\xbd\xf3\x3c\xe8\x98\x4c\xc7\x2c\xfd\x54\x64\x5b\x9c\xcc\xb4\x31\x91\x27\x9a\x9c\x6d\xaf\xb3\xe0\x6c\x6a\x20\x66\xd8\xdb\x26\xaf\x19\x17\x4d\x56\xe1\x2b\x0e\x9a\x20\x3f\x8d\x68\x0e\x60\xbd\xeb\x9f\xe1\x4a\x96\xe7\x78\x62\xa5\xc8\x52\xb1\x7a\x3c\xd1\x56\xa7\x27\x5a\x6f\x92\x66\x9a\x3c\xd8\xb0\x42\x9f\x69\x26\xd8\x4d\x73\xb0\xa4\xe4\x0c\x87\x6a\xd2\x3a\x15\x24\xc9\x2f\xcb\x26\x6d\x86\x29\x24\x18\x9a\xaa\x05\x96\xf6\xc4\x0a\x67\xcb\x8c\xd5\xe0\x69\x11\xa3\x8f\x9b\x0d\xf6\x6d\x57\x91\x6c\x96\xfd\xf4\xdc\xe8\xbb\x34\xaa\x04\xf6\xdc\x7a\x7f\x53\xbe\x34\x3e\xb5\xcd\x77\xd1\x6f\xa6\xd1\x19\xec\x8a\x65\xf3\xfd\x82\x93\xf8\xae\x87\x54\xc3\x2b\x62\x40\xd4\xdf\x9b\x2a\x25\xa7\x6d\x93\x4d\x07\x95\x31\x2b\x24\x64\x99\x57\x8d\x2c\x39\xcb\x12\x75\x81\xa5\x79\xd4\x37\xdb\x0b\x5d\x03\x0c\xff\x67\x70\x19\xa9\x80\x52\xb2\x74\xbc\x4c\x1e\x54\x6b\x7b\x25\x9b\x22\xff\x07\x00\x00\xff\xff\xfa\x24\x41\x13\x80\x1c\x00\x00")

func dataOpenwrtWin10SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10SpyFirewallUser,
		"data/openwrt/win10/spy/firewall.user",
	)
}

func dataOpenwrtWin10SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/spy/firewall.user", size: 7296, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd2\xcf\x6e\xe2\x30\x10\x06\xf0\x3b\x4f\x81\xc4\x99\x99\x24\xa0\x95\x76\xa5\xbd\xec\x2b\xec\xa1\xe7\xa9\x3d\x09\x11\xfe\x93\x7a\x26\x84\xf4\xe9\x2b\xd4\x88\x12\x2a\x88\x7b\xf6\xcf\xdf\x7c\x9e\x64\xb3\x46\x56\x83\x36\x88\x27\x79\x03\x13\x43\xbd\xda\xac\x0f\xaa\x9d\xfc\x41\x6c\x5a\x3d\xf4\xaf\x60\xa2\x47\x93\xe8\x7d\xdc\x7a\x3a\xe3\x4b\x1b\x6c\x1c\xe4\x7f\x37\xfe\x73\xd1\x1c\x39\xa1\x26\x66\xf4\x24\xca\x09\x2d\x29\xe1\x21\x8a\x0a\x0e\x6d\x28\x0b\xec\x3b\x4b\xca\xa0\x67\x5d\xad\x84\xd3\x89\xd3\x5f\x2c\x8a\xa2\x2a\xaa\x6d\x09\x0e\x86\xcf\xb4\x49\x5d\x26\xcd\x94\xd9\xe5\xa8\xda\x2e\xab\x72\xff\xbb\x5e\x56\x55\xf1\x6b\xb1\x17\xf5\x60\xe3\x10\x5c\x24\xbb\xc0\x4e\xfb\x2c\x69\xd4\xd9\xa7\x13\x6d\x2b\x9d\xa3\xd1\x90\x92\x8b\x0d\xf8\x0e\x7c\x6b\x52\x94\x58\xeb\x1d\x74\x60\xd9\xb5\x27\x4e\xe3\x33\x95\xd1\x89\xfd\xa5\x92\x3c\x8a\xa8\xb9\x82\xe9\xda\x4c\x00\x1d\xc9\x06\x81\xc0\xba\x8c\x6f\xc5\xee\xab\xb8\x95\xee\x5b\x79\x08\x42\x6a\xee\x63\x77\x39\xaf\xad\x9b\xdc\xef\x70\x0d\x98\x9b\xd9\x50\x71\x92\xff\xf0\x47\xf8\x46\x28\xa9\xd4\x5c\x3e\x59\xf5\x44\x7e\xb0\xef\xeb\x8d\xc7\xa1\xea\x7a\xc8\xfb\x59\x32\x77\xb7\x78\x34\x9d\xc4\xd4\xe0\x47\x00\x00\x00\xff\xff\x7a\x3e\x14\xd8\x75\x04\x00\x00")

func dataOpenwrtWin10UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10UpdateDnsmasqConf,
		"data/openwrt/win10/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin10UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin10UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/update/dnsmasq.conf", size: 1141, mode: os.FileMode(438), modTime: time.Unix(1495372338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin10UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\xc1\x72\x9b\x30\x10\x06\xe0\x3b\x4f\xb1\x33\x3e\x6b\xc5\x4a\x48\x40\x6f\x6d\xed\x76\x7c\x89\x33\x24\x9d\x9c\x09\x28\x8d\x5b\x6c\x18\x21\xc6\x49\x9f\xbe\x83\x69\x13\x72\x92\x74\xf6\xe7\x9d\x7f\x77\xbd\xf2\x06\xb8\x71\x0d\x7f\x3a\x5a\x73\xa9\xbb\x0e\xa7\xd1\xd8\x64\x03\xcf\xce\x0d\xe3\x27\xce\x7f\x1e\xdd\xf3\xf4\x88\x4d\x7f\xe2\x8d\xad\xff\xbc\xb2\x53\xfd\xc2\x1f\x8e\xe7\xb6\xbf\x8c\x77\xc3\xeb\x97\xae\x6f\x7e\x1b\xcb\x9d\x35\x86\x9f\xea\xd1\x19\xcb\xdb\xda\xd5\x6f\xf5\xf8\xe5\x78\xa6\x94\x4f\x43\x5b\x3b\x83\xee\xc5\x25\xc9\x06\xcc\xf9\xa9\xb7\x8d\x01\xdb\x4f\xce\x58\xd8\xde\xdc\x25\xc7\xc1\xd5\x8f\x9d\x19\x81\x39\x38\xd7\x0e\xd8\x1e\x6e\xab\x5d\x75\xf8\x71\xbf\xbf\xf9\x0e\x6c\x00\xd7\x0c\xc0\x58\x3b\xf4\xd6\x81\x92\xc0\x7e\x41\xb5\xdb\xee\xab\xdd\xd7\x7b\x60\xcc\xf5\x6c\xfe\x60\x04\x25\xfd\x95\xa6\x36\xb0\x52\xb2\x01\x3b\x75\x66\x5c\x95\xdc\xc3\xb7\x43\xf5\xf0\xb9\xda\xce\x5f\xdb\x56\x87\x5b\x60\x2d\x90\x44\x4a\x73\xcc\x50\xa5\xe1\x54\xf8\xa8\x98\xa9\x44\x2a\x4a\x24\xa1\x63\xb4\xca\xa3\x74\xe1\xd3\x5a\xa1\x52\x48\xb2\xc0\x94\x8b\x2c\x50\x6b\x19\xa4\x49\x12\x0a\x25\x51\xca\xa0\xe9\x65\x48\x79\x8a\x8a\x90\x0a\x6f\x93\x1f\xb4\xb7\xc9\xb5\x2e\x63\x92\x88\xcc\xbb\x9c\x0f\x3a\x26\xb7\xc8\xc2\x73\x4b\x14\x65\x04\x96\xe1\x3d\x86\xed\xfd\x3f\x27\x52\xa8\x83\x8b\x5f\xb5\xf7\x16\xde\xb4\x56\x31\x33\x59\x78\xf0\x54\xae\x5c\x51\x1c\x97\x5e\xae\xf2\xe5\x7c\x24\x8a\xd4\x3f\xc5\x45\x8b\x2c\xc5\xc2\x1f\xfc\x1d\x0b\xe1\x1f\xf9\xac\x35\xe6\xf9\x7c\xca\x31\x38\x2c\xc7\x82\xb3\x98\x18\x99\x7f\xd6\x2b\x1c\x93\x39\x60\xe9\x0b\x2e\x35\xaa\xb0\xa5\x2c\x36\x34\x44\xa9\x91\x84\xff\xb7\x51\x12\x0a\x29\xb0\x48\x43\x2a\xbf\xe3\x80\xfb\x5a\x61\xff\x79\x5d\x71\x86\xb9\x40\x2a\x02\x43\xff\xd3\xfe\xb7\x6f\xad\x03\x7b\x5c\xb4\xff\x15\x16\xf3\x5f\xa9\x46\xa2\x2c\x60\x7c\x2b\xac\x29\xf9\x1b\x00\x00\xff\xff\x36\xd8\xcc\x57\xf7\x08\x00\x00")

func dataOpenwrtWin10UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin10UpdateFirewallUser,
		"data/openwrt/win10/update/firewall.user",
	)
}

func dataOpenwrtWin10UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin10UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win10/update/firewall.user", size: 2295, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4a\x03\x41\x0c\x86\xef\x7d\x8a\x42\xcf\x26\xe0\x45\x10\xbc\xf8\x0a\x1e\x3c\xa7\x33\xe9\x6e\x70\x26\x59\x27\xe9\xce\xd6\xa7\x17\x15\xc4\x2d\xad\x7a\x9c\xff\xfb\xe7\x0f\x7c\xbb\x2d\x72\x24\xcc\xea\x95\xfc\x15\x92\xe9\x61\xb3\xdb\x8e\x11\x93\xdf\x23\x0e\x12\xe3\x71\x0f\xc9\x2a\xa6\x46\x6f\xa7\x9b\x4a\x0b\x3e\x8b\x66\xeb\xfe\x34\x9d\x1e\x8b\xa5\x17\x6e\x18\x8d\x19\x2b\x79\x70\xc3\x4c\x41\x38\x9a\x87\x63\x17\xbd\x43\x5e\xa2\x11\xc4\x12\x9b\x8d\x73\x9b\xb9\x3d\x20\xa5\x90\x99\x42\x4c\xc1\x8b\x43\x95\xd4\xcc\xed\x10\x9f\x77\xbe\x5b\xc9\x6e\x7f\xc5\xad\x5c\x43\xb9\x66\xa8\x1c\xf4\xf1\x96\xc4\x57\x27\xb2\x3a\x54\x3f\x84\x26\x97\x35\x19\x60\x2f\x3a\x9c\x67\x45\x66\x5e\x67\xc5\x06\xd1\x0b\xf9\xe5\xd5\x90\xca\xd0\xbf\xec\xad\xc9\x4c\x45\xf2\x9f\x46\xba\x27\xd3\x00\x9a\xa6\xb3\x0a\x70\x1e\xd8\x8f\x12\x0c\xca\xf1\x8f\x0f\x3f\x2a\xbd\xaf\x1d\xbc\x07\x00\x00\xff\xff\x34\xeb\x0d\xc9\x11\x02\x00\x00")

func dataOpenwrtWin7ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7ExtraDnsmasqConf,
		"data/openwrt/win7/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin7ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/extra/dnsmasq.conf", size: 529, mode: os.FileMode(438), modTime: time.Unix(1495372316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\xbf\x6e\xc2\x30\x10\xc7\xf1\x3d\x4f\x71\x52\x66\x9f\xe3\xfc\x81\xd0\xad\x6d\x68\x95\x05\x90\xa1\x62\x36\xc9\x51\xd2\x86\xd8\xb2\x2f\x02\xfa\xf4\x15\x4b\xd5\x2d\xcc\xf7\xbd\x8f\x7e\x31\x48\xe2\x46\x1e\x3b\x4f\x17\xd3\xf7\x38\x06\xf2\x51\x0c\x27\x66\x17\x9e\xa4\xfc\xec\xf8\x34\x1e\xb0\xb1\x67\xd9\x78\xf3\x73\x13\x67\x73\x95\xfb\x6e\x68\xed\x25\x6c\xdd\xed\xa5\xb7\xcd\x37\x79\xc9\x9e\x48\x9e\x4d\x60\xf2\xb2\x35\x6c\xfe\x3c\x79\xe9\x86\xb9\xa4\x2b\x7b\x83\x7c\xe5\x28\x8a\x81\x86\xa3\xf5\x0d\x81\xb7\x23\x93\x87\x6a\xb5\x8d\x3a\xc7\xe6\xd0\x53\x00\xc1\x30\x18\x06\x51\xc3\x46\x2f\xf5\xfa\x63\x57\xaf\xde\x41\x38\xe0\xc6\x81\x10\xad\xb3\x9e\xa1\xc8\x40\x7c\x81\x5e\x56\xb5\x5e\xbe\xee\x40\x08\xb6\xe2\x7e\x08\x50\x64\xd3\xd2\xd8\x3e\x28\x45\x31\xf8\xb1\xa7\xf0\x8f\xac\xe1\x6d\xad\xf7\xcf\xba\xba\xbf\x55\x7a\xbd\x01\xd1\x82\xca\xb0\x4c\x50\xa5\x58\xe4\x53\x69\x9e\xa0\x52\x25\xaa\x24\xc3\xf9\x54\x3b\x2b\xb0\x48\x71\x51\x62\x9a\xa9\xc7\x5a\x95\x94\xa8\xa6\x47\xa4\xc9\x1c\xf3\x19\xaa\x45\x8e\x2a\x8f\x7e\x03\x00\x00\xff\xff\xdf\xca\x9e\x80\xff\x01\x00\x00")

func dataOpenwrtWin7ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7ExtraFirewallUser,
		"data/openwrt/win7/extra/firewall.user",
	)
}

func dataOpenwrtWin7ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/extra/firewall.user", size: 511, mode: os.FileMode(438), modTime: time.Unix(1495372419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x6e\xe2\x40\x0c\x86\xef\x3c\x05\x12\x67\xec\x25\xcb\xb2\xda\x95\x7a\xe9\x2b\xf4\xd0\xb3\x99\x38\xc9\x88\x8c\x1d\xc6\x86\x64\xfa\xf4\x15\xaa\xaa\x16\x04\x54\x9c\xbf\xef\xff\xe7\x1f\x2f\xe6\xc8\x1e\xb0\x16\x4b\x64\x7b\x08\x2a\xcd\x6c\x31\xef\xdc\x07\xfb\x8f\xd8\x46\xef\x0e\x5b\x08\x9a\x30\x64\x7a\x2b\xcb\x44\x13\xbe\x46\xa9\x75\xb4\x97\xa1\x3c\xf7\x1a\x76\x9c\xd1\x33\x33\x26\x32\xe7\x8c\x35\x39\x61\xa7\xe6\x86\x63\x94\xbf\x68\x43\x01\x9f\x7c\x36\x33\xce\x47\xce\x4f\x18\x6a\x5b\xad\xd6\xbf\xa1\x57\x81\xbe\x97\x11\x84\x1d\xcf\x68\xb5\xf9\x77\x9b\x56\xbf\xd6\xd5\x1a\xfa\x50\xae\x61\x4d\x03\x39\x4f\xa1\x23\x69\x79\x05\x9e\xa9\x69\x62\x48\x24\xd4\x72\xbe\x70\x4b\x05\xc6\xee\x51\x5a\x83\xd3\x68\x48\x31\x64\x35\x6d\xfc\xf4\x5f\xa0\x1d\xd5\x62\xe7\x99\x7a\xfb\xe7\xe1\x0c\x1f\xe0\xa8\xd9\x79\xba\x12\xf8\xb2\x5a\xd6\x87\x9b\x3f\xfd\xe5\x18\xe5\x6e\xb9\x0d\x45\xd8\xab\xfb\x98\x0f\x59\x07\xfe\xe6\x5c\x7d\x72\x9f\xc0\xb9\xe7\xc4\x9e\xcb\xad\x3e\xe7\xcc\xb5\x42\x1c\x8e\x9b\x5b\xca\xc7\x45\x7e\x1c\x3e\x92\x9b\xca\x05\x7d\x0f\x00\x00\xff\xff\xc4\x54\x7b\x1d\xb2\x02\x00\x00")

func dataOpenwrtWin7SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7SpyDnsmasqConf,
		"data/openwrt/win7/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin7SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/spy/dnsmasq.conf", size: 690, mode: os.FileMode(438), modTime: time.Unix(1495372312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd4\xc1\x72\xda\x30\x10\x06\xe0\xbb\x9f\x42\x33\x9c\xb5\xd2\xae\x24\xcb\xee\xad\x2d\x69\x87\x4b\xc8\x38\xe9\xe4\xec\x18\xa5\xa1\x05\xec\x91\xc5\x10\xfa\xf4\x1d\x97\x96\x3a\xa7\x55\x0e\x9c\xf8\xb4\x83\xfe\xfd\xd1\x42\xa8\x90\x3a\xf5\xbc\x8d\xe1\xd4\xee\x76\x70\x1c\x43\x2c\x16\xe2\x25\xa5\x61\xfc\xa0\xd4\xf7\x6d\x7a\x39\x3e\x41\xd7\xef\x55\x17\xdb\x5f\x67\xb9\x6f\x5f\xd5\xe3\xf6\xb0\xe9\x4f\xe3\xfd\x70\xfe\xb4\xeb\xbb\x9f\x21\xaa\x14\x43\x50\xfb\x76\x4c\x21\xaa\x4d\x9b\xda\xeb\x3c\x75\xda\x1e\xbc\x1a\x87\x33\xa4\xd7\x54\x14\x0b\x11\x0e\xcf\x7d\xec\x82\x88\xfd\x31\x85\x28\x96\xb7\xf7\xc5\x76\x48\xed\xd3\x2e\x8c\x42\x26\x71\x68\x93\x90\x2b\x71\xd7\xdc\x34\xeb\x6f\x0f\xab\xdb\xaf\x42\x0e\x22\x75\x83\x90\x72\x33\xf4\x31\x09\x67\x84\xfc\x21\x9a\x9b\xe5\xaa\xb9\xf9\xfc\x20\xa4\x4c\xbd\x9c\xbe\x18\x85\x33\xfc\xa4\xe3\x26\x73\x52\xb1\x10\xf1\xb8\x0b\xe3\x6c\xe4\x4a\x7c\x59\x37\x8f\x1f\x9b\xe5\x74\x6c\xd9\xac\xef\x84\xdc\x08\xab\xc1\x7b\x20\x2a\x81\x6c\xfd\x0e\xec\x74\x06\x46\xac\x00\x75\x09\x68\x58\xed\x08\xb0\xb4\x40\x56\x83\x63\x7f\xc7\x15\x23\x90\x76\x39\xda\x57\x80\xd6\x4f\xe3\x73\xb5\x43\x20\xa4\x5c\x3d\x7d\xca\x5c\x5c\x1b\xc0\x6c\x4d\x64\x80\x4c\x0e\xae\x3c\x94\x1a\x50\x7b\x0e\x97\x16\x2c\x38\x0b\xe4\xd8\xb9\xff\xa9\x65\xa9\x03\xe7\xc0\x5a\x40\x5d\xbd\xc3\xb2\xcb\xbe\x58\x44\x03\xfc\x3a\x66\x96\xbf\xda\x1f\x4b\x8e\xc0\x63\xbe\xad\xf9\xb9\x25\x20\xd6\x80\xd3\xed\x1c\xbf\x8b\xb9\xe6\x73\x9b\xe9\x8a\x4f\x6e\xa6\x6b\xb6\xf8\xa8\x2d\xd8\x29\x38\x0f\x25\x5b\xce\x2b\xae\x81\xd8\xf4\xfe\x62\xa2\x0a\xf8\xc6\xcd\x30\x69\x76\xe1\xff\xb4\xf1\x80\x25\x1b\x08\x22\x02\x11\x02\xd5\x19\xfd\x98\xe1\x8c\x3f\x0a\x1a\x0b\xe8\x35\x18\x3d\x1d\xca\xd5\xd3\x23\x63\xf9\xb0\xe7\x9a\x6d\xd4\x1b\xcd\x36\xea\xaa\x0d\x10\x9f\xdf\x14\x33\x7a\x20\xe3\x32\x9e\x3b\xac\x11\xc8\xd0\xa5\x24\x19\x09\xbe\xe1\xec\x73\x73\xe1\x1e\x48\x57\x80\x54\x16\xbf\x03\x00\x00\xff\xff\x67\x94\x07\x41\x08\x08\x00\x00")

func dataOpenwrtWin7SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7SpyFirewallUser,
		"data/openwrt/win7/spy/firewall.user",
	)
}

func dataOpenwrtWin7SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/spy/firewall.user", size: 2056, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\x45\xa5\xce\xf5\x25\x11\x52\x11\x12\x0b\xaf\xc0\xc0\x7c\xb1\xcf\x49\x44\xec\x0b\xbe\x0b\x6e\x79\x7a\x84\x1a\x95\x76\xa8\xdb\xd5\xdf\xe7\xef\xfe\xed\x06\x48\x2d\xb8\x28\x01\xe5\xcb\x58\x8e\xbe\xda\x6e\x06\xd5\x59\x5e\x00\xfa\x51\x87\xa5\x33\x96\x03\xd8\x84\x3f\xc7\x5d\xc0\x03\x7c\x8c\xd1\x71\x96\xf7\xf9\xf8\x36\xb1\xfd\xa4\x04\x9a\x88\x20\xa0\x28\x25\x70\xa8\x08\x03\x8b\x0a\xe4\x31\xee\x61\x99\x1d\x2a\x19\x3d\x68\x55\x09\xa5\x6f\x4a\xaf\x50\xd7\x75\xe7\xfc\xae\x31\x93\xc9\xa7\xd8\x6a\xfd\x1d\xba\xb0\x9a\xe7\xa7\xee\xbe\xd5\xb6\xb8\xbf\x67\xe1\x62\x1c\xe7\x38\x31\xba\x92\x66\x75\x72\xc5\xce\x39\x12\x46\x9b\x58\xd8\xeb\x0d\x5e\x6a\xc8\x43\x5b\x3c\xb5\x66\x7d\xbf\x71\xcc\xf7\xc6\x89\xe9\x9a\x87\x72\xe7\xc6\xb5\x13\x49\xff\x9d\xc2\xf7\x13\x5a\x09\xa7\xfe\x82\xe4\x5c\x1a\xf0\x1b\x00\x00\xff\xff\xe9\xbb\xfc\x71\x61\x02\x00\x00")

func dataOpenwrtWin7UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7UpdateDnsmasqConf,
		"data/openwrt/win7/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin7UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin7UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/update/dnsmasq.conf", size: 609, mode: os.FileMode(438), modTime: time.Unix(1495372311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin7UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd4\xcf\x72\x9b\x30\x10\x06\xf0\x3b\x4f\xb1\x33\x3e\x6b\xe5\x95\x90\x80\xde\xda\xda\xed\xf8\x12\x67\x48\x3a\x39\x2b\xa0\x34\xb4\x18\x18\xb1\x8c\x93\x3e\x7d\x87\xfe\xf1\xd8\x27\xc1\x99\x1f\xdf\x68\xbf\x15\x6c\x40\x7a\xae\xe4\x4b\x13\xfc\xd9\xb5\x2d\x4e\xa3\x0f\xc9\x06\x5e\x99\x87\xf1\x83\x94\xdf\x1b\x7e\x9d\x9e\xb1\xea\x4f\xb2\x0a\xee\xd7\xbb\x38\xb9\x37\xf9\xd4\x74\x75\x7f\x1e\x1f\x86\xf7\x4f\x6d\x5f\xfd\xf4\x41\x72\xf0\x5e\x9e\xdc\xc8\x3e\xc8\xda\xb1\xbb\xe4\xc9\x73\xd3\x65\x72\x1a\x6a\xc7\x1e\xf9\x8d\x93\x64\x03\xbe\x7b\xe9\x43\xe5\x21\xf4\x13\xfb\x00\xbb\xbb\x87\xa4\x19\xd8\x3d\xb7\x7e\x04\xc1\xd0\x39\x06\x71\x80\xfb\x72\x5f\x1e\xbf\x3d\x1e\xee\xbe\x82\x18\x80\xab\x01\x84\xa8\x87\x3e\x30\x18\x0d\xe2\x07\x94\xfb\xdd\xa1\xdc\x7f\x7e\x04\x21\xb8\x17\xf3\x83\x11\x8c\x8e\x27\x4d\xf5\xc2\xa4\x64\x03\x61\x6a\xfd\x78\x15\x79\x80\x2f\xc7\xf2\xe9\x63\xb9\x9b\x5f\xdb\x95\xc7\x7b\x10\x35\x90\x46\xda\x66\x98\xa2\xd9\xc6\xa8\x9a\xa9\x46\xca\x0b\x24\x65\x56\x69\xbb\x46\x9b\x6c\x95\xce\x63\xda\x1a\x34\x06\x49\xe7\x48\xa4\xd6\xe0\x74\x05\x8e\x8f\x78\x85\xf3\xa5\xd8\x6a\x54\x8a\xd6\xe0\xe8\x80\xa4\x53\xa4\x6c\x8b\x86\x90\x8a\xe8\xce\x2f\x5a\xa3\x5e\x8e\x73\xdc\x4a\x15\x6d\xef\x3f\x27\x32\x68\x17\x9f\x9b\xac\x41\x95\x46\x97\x7e\xcb\x8b\x55\xdc\x44\x1b\xbf\xe5\x3a\xca\x4d\x86\xc6\x62\x61\x91\x54\x1c\x17\x84\x4a\x2b\xcc\xe7\x22\x57\x60\x1b\xdf\xcf\x15\x8e\xf7\xfd\x07\xa7\x98\x29\xa4\x7c\xe1\xa1\xff\xe9\xe8\xed\xbe\xd1\x0b\x67\xfc\xab\xe3\x37\x56\xcd\x7f\x33\x3b\x7f\xbd\x73\x7d\xbf\x03\x00\x00\xff\xff\x9b\x89\x10\x77\x21\x06\x00\x00")

func dataOpenwrtWin7UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin7UpdateFirewallUser,
		"data/openwrt/win7/update/firewall.user",
	)
}

func dataOpenwrtWin7UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin7UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win7/update/firewall.user", size: 1569, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81ExtraDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8e\xd4\x30\x0c\x86\xef\xf3\x14\x2b\xed\xb9\x8e\x76\x4f\x08\x89\x0b\xaf\xc0\x81\xb3\x27\x71\x5b\x6b\x1b\xa7\x6b\x7b\x9a\x0e\x4f\x8f\x3a\xac\x80\x0e\x0d\x9a\x63\xf2\x7f\xfe\xed\xdf\xf2\xf3\x53\x20\x8f\x21\x89\x65\xb4\x77\x88\x45\xfa\xd3\xf3\xd3\xe8\x3e\xdb\xe7\x10\x06\xf6\xf1\x72\x86\x58\x72\x88\x8a\x3f\xae\x5d\xc6\x35\x7c\x67\x49\xa5\xda\xb7\xf9\xfa\x75\x2a\xf1\x8d\x34\xb8\x12\x85\x8c\xe6\xa4\x21\xa1\x63\x18\x8b\xb9\x85\xca\xf2\xe9\x25\xd0\xea\x8a\xe0\xab\x9f\x4e\x46\xba\x90\x7e\x09\x18\x9d\x17\x74\x2e\xd2\x2d\xaf\x60\x93\x41\xe6\xa8\xc5\x4a\xef\xb7\x5e\x7f\xc0\x79\xa6\xb5\xd3\x1e\xb2\xc9\x5e\x49\x39\x41\x26\xc7\xed\xcd\x91\x9a\x0e\x49\x0c\xb2\xf5\x2e\xd1\x78\xaf\xf4\x2c\x28\x91\xe0\xb7\xc3\xad\x19\x9c\x59\x86\x3b\xb0\x94\x84\x92\x92\xb2\xbc\x81\xf3\x44\x6d\x52\xbb\x5e\xa1\x3d\xf4\x70\x50\x33\xc0\xc4\x0b\xed\xff\x38\x0f\x60\x7e\x06\xeb\xfe\xb1\x98\xca\xc0\x72\x50\x72\x9c\x51\x68\xf5\xee\xef\x80\xcd\x3d\xbd\x5f\x48\xaf\x30\x6b\x49\x10\xb3\x81\x7a\x0b\xfc\x70\x83\x4a\xe8\x23\x69\x13\xf3\xa2\x44\x69\xa0\x3e\x41\xb2\x15\xf2\xdc\x22\x9d\x33\x41\xfd\x75\x53\x7b\x65\xc1\x89\xd3\x23\x67\x52\xb7\x68\x4a\x33\x58\x46\x75\x8b\x4a\x24\x4d\x16\xdd\x8a\x80\xd3\x44\x99\x5c\xaf\x4d\x2e\xc5\xe6\xc8\xd5\x62\x11\x3f\xd8\x27\x6c\x89\xed\xc2\x4e\x20\xe4\x0f\x14\xdc\x23\x2f\x0f\x30\xaf\xff\x67\x6a\x6d\x1c\xfc\xa6\x7c\xec\xd9\x08\x35\x8e\x37\xf9\x67\x00\x00\x00\xff\xff\x22\x24\xac\xea\x01\x04\x00\x00")

func dataOpenwrtWin81ExtraDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81ExtraDnsmasqConf,
		"data/openwrt/win81/extra/dnsmasq.conf",
	)
}

func dataOpenwrtWin81ExtraDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81ExtraDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/extra/dnsmasq.conf", size: 1025, mode: os.FileMode(438), modTime: time.Unix(1495372346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81ExtraFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd1\x31\x6f\xf2\x30\x10\xc6\xf1\x3d\x9f\xe2\xa4\xcc\x3e\xc7\x8e\x1d\xc2\xbb\xbd\x6d\x68\x95\x05\x50\xa0\x62\x36\x89\x29\x69\x43\x1c\xd9\x17\x01\xfd\xf4\x15\x4b\xd5\x0e\x55\xe8\xec\x9f\xff\xc3\x73\x31\x70\x4b\x35\x3f\xb4\xde\x9e\x4d\xd7\xe1\x18\xac\x8f\x62\x38\x12\x0d\xe1\x1f\xe7\xaf\x2d\x1d\xc7\x3d\xd6\xee\xc4\x6b\x6f\x3e\xae\xec\x64\x2e\x7c\xd7\xf6\x8d\x3b\x87\xcd\x70\x7d\xe8\x5c\xfd\x6e\x3d\x27\x6f\x2d\x3f\x99\x40\xd6\xf3\xc6\x90\xf9\xea\xf1\x73\xdb\xe7\x82\xdb\x0b\x79\x83\x74\xa1\x28\x8a\xc1\xf6\x07\xe7\x6b\x0b\xde\x8d\x64\x3d\x14\xcb\x4d\xd4\x0e\x64\xf6\x9d\x0d\xc0\x08\x7a\x43\xc0\x4a\x58\x57\x8b\x6a\xf5\xb2\x2d\x97\xcf\xc0\x06\xa0\x7a\x00\xc6\x9a\xc1\x79\x02\x9d\x02\x7b\x83\x6a\x51\x94\xd5\xe2\x71\x0b\x8c\x91\x63\xb7\x87\x00\x3a\x9d\x2e\x8d\xcd\x9d\xa5\x28\x06\x3f\x76\x36\x7c\x4b\x96\xf0\xb4\xaa\x76\xff\xab\xe2\xf6\xad\xa8\x56\x6b\x60\x0d\x88\x14\xf3\x04\x85\x44\xad\xa6\xa8\x4a\x50\x88\x1c\x45\x92\xe2\xec\x6e\x9b\xa1\x48\x93\x29\x9d\x29\x54\xa8\x15\x4a\x39\x29\x35\x6a\x89\x22\xc9\x51\xce\xef\xb7\xfa\x0f\x56\xfc\x38\xc3\x2f\x9b\x09\x94\x3a\xc5\x4c\x60\xc2\xe5\xe4\x6e\x32\x99\xa1\xca\x50\xcc\x15\x0a\x15\x7d\x06\x00\x00\xff\xff\xa9\x54\x26\x22\xb3\x02\x00\x00")

func dataOpenwrtWin81ExtraFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81ExtraFirewallUser,
		"data/openwrt/win81/extra/firewall.user",
	)
}

func dataOpenwrtWin81ExtraFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81ExtraFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/extra/firewall.user", size: 691, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81SpyDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xcd\x6e\xab\x30\x10\x86\xe1\x7d\xae\x22\x52\xd6\x8c\x81\x9c\x93\x26\x95\xba\xe9\x2d\x74\xd1\xf5\xd4\x1e\xc0\x0a\xfe\x89\x67\x08\xd0\xab\xaf\x68\xa5\xaa\x69\x13\x67\xcb\xf3\x0a\xac\x4f\x66\xb3\x56\x24\x5a\x19\xcf\x0e\xf9\x04\x3a\xf8\x66\xb5\x59\x77\x22\x91\x1f\x95\x6a\xad\x74\xc3\x1b\xe8\xe0\x94\x4e\xf8\x3e\x17\x0e\x27\xf5\x6a\xbd\x09\x23\xbf\xc4\xf9\xb9\x0f\xfa\x48\x49\x49\x22\x52\x0e\x59\x28\x29\x83\x82\xaa\x0b\x2c\xac\x46\xeb\xf7\x95\xe2\x38\x83\x4c\xb2\x5a\x31\xa5\x33\xa5\x27\x85\x45\x59\x96\x15\x60\xe1\x98\x4c\x4b\xe0\x49\xd4\x25\xd6\x39\xdc\xe6\xf0\x5f\x0e\xff\xe7\x70\x97\xc3\x87\x1c\xee\x73\x78\xc8\x60\x55\xe6\x30\xb7\x50\x75\x7b\xa1\x6b\x4f\xb5\xe1\xba\xaa\xf7\x15\xf4\xc1\x43\xdf\xfb\xf1\x0f\x6f\xb7\x07\xe8\xf5\x7c\x0d\x83\x8b\x28\x34\xe9\x0e\x7d\x4b\x15\x48\xc2\xa6\xb1\xda\xa1\xc7\x96\xd2\x65\x4b\x03\x9c\x43\x12\x9a\x60\xb9\x05\xe0\xac\x4e\x81\x43\x23\x9f\x17\xe8\xbb\x62\x12\xb1\xbe\xe5\x62\xb4\x3e\x1f\xc6\xd9\x93\xd4\x79\xc6\x5e\xf2\x01\x0d\x29\x44\xfa\xd1\xe0\x11\x8d\xe7\xcb\x93\xf3\xc9\x81\x50\x4f\x8e\x24\xcd\x37\xdf\x27\x28\xdc\x50\x0d\x43\x34\x28\x74\x37\x1b\xf9\x56\xb2\x7c\x2a\xbb\xe4\x12\xe8\xe0\x1c\x7a\x73\xff\x5c\x5f\x9b\xdf\x9d\x73\xf9\x1d\xc1\xc6\xf3\xee\x57\xf0\x11\x00\x00\xff\xff\x6a\xc4\x6f\xc2\x03\x04\x00\x00")

func dataOpenwrtWin81SpyDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81SpyDnsmasqConf,
		"data/openwrt/win81/spy/dnsmasq.conf",
	)
}

func dataOpenwrtWin81SpyDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81SpyDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/spy/dnsmasq.conf", size: 1027, mode: os.FileMode(438), modTime: time.Unix(1495372354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81SpyFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\x31\x6f\xdb\x30\x10\x05\xe0\xdd\xbf\x82\x80\x67\x3d\xf1\x8e\xa4\x28\x75\x6b\xeb\xb4\xf0\x92\x04\x4a\x8a\xcc\x8a\xcd\x34\x6e\x1d\x4b\x90\x68\x24\xe9\xaf\x2f\xa4\x34\x8e\x3a\x1d\x3d\x78\xf2\x67\xe2\xe1\x91\x77\x5e\xaa\x3c\xc4\x4d\xfe\xb0\xeb\xc3\x73\xb3\xdf\xe3\x38\x84\x7e\xb1\x54\x8f\x31\x76\xc3\xa7\x3c\xff\xb9\x8b\x8f\xc7\x7b\x6c\xda\xa7\x7c\xd3\x37\x7f\x5e\xb3\xa7\xe6\x25\xbf\xdb\x1d\xb6\xed\xf3\x70\xd3\xbd\x7e\xd9\xb7\x9b\xdf\xa1\xcf\x63\x1f\x42\xfe\xd4\x0c\x31\xf4\xf9\xb6\x89\xcd\xe9\xbc\xfc\x79\x77\x28\x29\x1f\xba\x57\xc4\x97\xb8\x58\x2c\x55\x38\x3c\xb4\xfd\x26\xa8\xbe\x3d\xc6\xd0\xab\xd5\xe5\xcd\x62\xd7\xc5\xe6\x7e\x1f\x06\x95\x45\x75\x68\xa2\xca\xd6\xea\xba\xbe\xa8\xaf\x7e\xdc\xae\x2f\xbf\xab\xac\x53\x71\xd3\xa9\x2c\xdb\x76\x6d\x1f\x95\x33\x2a\xfb\xa5\xea\x8b\xd5\xba\xbe\xf8\x7a\xab\xb2\x2c\xb6\xd9\xf8\xc5\xa0\x9c\x91\x4f\x3a\x6e\x13\x4f\x5a\x2c\x55\x7f\xdc\x87\x61\x76\xe4\x5a\x7d\xbb\xaa\xef\x3e\xd7\xab\xf1\x67\xab\xfa\xea\x5a\x65\x5b\xc5\x06\x55\x09\x5b\x81\x6c\x0a\xad\x26\xca\x24\x59\xab\xe1\x3d\x98\x0b\xb0\xad\xce\xc0\x4e\x4b\xd8\x11\xc8\x12\x0c\xc3\x89\x29\x1c\x83\x0a\x0b\xb6\x1a\x4e\x4c\x71\xc2\x04\xd6\x2e\x45\xfb\x12\x64\xfd\x78\x7c\xaa\x76\x04\x26\x4e\xd5\xe3\xa7\x48\xc5\x95\x01\x25\x6b\x66\x03\x36\x29\xb8\xf4\x28\x34\x48\x7b\x09\x17\x16\x16\xec\x21\xdf\xe0\x24\x9d\x05\x3b\x31\xc1\x07\x15\x5f\x67\xe1\xe0\x1c\x88\xc6\x1a\xce\xb0\xe2\x65\xcc\xac\x1c\x77\xb2\xec\x18\xf6\x0c\x5b\x9d\x61\xa9\x92\xeb\x2d\x40\x34\xce\xb3\x05\x39\xf9\xda\xe6\xba\x3c\x47\x97\xe2\x44\xcd\x75\x42\x6e\x0b\x36\x66\x9a\x41\x2a\xe5\x24\xef\xba\x00\x69\x51\x93\xb6\xb0\xe3\x0d\x7a\x14\xe2\x8c\x9c\x70\x05\x79\xd1\xfd\xc3\x6c\x3c\xa8\x10\x1b\x79\xd7\x5c\x42\x7e\xfc\x33\xcc\x5a\x7c\xa7\x64\x2c\xc8\x6b\x18\x7d\xb6\x96\x93\xcc\xb5\x38\x89\x73\x9d\x50\xe0\xd8\x1c\x15\x53\xdd\x24\xff\x09\xbd\x71\x0f\x36\x2e\x61\x39\x92\xf3\xd3\xf4\x1a\x93\x14\x7c\xd4\x05\xa8\xb2\xf0\x72\x83\x33\x2c\x17\x38\xc3\x72\x8c\x8a\xc0\x86\xdf\x1a\x29\xe5\x20\x33\x9e\xb0\x52\xff\xe7\x89\x61\x3c\x58\x97\x20\x96\x0b\x9f\x78\x05\xa7\x41\xf2\x54\x7e\x60\x2f\x2e\xaa\x13\x66\x90\x16\x97\xc9\x49\x5b\x38\x5e\xfc\x0d\x00\x00\xff\xff\x8e\xcd\xee\x78\x25\x0a\x00\x00")

func dataOpenwrtWin81SpyFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81SpyFirewallUser,
		"data/openwrt/win81/spy/firewall.user",
	)
}

func dataOpenwrtWin81SpyFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81SpyFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/spy/firewall.user", size: 2597, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81UpdateDnsmasqConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcd\x4e\x02\x31\x10\xc0\xf1\x3b\x4f\x41\xc2\x99\x4e\xbb\x2e\x41\x4c\xbc\xf8\x0a\x1e\x3c\x97\x7e\x2c\x1b\xfb\x01\x9d\x81\x82\x4f\x6f\x88\x1b\x0d\x89\xd0\xb9\x76\x7e\xf9\x4f\xd3\x2e\xe6\xe0\xc8\x80\x4d\x18\x35\x1e\x84\xc9\xc9\xcf\x16\xf3\x1d\xd1\x1e\x5f\x00\x86\x91\x76\xc7\xad\x30\x39\x82\x29\xfa\xeb\xb2\x8c\xfa\x0c\x1f\x63\xb2\xb9\xe2\xfb\xfe\xf2\x16\xb2\xf9\x74\x05\xa8\x38\x07\x51\x23\xb9\x02\x56\x93\x86\x5d\x46\x42\xa8\x63\x7a\x56\x70\xdc\x5b\x4d\x4e\xd0\x99\x66\x33\x74\xe5\xe4\xca\x2b\x48\x29\xa5\xef\x96\x4a\x04\x51\x7f\x6a\x93\xba\x6e\xba\x55\x1b\x86\xea\xb5\x65\x28\x23\x4d\x5b\x29\x29\xd7\x0c\xa5\x14\xa7\xb5\x36\x2b\x86\xb2\xca\x73\x54\xcf\x78\x89\xee\x69\xd3\xb7\x94\x3e\x0a\x9b\x6b\x0a\x59\xdb\x06\x3b\xf5\x2c\xb9\x1d\xae\x52\x0b\x1b\x44\x45\x11\x47\x53\x32\x66\x4f\xff\x21\x17\x1b\x48\xb1\x52\x8a\xd5\xea\x58\xad\x8e\xd5\x5a\xb1\x5a\x2b\x46\xcb\x50\xb0\x0f\xff\x87\xf3\xe4\xde\x75\x62\x3a\xbf\xb3\xe6\x2a\xea\xe1\xe1\xf4\xee\x15\xfd\xc0\xfd\xfa\xdf\xc0\xad\x49\x8e\xfe\x0c\x06\x6c\xdc\x95\xb9\xac\x39\x9a\x26\xb9\x0c\xf0\x1d\x00\x00\xff\xff\x31\xf0\xca\xef\xd7\x04\x00\x00")

func dataOpenwrtWin81UpdateDnsmasqConfBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81UpdateDnsmasqConf,
		"data/openwrt/win81/update/dnsmasq.conf",
	)
}

func dataOpenwrtWin81UpdateDnsmasqConf() (*asset, error) {
	bytes, err := dataOpenwrtWin81UpdateDnsmasqConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/update/dnsmasq.conf", size: 1239, mode: os.FileMode(438), modTime: time.Unix(1495372361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOpenwrtWin81UpdateFirewallUser = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd5\xcf\x6f\x9b\x30\x14\x07\xf0\x3b\x7f\xc5\x93\x72\xf6\x33\xcf\xc6\x06\x76\xdb\x96\x6c\xca\xa5\xa9\x68\xa7\x9e\x29\xb8\x2b\x1b\x09\xc8\x18\xa5\xdd\x5f\x3f\xd1\x68\x29\x3d\x4c\xb6\xcf\xf9\xe4\xe9\xcb\xfb\x01\x1b\xe0\xc6\x35\xfc\xa9\xb3\xe6\x5c\xf7\x3d\xce\x93\xb1\xc9\x06\x9e\x9d\x1b\xa7\x4f\x9c\xff\xec\xdc\xf3\xfc\x88\xcd\x70\xe4\x8d\xad\xff\xbc\xb2\x63\xfd\xc2\x1f\xba\x53\x3b\x9c\xa7\xbb\xf1\xf5\x4b\x3f\x34\xbf\x8d\xe5\xce\x1a\xc3\x8f\xf5\xe4\x8c\xe5\x6d\xed\xea\x6b\x3d\x7e\xee\x4e\x05\xf1\x79\x6c\x6b\x67\xd0\xbd\xb8\x24\xd9\x80\x39\x3d\x0d\xb6\x31\x60\x87\xd9\x19\x0b\xdb\x9b\xbb\xa4\x1b\x5d\xfd\xd8\x9b\x09\x98\x83\x53\xed\x80\xed\xe1\xb6\xda\x55\x87\x1f\xf7\xfb\x9b\xef\xc0\x46\x70\xcd\x08\x8c\xb5\xe3\x60\x1d\x28\x09\xec\x17\x54\xbb\xed\xbe\xda\x7d\xbd\x07\xc6\xdc\xc0\x96\x1f\x26\x50\xd2\x5f\x69\x6e\x03\x2b\x25\x1b\xb0\x73\x6f\xa6\x55\xc9\x3d\x7c\x3b\x54\x0f\x9f\xab\xed\xf2\xb7\x6d\x75\xb8\x05\xd6\x02\x49\xa4\x34\xc7\x0c\x55\xea\xa3\x62\xa1\x12\xa9\x28\x91\x84\x8a\xd2\x3a\x46\xab\x3c\x4a\x17\x3e\xad\x15\x2a\x85\x24\x0b\x4c\xb9\xc8\x02\xb5\x96\x11\x5a\x64\x02\x85\xf2\x62\x92\x84\x42\x49\xa4\x0c\xe9\xc3\xb0\xff\xa3\x33\xa4\x3c\x45\x45\x41\x49\xae\x5c\xa2\x28\x23\xb0\xf4\xce\xfd\x8a\xc3\x1a\xf8\x8f\x13\x29\x54\xde\xc1\xaf\xb5\x0e\x8e\xf2\xa6\x45\xb0\xd6\xcb\x88\xbc\x7b\xf2\x91\x07\xf7\xf0\x8d\x2b\x8a\xe3\xfe\xe9\xab\xfc\xb2\x59\x29\x16\xfe\x28\xef\x38\xe0\xd6\x56\x5a\x08\x7f\xcb\x17\xad\x31\xcf\x97\x0b\x8a\xc1\x61\xa9\x2f\x38\x8b\x89\x91\xf9\x7b\xbd\xc2\x31\x99\x03\x86\x7e\xc1\xa5\xc6\x80\x73\x7f\xb7\xa1\x21\x4a\x8d\x24\xc2\x76\xe3\x82\xfd\xef\x4a\x2a\x09\x85\x14\x58\xa4\x21\xf7\xb5\xc2\xde\xf3\x12\xcb\x77\x43\x23\x51\x16\xf0\x80\x2b\xac\x29\xf9\x1b\x00\x00\xff\xff\x7c\x99\x08\x9d\xb9\x07\x00\x00")

func dataOpenwrtWin81UpdateFirewallUserBytes() ([]byte, error) {
	return bindataRead(
		_dataOpenwrtWin81UpdateFirewallUser,
		"data/openwrt/win81/update/firewall.user",
	)
}

func dataOpenwrtWin81UpdateFirewallUser() (*asset, error) {
	bytes, err := dataOpenwrtWin81UpdateFirewallUserBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/openwrt/win81/update/firewall.user", size: 1977, mode: os.FileMode(438), modTime: time.Unix(1495371302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10ExtraDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x92\xdc\x30\x08\x45\xf7\x7d\x94\xa9\x32\x8b\xd9\xf6\x69\x34\x08\xc9\x54\x1b\x50\x09\x62\x3b\x39\x7d\x6a\xc6\x76\xb5\xdb\xe9\x2c\xc5\x87\xa7\xcf\xe7\x03\x3e\x25\x2b\x28\xc5\xfd\xf6\x01\x42\xee\xa4\x95\x3a\x4c\x3c\x13\xa0\xc9\x4f\xd5\x4b\x28\x3a\x1f\xef\xd9\x40\x9c\x50\xf3\x31\xb6\x50\x8a\x91\x3a\x08\x63\x37\xb7\x12\x47\xe7\xfa\x65\xeb\x93\x94\xd4\x17\xea\x7e\x6d\x4b\xad\x39\xf8\xe3\x77\xdb\xdb\x30\x2b\xa0\x69\x90\x06\xb4\x6e\x19\x50\x1c\xc4\x75\x57\x47\x63\xa4\x57\x06\xa8\xa7\xc0\xcd\xcd\x3b\xfd\x7e\xc3\x89\xbf\x71\x8b\x3a\x2c\xac\xd9\x16\x3f\xd7\xd1\xb4\x70\x85\x96\xdc\x9b\xf5\xd8\x40\x59\x32\x08\x45\x72\xea\x33\x23\xfd\x63\xbb\x10\xe5\xaf\x84\x8f\x67\x7d\x18\x6d\x94\x8b\xe8\x94\x3a\x8e\xff\x9d\x7d\x31\x53\x4f\xa9\xb3\xd4\xc1\x07\x71\x1d\xbe\xf7\x4b\x8f\x24\x89\xff\xd0\x9e\xf8\xc4\x48\xea\xac\x15\xa4\x5d\xd1\x93\x55\xd6\x13\x48\x60\xb4\x90\xc4\xd3\xf6\xb4\x52\x18\x69\x8f\xe3\x32\x6a\x7a\x08\x5e\x56\x10\xbf\xdf\x5a\x67\xa4\x89\x3d\xce\xf7\x39\x56\x3a\x2e\xe2\x61\x9d\x06\x96\x54\xc9\xc1\x87\x0b\xf4\x47\xa5\x5c\xa9\x64\xc8\xbe\xbe\x71\x1c\x2c\xf4\x1a\x44\x3c\x3e\xa1\x4d\xf1\xfc\xe2\x17\x9f\x0d\xcc\x4c\x0b\xa4\xc8\xb2\x01\xfe\x06\x00\x00\xff\xff\xbe\x71\xa1\xa8\xc3\x02\x00\x00")

func dataProxifierWin10ExtraDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10ExtraDomainsTxt,
		"data/proxifier/win10/extra/domains.txt",
	)
}

func dataProxifierWin10ExtraDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10ExtraDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/extra/domains.txt", size: 707, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10ExtraIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xd0\x41\xae\xc6\x20\x08\x04\xe0\xbd\x77\xe9\x84\x19\x40\x34\xde\xff\x5e\x2f\xb6\xef\x6f\x5d\x98\xf0\x05\x64\x8c\x74\x0c\x03\x85\x8c\xd5\xe8\xa0\x15\x1c\xd4\x78\x25\x42\x66\xab\x85\xa1\x0a\x52\x87\x5d\x5f\xad\xcc\xbb\x45\x0e\xd0\x1c\xb5\x5a\x0f\x04\x32\x20\xad\xd6\x13\x29\xd0\xf6\xc0\xa9\xe9\x9f\x06\xec\xfa\xea\x7b\xe1\x66\x3e\xf4\x9f\x94\x42\xf8\x6a\xb4\x40\x04\xc6\x9d\xf7\x50\x4c\x30\xfa\xf3\x4e\x3a\xa1\x74\x74\xc2\xae\x03\xf7\x62\x7a\x80\x65\xe0\x48\xd4\x1e\xee\x03\xdd\xc1\x81\x9a\xab\x71\x12\x72\x81\x3e\xf7\xdd\x43\xca\xd5\x64\x81\x9a\xe0\xac\x7d\xae\x83\x62\xec\x76\x21\x3a\x76\xc2\x1d\xf5\xf3\x0c\x9c\xed\x19\xff\xcb\x5e\xba\xbf\x94\x1c\xf3\x7f\xb8\x0f\xb0\xef\x0f\x8e\xf5\x17\x00\x00\xff\xff\x0e\x8e\xd4\x5a\xa5\x01\x00\x00")

func dataProxifierWin10ExtraIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10ExtraIpsTxt,
		"data/proxifier/win10/extra/ips.txt",
	)
}

func dataProxifierWin10ExtraIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10ExtraIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/extra/ips.txt", size: 421, mode: os.FileMode(438), modTime: time.Unix(1495371435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10SpyDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xef\xb2\xa3\x2e\x0c\xfd\xbe\x8f\xd2\x19\x33\xa0\x77\xfb\xdb\xce\x3e\x4d\x84\x54\x99\x8b\xc0\x8f\xa0\xb6\x6f\xbf\x63\xab\x55\xab\xd7\xf6\x53\x39\xe7\xe4\x0f\x21\x44\x4e\x80\x59\xc3\xa4\x2b\x02\x47\xe9\xef\xaf\x13\xa0\x76\x74\x6b\x79\xb1\xbc\x31\x28\xdf\x3c\x17\x7c\x82\x86\x51\x2f\xe8\x07\xe2\x5e\x8a\xe6\xb1\x26\xe5\x5e\x8a\xa4\x9b\x34\xd1\x95\x2d\xb5\xe3\x1c\x1a\xa3\xa2\x67\x7f\x7d\x11\xd6\x2b\x4c\xc6\x3b\xb0\xa6\x7b\xa5\xb2\x4e\x2c\xa2\x7e\xb2\xa3\xc9\xb0\x5e\x44\x8e\x43\x56\x8b\x35\x53\xec\x8c\x22\x06\xf6\xca\xa0\xdd\x86\x4c\x64\xa9\xa1\x14\xef\x80\x21\xd0\x0d\x4a\xe3\xaa\x29\xd6\xcc\xad\xcc\xc0\x31\x26\xf5\x41\xb4\xa6\xda\xc8\x5b\xba\x33\x31\xb5\x68\x09\x63\xaa\x27\x6f\x9d\x8f\x89\x6e\x27\xd0\x98\x10\x06\xdb\xa9\x18\x9b\xb8\x6b\xe5\xda\x37\xaa\x62\x2e\x02\xaa\x64\x3a\x93\xee\xd0\x1b\xa7\x7d\x3f\x1e\x23\x7e\x63\xa6\xb4\xcb\x1c\x03\xea\x44\xaa\x06\x4d\x7f\x7f\x0d\xbb\x7f\x54\x70\xed\xaf\xb4\x45\x21\x64\x86\x20\x75\xec\x56\x90\xda\x42\xd5\x12\x72\xb2\x10\x5f\x19\xbd\x43\xe7\xb5\xaf\x27\xb4\xa3\x5a\xfb\xca\xcb\x4c\xf9\x28\x84\x04\x0c\x06\xc2\xf0\x67\x8f\x2e\xf6\xe9\x22\x1c\x59\xf3\xb3\x55\x5c\x95\xf1\x7d\x2c\x51\x79\xdf\xee\xfa\xbe\xdd\xf5\x8f\xd0\x72\x3f\x6a\x3e\x0f\x85\xaa\xa6\xc7\xb1\x35\x18\xd3\xfa\x54\x54\x2d\x0f\x92\x7c\xb1\xf9\x3e\xbb\x49\x64\x84\x68\x0b\x55\xef\x50\xbe\x30\x9c\x90\x95\x9d\x6f\x02\x26\xba\xa9\x1a\x5d\x45\xa0\xac\x6f\x35\x86\xf0\xec\xc6\x35\x29\x21\x45\xbc\x5e\x8d\x6a\xd0\x61\x45\x71\xd2\xc4\x00\x9c\x36\xbd\xa5\x82\x14\x32\x0b\xd1\x6b\xd0\x1e\x34\x07\x68\xc2\x46\xc3\x12\xfa\xa0\xa0\x13\x4a\x8f\x23\x45\x97\x45\xef\x38\x17\x72\xf8\x41\xef\x78\x5d\x48\x5d\xfe\xde\x05\x59\xd5\x52\x48\x29\xc4\x45\xfe\x77\x28\x90\xbf\x7f\x70\xfb\x12\xfc\x91\xc5\xb1\xe0\x22\xbf\x3e\x08\x8a\xcb\x91\x40\x8a\x73\x7e\xfe\x20\x28\x0e\x43\x48\xf1\x27\x3f\xdc\xc5\x20\xc8\x7f\x16\x14\x83\xfd\x51\x1d\x06\xc1\x97\x38\x48\xb2\x10\x97\x3c\x17\xfb\xdb\xec\x1d\x4b\xbd\xc7\x9c\x1f\xa6\xb9\xb8\x48\x29\x76\x8f\x71\x16\x7c\xc9\xbd\xf4\x0d\x56\xce\x73\x32\x8a\x81\xdb\x10\x7c\x4c\xef\x1d\x45\xed\x38\x40\x77\xe7\xe7\xd5\xd2\x6d\xbe\xb0\xd5\xe2\x2f\xf9\x0f\xad\x5a\x91\xef\x28\x7e\x10\xd5\x72\x76\x59\xe7\xf3\x7f\x93\xb1\xcb\x0f\x06\xc0\x82\xdf\x1d\x01\xdf\xdd\xe7\xbb\x64\x4b\x09\x7d\xdf\x43\xc3\x80\xdf\xa8\xdd\xf8\x11\xb7\x9c\xf7\x54\x42\x24\xdd\x78\xa7\xe1\x71\x5b\xdf\x2c\x9b\xe5\x33\xa0\xf1\xa5\xb1\x04\xc1\x04\x02\x8c\x66\x53\xc2\x86\x5d\x22\x4e\xdb\xa9\xfa\x78\x57\xc4\xd6\x12\x83\x1f\x86\x04\x61\x08\xbc\xf8\xa4\x7b\x47\x4c\x29\x19\x57\x71\x76\x3a\xfa\x04\x86\x48\x70\xf5\x3e\x85\x68\x5c\x0a\x91\xb4\x51\x63\xec\x10\xa9\x33\xd4\xcf\x75\x1d\xc8\x38\xf8\xc2\xd7\x7b\xe0\x2d\x5d\x56\x35\x35\xb8\x84\x97\xc5\x61\x52\xed\x10\xcd\x22\xd7\x09\xed\xf7\xf0\x46\x78\x9a\x4d\x99\x32\x3a\x5d\xfa\xfd\x6e\x7a\x89\x7a\xe3\x0e\x05\xfb\xa4\xdb\x8c\xf5\x11\xa2\x2d\xb4\x1c\xeb\x1c\xee\x8e\xd2\xe6\x95\xf5\x84\xd1\x6e\xae\xc4\x93\xa0\x36\xfa\x40\x3f\xd5\x81\xfb\xc5\x49\x71\xf2\x91\x14\x26\xb4\xbe\x8a\xd4\x4d\x6f\xb7\x07\xfc\x7f\x8b\x76\x78\x73\xbc\xc7\x68\x63\x47\x77\xe8\x31\xb1\x77\xef\x64\xe2\x2b\x4d\x9f\x0e\xae\x31\x0c\x55\xde\xef\xe1\x8e\x22\x0f\xa1\xea\x7b\x19\x8d\x7e\xdc\x84\x9a\xe2\x98\xd6\xf3\x5e\x1f\xf7\xce\x98\xc0\xbc\x97\xfd\x8c\x7a\xe3\xa4\x00\x13\xba\xf3\x1b\xf3\x2f\x00\x00\xff\xff\x53\x97\xc9\xb0\x31\x0b\x00\x00")

func dataProxifierWin10SpyDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10SpyDomainsTxt,
		"data/proxifier/win10/spy/domains.txt",
	)
}

func dataProxifierWin10SpyDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10SpyDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/spy/domains.txt", size: 2865, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10SpyIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x96\x5d\xae\x03\x21\x08\x85\xdf\xbb\x97\x7b\xc2\x41\x11\x4d\xf7\xbf\xaf\x1b\xd0\x71\xb4\x0f\x6d\xe6\x13\x05\x45\x7e\x64\x81\x37\x28\x3b\x48\xff\x7e\x1e\x1c\xe0\xe0\x89\x4a\x49\xa4\x38\x0c\xbd\x7f\x3f\x5a\x30\x1c\x8d\x60\xf1\x87\xe8\x1d\xf4\xf2\xa0\xca\xc0\x58\xc2\x01\x0a\xc8\x17\x06\x6a\x3d\xa9\xbd\xc4\x16\xbf\x8d\x4a\xa8\x4c\x35\x14\x45\x85\x5a\xd9\xa4\x44\xdd\x40\x33\xb0\xca\xe2\x02\x76\x05\xb5\x7d\x3f\x55\xd0\x06\xaa\x80\xe6\x49\xde\x40\xd0\xdb\x06\x0d\x35\xfb\x9b\x4d\x27\x39\x54\x07\xe4\xef\xfd\x56\xb3\x14\xf5\x50\x3f\x50\x47\x12\x59\xd0\xb7\x8c\xe9\x29\x78\x7f\xa9\x82\xf6\x4e\x55\x45\xf5\x45\x15\xac\x03\xaa\xb2\x59\x2b\xc1\xca\xc5\x06\xa6\xab\x12\x1c\xac\x31\x41\x5e\x36\x42\x97\x66\x65\x8a\xd9\xf5\xfb\xb1\xd4\x81\xa2\x30\x7e\x3f\x16\x67\xca\x85\x28\xe5\xc2\xd8\xd5\xc6\xf0\xb4\x4d\x8e\xab\xac\x3e\x4d\x3d\x1c\xa6\xa8\x2f\xc7\xaf\xbd\x38\xca\xbc\xb7\xc5\xaa\x05\xba\x8c\x75\x47\x93\x88\x9e\xef\xa7\x55\x54\x34\x50\x64\x7d\x6b\x81\xfc\x3d\x5f\xe9\xc2\x04\xab\xcf\xb0\xd5\x35\x6c\x28\x23\x0f\xad\x45\x12\x4d\xa1\x0d\xda\x1f\xa0\x48\x2c\xda\xdf\xcf\xb2\x3c\x20\x33\xc6\xd6\xaa\x88\xe9\xdc\x8d\xc1\x0c\x71\xaf\xa5\x3f\x14\x46\xe4\x81\x5a\xd3\x81\x2f\xd4\x03\x28\xfd\xa2\xf1\x50\x44\x87\x6e\x1d\x19\x01\xbc\x48\x2f\x2a\x9b\x8a\xc0\xde\x75\xde\x30\x36\xe9\x74\xd4\xfe\xde\x87\x33\xa8\x29\x5a\x39\xc9\x79\xd2\xd0\x8b\xae\x99\x4c\x0b\x91\x72\x63\x46\x4f\xa4\xc8\xc5\xfd\xe6\x3e\x6e\xbe\xd6\x3b\x58\xf8\xfd\xb8\xa3\x79\xb8\x35\x73\x8c\x52\x91\xb1\xe5\x88\xea\x90\x18\xa7\x76\xb4\x76\x60\x94\x99\x17\xab\xc4\x29\x37\xab\x76\xd8\x8d\x2a\xfa\x72\x71\xb0\x8d\xc5\xe1\x56\x70\xd8\x46\x8d\x34\xe3\x33\x3d\x92\x5f\xc9\x4d\xa5\x67\x68\x2c\xb2\xc8\xa4\xb5\x54\x29\xa8\x70\x3f\x48\xd0\x0f\x54\x2a\xb4\x96\x67\xa0\xa2\x18\x34\xd2\x95\x24\x34\x4a\x57\xf8\xc0\x2f\xce\xfa\x75\xf1\x31\xbf\x45\xd8\x3f\x40\xf5\x79\xcd\x2c\x8c\x65\x51\x47\xe4\xef\x80\x4b\x18\xc9\x9d\x45\xbc\x82\x2e\x28\xb2\x3c\x74\x70\x3a\x78\x71\xdc\xbd\x1d\x4c\x69\xa9\xfc\xa5\xa5\xfd\x19\x88\x6a\x70\x73\xed\x37\x8f\x76\x72\xff\x99\xdf\x7f\xe6\x77\xb8\xfe\xcc\xbf\x16\x90\xe7\x7e\xc2\x25\xd7\x7e\x68\xb0\xd3\x9e\xca\x6d\x4f\xe5\xb6\xa7\x72\xdb\x53\xb9\xf7\xeb\x3d\xbb\xd5\xcb\x63\xde\xf4\xc3\x3d\xce\x73\x28\xd4\x62\x59\xfe\x22\x8e\xa3\x67\x75\x2e\xfb\xbe\x6a\xd4\x12\x9b\x47\xaa\x99\xc6\x61\xf6\xf7\x3c\xca\xc2\x76\x88\xda\x25\x8a\xce\xb8\x65\x01\x97\x50\x57\xc6\x2c\x2c\x72\xcc\x2d\x72\xcd\x8d\xdd\x6c\x61\xc0\x2d\x6c\xa7\xf0\xdc\x42\x43\xfc\x6f\xf0\x08\x39\xd9\x38\x38\x73\x63\x52\x84\x0c\x7b\xfd\x61\xfb\xe1\xf1\x72\x74\x42\x1e\xeb\x95\x38\xc5\x5a\xe7\x05\x2c\x8c\x2e\x99\xb6\x5b\x8f\x77\x87\xd6\xd9\x24\x17\xb2\xc6\xb6\x0f\x8c\xbc\x7b\xd1\x67\x49\x4c\x9c\xfd\x28\x8a\x6e\x62\xc9\x56\xd1\x78\x60\x87\x46\x9b\xe4\x20\xb4\x68\x96\x26\xf9\x3b\x69\x3a\x28\x07\x5a\x3e\x3b\xba\x3c\x1c\xef\x9e\x3e\x9f\x1d\x7b\x80\xa1\x70\x3c\x03\x23\x3a\x9a\x45\x28\x8e\xb8\xa8\x7c\x37\xa4\xfe\x97\x52\x7f\xd4\xcb\xda\x10\x25\x40\x37\x51\x66\xbf\x7f\x30\xea\xc0\x31\x99\xa3\x22\x5f\x40\xe2\x68\xd1\x9e\xdb\x2c\x2f\x1a\x6d\x26\x5e\x53\x1e\x47\x39\x29\x4c\xfd\x07\x00\x00\xff\xff\x5c\xca\x56\xd5\x07\x0a\x00\x00")

func dataProxifierWin10SpyIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10SpyIpsTxt,
		"data/proxifier/win10/spy/ips.txt",
	)
}

func dataProxifierWin10SpyIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10SpyIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/spy/ips.txt", size: 2567, mode: os.FileMode(438), modTime: time.Unix(1495371458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10UpdateDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x4b\x0e\xc2\x30\x0c\x05\xf7\x1c\x85\x85\x2f\xc0\x69\xac\xd8\x54\x11\xf1\x47\xb1\xa1\xea\xed\x51\x51\x41\xa4\xa0\x2e\x33\x99\x79\xf2\x19\x88\x5b\x7d\x70\x5f\x80\xc2\x41\x1c\xa4\x96\x6e\x61\xd7\x84\x62\x02\x1a\x98\x05\x94\xf3\x72\xfa\x52\xf7\xda\xfa\xf9\x01\x73\x55\xb2\x39\xee\x4e\x98\xfc\x4e\xb7\xd7\x38\x8e\x37\x24\x8d\x23\x65\xe5\xe3\xde\x00\x37\x66\x7d\x7a\xb1\xd8\xc7\x54\xc3\x1b\x2e\x05\x13\x9b\x4d\x7f\xce\x66\xa1\xf6\xdb\x3d\x03\x00\x00\xff\xff\x0b\xa3\xcc\xa9\x15\x01\x00\x00")

func dataProxifierWin10UpdateDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10UpdateDomainsTxt,
		"data/proxifier/win10/update/domains.txt",
	)
}

func dataProxifierWin10UpdateDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10UpdateDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/update/domains.txt", size: 277, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin10UpdateIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\x4d\x92\xc4\x20\x08\x05\xe0\x7d\xee\x32\xaf\x7c\xfc\x89\x95\xfb\xdf\x6b\xca\x4e\xba\x15\x77\xf9\x40\x02\x21\x52\xc1\xd6\x61\xf0\x76\x5f\x0b\x72\x5f\x32\xa1\x60\x0e\x50\xa2\xda\xfb\xe1\xbc\xaf\x70\xb8\x83\x9a\x68\x7f\xeb\x59\xdc\x7f\xa9\xd0\x95\x0a\x7d\x52\x54\x42\x5c\xa1\xfa\x4e\x60\x60\x6f\x70\x82\xd9\x0f\x67\xf5\xa8\xe7\xc5\xe2\x70\x3f\xbc\xd7\x2b\x64\x14\xea\xfe\xb6\xf9\x0d\x1b\xde\x49\x1f\x93\x8e\x68\x87\x65\x73\x78\xed\xf5\x04\xc6\x11\x70\x9e\x01\xbd\x2f\x7a\x7f\x16\xa7\x90\x66\x3f\x8b\x35\xe4\x28\x14\x69\xaf\x03\xbd\xcf\x55\x57\x8e\x42\xab\x87\x8d\x95\xb5\xd6\x56\xed\x08\xb8\x15\xe5\x2e\xca\x9c\x79\x10\xa2\x82\x6c\x4f\x76\xf1\xb3\xa5\x8d\xf2\xa5\xa1\x0b\x98\x7a\x38\x0e\x67\xf5\xfc\xdf\x32\xaf\x67\x80\xb4\x4f\xb3\x8d\xc1\xfb\x3f\x00\x00\xff\xff\x56\x9a\x98\x4c\xcc\x02\x00\x00")

func dataProxifierWin10UpdateIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin10UpdateIpsTxt,
		"data/proxifier/win10/update/ips.txt",
	)
}

func dataProxifierWin10UpdateIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin10UpdateIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win10/update/ips.txt", size: 716, mode: os.FileMode(438), modTime: time.Unix(1495371477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7ExtraDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x3d\x0e\xc3\x30\x08\x46\xf7\x1e\xa5\x03\x43\xd7\x9c\xc6\xc5\xc4\xfa\x24\x03\x51\xa0\xce\xf5\x3b\x58\x95\xaa\xf4\x67\x7b\xbc\x07\x12\x57\xd2\x58\xd3\x38\x40\xec\xba\x5c\x0a\x27\x46\x49\xb8\x51\xf4\x20\x05\xef\x1e\xbe\xe6\xac\xec\xb7\xaf\x7a\xef\x67\x55\xb5\x92\x4a\x96\x90\x7d\x80\xe5\xe3\xa4\xd1\x1d\xd6\x5e\xdc\x31\x64\x72\xf7\x06\x7b\x9b\x13\x2a\x74\xc0\xaa\x1f\x31\xcd\x28\x1d\xf5\xe7\x87\x47\xb0\x5b\x52\xd9\xb6\x53\x22\xa9\x4d\xe2\x81\x14\x32\xc9\x3f\x8b\xcb\x33\x00\x00\xff\xff\xc3\x10\xea\x2b\x13\x01\x00\x00")

func dataProxifierWin7ExtraDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7ExtraDomainsTxt,
		"data/proxifier/win7/extra/domains.txt",
	)
}

func dataProxifierWin7ExtraDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7ExtraDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/extra/domains.txt", size: 275, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7ExtraIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\xb9\x0d\x00\x21\x0c\x45\xc1\x9c\x62\x9e\xfc\x7d\x80\x91\xfb\xef\x6b\xb5\x01\xe1\x48\xa3\xa0\x0d\x39\x95\xb3\xd2\x90\x1a\x59\x70\x66\xed\xa2\x9c\xdb\x78\xe8\x49\xd6\xe8\xaf\x6e\x87\xdc\xe8\x26\xca\xf9\x02\x00\x00\xff\xff\x4c\x1d\x4f\xb9\x46\x00\x00\x00")

func dataProxifierWin7ExtraIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7ExtraIpsTxt,
		"data/proxifier/win7/extra/ips.txt",
	)
}

func dataProxifierWin7ExtraIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7ExtraIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/extra/ips.txt", size: 70, mode: os.FileMode(438), modTime: time.Unix(1495297247, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7SpyDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x4e\xc3\x30\x10\x44\xef\x7c\x4a\x24\x56\xc4\x84\x4a\x88\xaf\x59\xec\x49\xb0\xb0\x77\x23\x7b\xdb\xd4\x7f\xcf\xa1\x45\x8a\x52\x1f\x7a\x7d\xf3\x76\xb4\x33\x90\x21\x21\xc3\x4a\xa3\x1c\x7d\xd1\xaa\xb3\x91\xd7\xfc\xf5\x32\xd0\x45\x8b\xe1\x3a\x50\x60\xe3\x63\xea\x43\x1d\xc7\xe9\x9d\x92\x0a\xa5\x24\x1b\x09\xec\x46\xdd\xe9\xf3\x91\xba\xb7\xc9\x4d\x94\x7c\xdb\x63\xcd\x2b\x1b\xae\xfe\x87\x65\xc1\x48\x56\x78\x9e\xa3\xcf\x2c\xbc\xa0\xdc\x9d\xe6\xa8\xc2\x2c\xca\x52\x3b\x7f\x10\xff\x72\x90\x7a\x73\xc3\xf7\xc7\xd3\x2e\xce\xf7\x75\xdd\x71\x0b\xf4\xe9\xa6\x7f\xef\x75\x8b\xd2\x2d\xab\x6b\x13\x98\xeb\x63\x9c\x8b\xae\xd8\x65\xfb\x6a\x43\x41\x50\x8a\xeb\xe5\x74\xbc\xde\xd8\xaa\xca\x81\xfe\x05\x00\x00\xff\xff\x6d\xad\xbc\x0b\xcd\x01\x00\x00")

func dataProxifierWin7SpyDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7SpyDomainsTxt,
		"data/proxifier/win7/spy/domains.txt",
	)
}

func dataProxifierWin7SpyDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7SpyDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/spy/domains.txt", size: 461, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7SpyIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x4d\xae\xc4\x20\x0c\x03\xe0\x7d\x0f\x63\xc5\xce\x1f\x88\xfb\xdf\xeb\x89\x8e\xe6\x95\xce\x82\xc5\x17\x10\x0e\x21\x0c\xdd\x90\x0a\x8a\xb9\xae\x83\x69\x37\xc9\x01\x5a\x81\x6e\xeb\x4a\x81\x15\x50\x18\x72\x1e\x24\x64\xf9\x71\x0f\x30\x7a\x1f\x79\x9c\x84\xa8\xc7\x7b\xd5\xc3\xe9\xe0\x61\xc9\x21\xff\x70\x34\xca\x40\xeb\x75\x55\x20\x90\x01\xa5\x9f\x88\x75\x55\x22\x13\x11\xa0\x8d\x97\xe6\x57\xa4\x63\x37\x70\xc8\xbf\x52\x0a\xcd\x53\x73\xef\x15\xc8\x09\xee\x7b\xb2\x7f\x3c\xde\x1e\xf3\xed\x69\xeb\xa2\x05\x62\xc7\x34\xaa\x0e\x4e\x88\xff\x94\x06\xf6\x6b\x0e\xca\xf4\xd8\x1b\xac\xb9\x2e\x92\x90\x08\xcd\xbb\xef\x83\xf7\x30\xe8\x01\xb6\xc1\x6d\x97\x1f\xef\xb1\x47\xfd\xb8\x7f\x3c\x0e\x3b\xb4\xd3\x76\x2c\x1b\xf2\xbc\xbf\x89\x93\x90\xeb\xd3\xfc\x9d\xf7\x2a\xc4\xb7\xd0\x90\x0d\x50\xb5\xfe\x02\x00\x00\xff\xff\xb5\xf9\x6d\xa9\x55\x02\x00\x00")

func dataProxifierWin7SpyIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7SpyIpsTxt,
		"data/proxifier/win7/spy/ips.txt",
	)
}

func dataProxifierWin7SpyIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7SpyIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/spy/ips.txt", size: 597, mode: os.FileMode(438), modTime: time.Unix(1495371383, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7UpdateDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd2\xcb\xcd\x4c\x2e\xca\x2f\xce\x4f\x2b\x29\xcf\xcc\x4b\xc9\x2f\x2f\x2e\x2d\x48\x49\x2c\x49\xd5\xcb\x4b\x2d\xb1\xe6\xd2\xd2\x83\xf2\xe0\x8a\xf4\x92\xf3\x73\x41\xe2\xa8\x8a\x51\x04\xa1\x62\xf9\x45\xe9\xd6\x5c\x29\xf9\xe5\x79\x39\xf9\x89\x29\x68\x06\x00\x02\x00\x00\xff\xff\x8a\x38\x7e\x54\x76\x00\x00\x00")

func dataProxifierWin7UpdateDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7UpdateDomainsTxt,
		"data/proxifier/win7/update/domains.txt",
	)
}

func dataProxifierWin7UpdateDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7UpdateDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/update/domains.txt", size: 118, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin7UpdateIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x41\x8a\x85\x21\x0c\x03\xe0\xbd\x77\x99\x60\x5a\x53\x2b\xde\xff\x5e\x43\x17\x8f\x5f\x5d\x7e\x11\x12\x54\x3a\xd8\x27\x06\xd4\x77\xb3\x82\x83\xb9\x40\xd3\xe3\xb8\xad\xf9\x38\x77\x0b\x41\x02\x3d\x41\xda\xcd\x71\xb1\xca\x0e\xe6\xc7\x70\x98\xf1\xa6\xed\x46\x1f\xe0\xec\x10\xc1\xd5\x0f\x3b\xfc\x64\xa2\xff\x1d\x30\xe9\x3b\x24\x85\x38\xba\x18\x82\x8d\x7c\x83\xf5\x04\xe2\x1b\xf8\x6e\xd4\x84\x02\x2b\x40\x2b\x2e\xc2\xdc\x90\xb5\x7a\x31\xfa\x4d\xfb\x71\x60\x1a\x98\xfe\x38\x1e\xe7\xed\xba\xbb\xd5\x7f\x45\xbd\x69\x8d\xfd\x07\x00\x00\xff\xff\x28\x59\x2c\x24\xc1\x01\x00\x00")

func dataProxifierWin7UpdateIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin7UpdateIpsTxt,
		"data/proxifier/win7/update/ips.txt",
	)
}

func dataProxifierWin7UpdateIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin7UpdateIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win7/update/ips.txt", size: 449, mode: os.FileMode(438), modTime: time.Unix(1495297248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81ExtraDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x51\x8e\xeb\x20\x0c\x45\xff\xdf\x52\x2a\xc5\xd2\xeb\xef\xac\x86\x82\x43\x2d\x61\x93\xb1\xdd\x90\xee\x7e\x34\x53\x25\x8a\x48\x94\x3f\xe0\x1c\xec\x7b\x6f\x10\xa6\x09\x97\x41\x47\x60\x13\x88\x95\xbf\xfe\xdd\x80\x6d\x74\x89\x46\xeb\xdd\x50\x67\x8a\x68\x1f\x19\x1e\x24\x79\x43\x1c\xd4\x2d\x2a\xa2\x00\x53\xd4\x6a\x75\xf4\x15\x3a\x15\x3c\xf9\xd3\x30\xf8\x13\xb5\xf7\x43\x74\x9a\x83\x53\x95\x61\xbe\x83\x15\xeb\x85\xc4\x09\x18\x3d\x6c\x71\x3a\x9e\x77\x5b\x32\x14\x9a\xf1\x73\x26\xce\x60\xfe\x00\x1b\xb6\x8e\xa5\x66\x92\x9d\x22\xb8\xf8\xb0\xaf\x79\x18\xfe\xfd\x42\x7d\xc3\xa4\x35\x41\x64\x03\xf5\x5e\x30\xaf\x8a\x98\x32\x8e\x09\x92\x2d\xc0\x53\x6f\xcc\xa1\x50\xba\x2a\xd8\x82\x5b\x15\x70\x2c\xc8\xe8\xfa\x3e\xf0\x14\x0f\x43\x9b\xc5\x2a\x7e\x12\x19\x7e\xb3\xd8\x8b\x1c\x41\xd0\x2f\xc4\x15\xfd\xbf\x60\xf7\x73\xd6\x1a\x34\x92\x54\x9b\x19\x06\x8d\xcf\xbf\xe7\x9f\x00\x00\x00\xff\xff\x82\x52\x6f\x6c\x54\x02\x00\x00")

func dataProxifierWin81ExtraDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81ExtraDomainsTxt,
		"data/proxifier/win81/extra/domains.txt",
	)
}

func dataProxifierWin81ExtraDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81ExtraDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/extra/domains.txt", size: 596, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81ExtraIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xc7\xbb\x0d\x03\x20\x0c\x45\xd1\x9e\x5d\x72\xe5\xe7\x1f\x20\xef\xbf\x57\x94\x8e\x94\x47\xc1\x31\xe4\x54\xce\x4a\x43\x3a\xc8\x82\xfd\xa8\x51\xd8\xac\x4e\x92\x4a\xdc\x67\x75\x51\x8e\xec\xe0\xf7\x55\xfd\x49\x15\xb3\x14\xc2\x2b\x68\x61\x9f\x07\x5e\x35\xcb\x2d\xd9\x17\xdd\x8d\x9b\xfd\xbc\xc9\x46\x37\x51\xce\x37\x00\x00\xff\xff\x7d\x8c\x3d\x44\x9d\x00\x00\x00")

func dataProxifierWin81ExtraIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81ExtraIpsTxt,
		"data/proxifier/win81/extra/ips.txt",
	)
}

func dataProxifierWin81ExtraIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81ExtraIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/extra/ips.txt", size: 157, mode: os.FileMode(438), modTime: time.Unix(1495297249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81SpyDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xd1\x6a\x84\x30\x10\x45\xdf\xfb\x29\x82\x03\xc6\x97\x96\x7e\xcd\x90\xdc\x48\x68\x32\x91\xcc\x58\xeb\xdf\x17\xd6\x15\xc4\x75\x5f\xef\xe1\xdc\x99\xdb\x11\xf7\x45\x11\x26\x90\xc0\xbe\x3f\x3a\x32\x64\x14\x58\xdb\xa8\x24\xdf\xaa\xd6\x68\xe4\x6b\x79\xa0\xc6\x31\x26\x5f\x58\x78\x42\x3b\x84\xdf\xda\x0c\x7f\x14\xd8\xf8\xaa\xf8\xa0\x6e\x70\x9f\x03\xe5\x2a\x94\xb3\xac\xbb\xe3\x83\x8e\xe3\x17\x65\xbf\x9d\x42\x85\x59\x92\x49\xfb\x35\xc9\x6d\x99\xce\x9b\xc0\xdc\x7d\xcc\xd9\xee\x01\x96\x56\x67\x9c\x18\xff\x70\x10\x7d\xde\x34\x36\x8d\x70\xb4\xcc\x81\x0d\x2f\x0d\x07\x5e\xf5\x8a\xf6\xd1\xef\x7e\xfd\x0f\x00\x00\xff\xff\xe5\x1f\x14\x49\x56\x01\x00\x00")

func dataProxifierWin81SpyDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81SpyDomainsTxt,
		"data/proxifier/win81/spy/domains.txt",
	)
}

func dataProxifierWin81SpyDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81SpyDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/spy/domains.txt", size: 342, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81SpyIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\x51\xce\xec\x20\x08\x05\xe0\x77\x17\x73\xe2\x39\x80\x68\xdc\xff\xbe\x6e\xb4\x33\xb7\x3a\xf9\x1f\x9a\xf4\x23\x14\x28\xc8\x30\x3a\x7c\x80\x3e\xcb\xc2\xd8\x10\x67\xf1\x8a\x4c\x48\x0d\xf2\x71\x31\xea\x2c\x41\xd0\x09\x13\x82\xb3\x84\xc0\xe6\x90\x57\xc4\x38\x48\xa8\xc6\xe3\xec\xa0\xe7\x4a\x79\x1d\x84\xa8\xd7\xeb\x69\x2f\x87\x81\x87\x25\x83\xec\x61\x4f\xb4\x0a\xd6\x9c\xa5\x39\x1c\x4a\xac\xa9\xf6\x7b\x38\x14\x76\xc2\x67\x69\x81\x08\x90\xab\xe4\x25\x5d\xb2\xaf\x14\x82\x5f\x1a\x97\x38\x56\xbb\x06\x72\xed\xce\xc1\xc8\x1f\xf7\xdb\x7d\xdc\x1e\xcf\xb8\x32\xdb\xbb\x62\xef\x87\x1b\x58\xfb\x2c\xac\x0e\x5f\x53\x25\x5a\x3b\x38\xb0\x0e\xf4\xa1\x2c\xc1\x36\x5e\xab\x63\xfd\xfe\x41\x55\xcd\x42\x73\x30\x2b\xac\xfe\x61\xfb\xb1\xdf\xde\xed\x56\x1f\xb6\xdd\x9e\xf4\x6f\x20\x21\x8b\x7d\x36\x46\xee\x3d\x9a\x7d\x0a\x2c\x37\x70\x38\x52\x37\xed\xe6\x4a\x1e\x84\x4c\x4f\xf5\xae\x3b\xb0\xcf\x79\x07\xfe\x7f\x92\x50\xed\xa0\xda\x37\x30\x10\x15\xec\x17\x33\x0f\x0a\xac\xf5\xb0\x23\x34\xff\x05\x00\x00\xff\xff\x3d\xf7\x51\x99\x09\x03\x00\x00")

func dataProxifierWin81SpyIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81SpyIpsTxt,
		"data/proxifier/win81/spy/ips.txt",
	)
}

func dataProxifierWin81SpyIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81SpyIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/spy/ips.txt", size: 777, mode: os.FileMode(438), modTime: time.Unix(1495371525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81UpdateDomainsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x31\x0e\x02\x20\x0c\x85\xe1\xdd\xa3\x30\xbc\x04\x22\x93\xa7\x41\x0a\x86\x04\xa8\x0a\xda\xeb\x9b\xa0\x93\x62\xd7\xf7\xf3\x0d\xd4\xe0\x71\xa5\x30\x13\x5a\x89\x77\x1e\x9c\x27\x22\xb7\xd3\xc1\x40\x4a\x27\x96\xf1\xc9\x6b\x3c\x5f\xf0\x3c\x22\x80\x2a\x64\x7c\x8b\x77\x4c\xed\x4f\xb4\x2a\xb5\xaa\x75\xaa\x75\xaa\xf5\xaa\xf5\x8a\xcd\xc9\x41\x6e\xdb\xf5\xf7\xed\xfa\x3c\xb1\xf4\xca\x81\x36\xb7\x7b\x05\x00\x00\xff\xff\x7c\x3d\x05\xbc\x68\x01\x00\x00")

func dataProxifierWin81UpdateDomainsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81UpdateDomainsTxt,
		"data/proxifier/win81/update/domains.txt",
	)
}

func dataProxifierWin81UpdateDomainsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81UpdateDomainsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/update/domains.txt", size: 360, mode: os.FileMode(438), modTime: time.Unix(1495372068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataProxifierWin81UpdateIpsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd2\x51\xce\x84\x30\x08\x04\xe0\x77\xef\xb2\x13\x06\x0a\xa5\xf1\xfe\xf7\xfa\x53\xf7\xcf\x0a\x7d\xf3\x03\xc7\xd8\x51\x1a\x28\x13\x03\x2e\xf7\xa5\x1b\x06\xe6\x02\xd5\x0f\x47\xb7\xcf\xc3\x79\x5f\xe1\x70\x07\x2d\x21\x9f\xf7\x5a\xdd\x7f\xab\xb0\x77\x15\x56\x57\x3a\x14\xea\xe3\xbe\x68\x84\xba\x81\x03\x74\xdb\x1e\xe0\x14\x38\x21\x9f\x82\x27\xfb\xb3\x41\x57\xa3\x49\x61\xd6\x68\xf6\x28\xe9\xf0\xe8\x0e\x39\xac\xc5\xb1\x5f\x36\xcf\xc1\x3a\x06\xce\x73\xb0\xcf\xe2\xf3\x7b\x56\x41\xae\xc6\xa7\xdf\x62\x55\xf9\x77\x60\xce\xdd\x63\xe7\x6a\x1c\xfd\xe6\xc1\xce\x9e\x1d\x6f\x76\x05\x9e\xca\x5f\x65\x15\xd5\x1a\xf7\x37\xe7\x22\xd4\x14\x29\xdf\x96\x0a\xf5\xbe\x74\xff\x4b\x01\x72\x3c\x8f\x2a\x0c\xde\x7f\x01\x00\x00\xff\xff\xc0\x69\xc1\x43\x6c\x02\x00\x00")

func dataProxifierWin81UpdateIpsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataProxifierWin81UpdateIpsTxt,
		"data/proxifier/win81/update/ips.txt",
	)
}

func dataProxifierWin81UpdateIpsTxt() (*asset, error) {
	bytes, err := dataProxifierWin81UpdateIpsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/proxifier/win81/update/ips.txt", size: 620, mode: os.FileMode(438), modTime: time.Unix(1495371544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4b\x8b\xdb\x30\x10\xc7\xef\xf9\x14\x83\xa0\x97\xb0\x91\x6b\x6f\xbc\xdd\x9a\xd2\xcb\xee\x65\xa1\xdb\x0d\x84\x92\x43\xe9\x41\x91\x65\x47\xac\xad\x11\x1a\x39\x0f\x4a\xbe\x7b\x91\x92\xf8\x01\x7b\x28\xc2\x30\xf3\xd3\xcc\x7f\x1e\xf2\xdf\x19\x00\xdb\x2b\x47\x1a\x0d\x2b\x80\x2d\x79\xca\x53\x76\x17\x68\xa9\xb6\x5d\xcd\x0a\xa8\x44\x43\x2a\x12\xeb\xf0\xa8\x2b\xad\x1c\x2b\x20\x24\x02\xb0\x06\xeb\x95\xf0\xbb\x90\xfa\x54\x24\xbf\x48\x39\x4a\xbe\x75\xa4\x9c\x11\xad\xfa\x9e\x3c\xa3\xec\x5a\x65\x3c\x25\xab\x5b\x6e\xf2\x03\x6b\xee\x8f\x9e\xcd\x00\xce\x51\x96\x4e\xd4\xc6\xea\x57\x4d\xb5\xf7\xc7\x91\xe8\xe6\xe5\xe7\xf3\xdb\x66\x9d\xd0\x89\xbc\x6a\xef\xb3\xe4\xa0\x8d\xda\xfb\xa0\x43\xc9\xab\x96\x0e\x09\x2b\xbf\xd8\x68\x53\xe2\x81\x16\xeb\xa8\xf6\x69\xf9\x66\x95\x13\x5e\xa3\x11\x0d\x0f\x8a\x43\xbd\x83\x76\x8a\x76\xc2\xbd\x0f\x25\xad\x14\xd6\xfc\xe7\x24\x9b\x5b\x7a\x22\x85\xe5\x97\xcc\xb8\x31\x00\x26\x85\xf5\x9d\x53\xbd\x30\x00\xd3\xc6\x2b\x57\x09\x19\x60\x7a\x77\xa3\x95\x6e\x7c\xdc\x23\x33\xe8\x41\x38\x0b\xc2\x94\x60\xd1\x79\x08\x20\xbf\x8f\x7e\x30\xb5\x6c\xed\xc4\x79\xe8\xbd\xad\x43\x51\x4a\x41\x71\x97\x00\xe7\x7e\x42\x75\x94\x4d\x57\x0e\x6d\x30\x6d\x89\x15\xf0\xfb\x56\xfd\x33\x8f\x87\xf5\xed\xa4\xd9\x97\x88\xd2\x11\xfa\x9a\xf1\xf4\xe1\x31\xe0\xc5\x60\x67\x79\x3e\x84\x3c\xf2\x78\xa6\x60\xc9\x97\x03\xc8\xf2\x9c\x8f\xbe\x4b\x9f\x7f\xae\xcb\xda\x21\xf9\x49\x5b\xaf\xa7\x27\x6c\x6d\x17\x16\xd3\x2b\x34\x28\x45\x13\x22\x3f\x40\x3c\x5a\x25\xb6\x42\x9b\xe1\x7a\x7e\xc1\x03\x38\x61\xe7\x5e\xd6\x2b\x2e\xb1\x1d\x47\x7d\x88\xfb\x7f\x83\xa3\xab\xc7\xd1\xd3\x8b\xc9\x1c\xe8\xea\xc9\x18\xf3\xf0\xda\x5b\xc4\xf7\xf9\x35\x2e\xbc\xcb\xec\x3c\xfb\x17\x00\x00\xff\xff\xd3\xae\xd1\x85\x6c\x03\x00\x00")

func appConfBytes() ([]byte, error) {
	return bindataRead(
		_appConf,
		"app.conf",
	)
}

func appConf() (*asset, error) {
	bytes, err := appConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.conf", size: 876, mode: os.FileMode(438), modTime: time.Unix(1495058214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dnscrypt/win10/extra.txt": dataDnscryptWin10ExtraTxt,
	"data/dnscrypt/win10/spy.txt": dataDnscryptWin10SpyTxt,
	"data/dnscrypt/win10/update.txt": dataDnscryptWin10UpdateTxt,
	"data/dnscrypt/win7/extra.txt": dataDnscryptWin7ExtraTxt,
	"data/dnscrypt/win7/spy.txt": dataDnscryptWin7SpyTxt,
	"data/dnscrypt/win7/update.txt": dataDnscryptWin7UpdateTxt,
	"data/dnscrypt/win81/extra.txt": dataDnscryptWin81ExtraTxt,
	"data/dnscrypt/win81/spy.txt": dataDnscryptWin81SpyTxt,
	"data/dnscrypt/win81/update.txt": dataDnscryptWin81UpdateTxt,
	"data/firewall/win10/extra.txt": dataFirewallWin10ExtraTxt,
	"data/firewall/win10/spy.txt": dataFirewallWin10SpyTxt,
	"data/firewall/win10/update.txt": dataFirewallWin10UpdateTxt,
	"data/firewall/win7/extra.txt": dataFirewallWin7ExtraTxt,
	"data/firewall/win7/spy.txt": dataFirewallWin7SpyTxt,
	"data/firewall/win7/update.txt": dataFirewallWin7UpdateTxt,
	"data/firewall/win81/extra.txt": dataFirewallWin81ExtraTxt,
	"data/firewall/win81/spy.txt": dataFirewallWin81SpyTxt,
	"data/firewall/win81/update.txt": dataFirewallWin81UpdateTxt,
	"data/hosts/win10/extra.txt": dataHostsWin10ExtraTxt,
	"data/hosts/win10/spy.txt": dataHostsWin10SpyTxt,
	"data/hosts/win10/update.txt": dataHostsWin10UpdateTxt,
	"data/hosts/win7/extra.txt": dataHostsWin7ExtraTxt,
	"data/hosts/win7/spy.txt": dataHostsWin7SpyTxt,
	"data/hosts/win7/update.txt": dataHostsWin7UpdateTxt,
	"data/hosts/win81/extra.txt": dataHostsWin81ExtraTxt,
	"data/hosts/win81/spy.txt": dataHostsWin81SpyTxt,
	"data/hosts/win81/update.txt": dataHostsWin81UpdateTxt,
	"data/ncsi/ncsi.txt": dataNcsiNcsiTxt,
	"data/openwrt/win10/extra/dnsmasq.conf": dataOpenwrtWin10ExtraDnsmasqConf,
	"data/openwrt/win10/extra/firewall.user": dataOpenwrtWin10ExtraFirewallUser,
	"data/openwrt/win10/spy/dnsmasq.conf": dataOpenwrtWin10SpyDnsmasqConf,
	"data/openwrt/win10/spy/firewall.user": dataOpenwrtWin10SpyFirewallUser,
	"data/openwrt/win10/update/dnsmasq.conf": dataOpenwrtWin10UpdateDnsmasqConf,
	"data/openwrt/win10/update/firewall.user": dataOpenwrtWin10UpdateFirewallUser,
	"data/openwrt/win7/extra/dnsmasq.conf": dataOpenwrtWin7ExtraDnsmasqConf,
	"data/openwrt/win7/extra/firewall.user": dataOpenwrtWin7ExtraFirewallUser,
	"data/openwrt/win7/spy/dnsmasq.conf": dataOpenwrtWin7SpyDnsmasqConf,
	"data/openwrt/win7/spy/firewall.user": dataOpenwrtWin7SpyFirewallUser,
	"data/openwrt/win7/update/dnsmasq.conf": dataOpenwrtWin7UpdateDnsmasqConf,
	"data/openwrt/win7/update/firewall.user": dataOpenwrtWin7UpdateFirewallUser,
	"data/openwrt/win81/extra/dnsmasq.conf": dataOpenwrtWin81ExtraDnsmasqConf,
	"data/openwrt/win81/extra/firewall.user": dataOpenwrtWin81ExtraFirewallUser,
	"data/openwrt/win81/spy/dnsmasq.conf": dataOpenwrtWin81SpyDnsmasqConf,
	"data/openwrt/win81/spy/firewall.user": dataOpenwrtWin81SpyFirewallUser,
	"data/openwrt/win81/update/dnsmasq.conf": dataOpenwrtWin81UpdateDnsmasqConf,
	"data/openwrt/win81/update/firewall.user": dataOpenwrtWin81UpdateFirewallUser,
	"data/proxifier/win10/extra/domains.txt": dataProxifierWin10ExtraDomainsTxt,
	"data/proxifier/win10/extra/ips.txt": dataProxifierWin10ExtraIpsTxt,
	"data/proxifier/win10/spy/domains.txt": dataProxifierWin10SpyDomainsTxt,
	"data/proxifier/win10/spy/ips.txt": dataProxifierWin10SpyIpsTxt,
	"data/proxifier/win10/update/domains.txt": dataProxifierWin10UpdateDomainsTxt,
	"data/proxifier/win10/update/ips.txt": dataProxifierWin10UpdateIpsTxt,
	"data/proxifier/win7/extra/domains.txt": dataProxifierWin7ExtraDomainsTxt,
	"data/proxifier/win7/extra/ips.txt": dataProxifierWin7ExtraIpsTxt,
	"data/proxifier/win7/spy/domains.txt": dataProxifierWin7SpyDomainsTxt,
	"data/proxifier/win7/spy/ips.txt": dataProxifierWin7SpyIpsTxt,
	"data/proxifier/win7/update/domains.txt": dataProxifierWin7UpdateDomainsTxt,
	"data/proxifier/win7/update/ips.txt": dataProxifierWin7UpdateIpsTxt,
	"data/proxifier/win81/extra/domains.txt": dataProxifierWin81ExtraDomainsTxt,
	"data/proxifier/win81/extra/ips.txt": dataProxifierWin81ExtraIpsTxt,
	"data/proxifier/win81/spy/domains.txt": dataProxifierWin81SpyDomainsTxt,
	"data/proxifier/win81/spy/ips.txt": dataProxifierWin81SpyIpsTxt,
	"data/proxifier/win81/update/domains.txt": dataProxifierWin81UpdateDomainsTxt,
	"data/proxifier/win81/update/ips.txt": dataProxifierWin81UpdateIpsTxt,
	"app.conf": appConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.conf": &bintree{appConf, map[string]*bintree{}},
	"data": &bintree{nil, map[string]*bintree{
		"dnscrypt": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataDnscryptWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataDnscryptWin10SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataDnscryptWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataDnscryptWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataDnscryptWin7SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataDnscryptWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataDnscryptWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataDnscryptWin81SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataDnscryptWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"firewall": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataFirewallWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataFirewallWin10SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataFirewallWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataFirewallWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataFirewallWin7SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataFirewallWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataFirewallWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataFirewallWin81SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataFirewallWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"hosts": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataHostsWin10ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataHostsWin10SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataHostsWin10UpdateTxt, map[string]*bintree{}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataHostsWin7ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataHostsWin7SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataHostsWin7UpdateTxt, map[string]*bintree{}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra.txt": &bintree{dataHostsWin81ExtraTxt, map[string]*bintree{}},
				"spy.txt": &bintree{dataHostsWin81SpyTxt, map[string]*bintree{}},
				"update.txt": &bintree{dataHostsWin81UpdateTxt, map[string]*bintree{}},
			}},
		}},
		"ncsi": &bintree{nil, map[string]*bintree{
			"ncsi.txt": &bintree{dataNcsiNcsiTxt, map[string]*bintree{}},
		}},
		"openwrt": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin10ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin10ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin10SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin10SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin10UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin10UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin7ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin7ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin7SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin7SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin7UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin7UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin81ExtraDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin81ExtraFirewallUser, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin81SpyDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin81SpyFirewallUser, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"dnsmasq.conf": &bintree{dataOpenwrtWin81UpdateDnsmasqConf, map[string]*bintree{}},
					"firewall.user": &bintree{dataOpenwrtWin81UpdateFirewallUser, map[string]*bintree{}},
				}},
			}},
		}},
		"proxifier": &bintree{nil, map[string]*bintree{
			"win10": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin10ExtraDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin10ExtraIpsTxt, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin10SpyDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin10SpyIpsTxt, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin10UpdateDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin10UpdateIpsTxt, map[string]*bintree{}},
				}},
			}},
			"win7": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin7ExtraDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin7ExtraIpsTxt, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin7SpyDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin7SpyIpsTxt, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin7UpdateDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin7UpdateIpsTxt, map[string]*bintree{}},
				}},
			}},
			"win81": &bintree{nil, map[string]*bintree{
				"extra": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin81ExtraDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin81ExtraIpsTxt, map[string]*bintree{}},
				}},
				"spy": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin81SpyDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin81SpyIpsTxt, map[string]*bintree{}},
				}},
				"update": &bintree{nil, map[string]*bintree{
					"domains.txt": &bintree{dataProxifierWin81UpdateDomainsTxt, map[string]*bintree{}},
					"ips.txt": &bintree{dataProxifierWin81UpdateIpsTxt, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

